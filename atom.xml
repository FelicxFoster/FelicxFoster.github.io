<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YOLOのBLOG</title>
  
  
  <link href="https://blog.felicx.eu.org/atom.xml" rel="self"/>
  
  <link href="https://blog.felicx.eu.org/"/>
  <updated>2024-06-22T15:18:32.575Z</updated>
  <id>https://blog.felicx.eu.org/</id>
  
  <author>
    <name>felicx</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Github Action 自动化部署 Hexo 博客</title>
    <link href="https://blog.felicx.eu.org/165643616.html"/>
    <id>https://blog.felicx.eu.org/165643616.html</id>
    <published>2024-06-22T12:39:10.000Z</published>
    <updated>2024-06-22T15:18:32.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>每次部署 Hexo 都需要运行 hexo clean &amp; hexo g &amp; hexo d 指令三件套完成推送到远程仓库，随着文章越来越多，编译的时间也会越来越长。</p><p>Github Actions 可以很方便实现 CI&#x2F;CD 工作流，类似 Travis 的用法，来帮我们完成一些工作，比如实现自动化测试、打包、部署等操作。当我们运行 Jobs 时，它会创建一个容器 (runner)，容器支持：Ubuntu、Windows 和 MacOS 等系统，在容器中我们可以安装软件，利用安装的软件帮我们处理一些数据，然后把处理好的数据推送到某个地方。</p><p>通过 Github Actions，我们只需要在每次完成博客的编写或修改以后，将改动直接 push 到远程仓库，之后的编译部署的工作统统交给 CI 来完成即可。</p><h1 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h1><p>为什么还要创建新的仓库呢，我们之前根据 <a href="https://blog.felicx.eu.org/426584999.html">Hexo 博客搭建</a>部署的 Hexo 博客，<a class="link"   href="https://github.com/FelicxFoster/FelicxFoster.github.io" >your.github.io<i class="fas fa-external-link-alt"></i></a> 这个仓库是用来存放静态博客页面，只有前端页面的文件，所以我们需要创建一个私有仓库存放 Hexo 项目源码，下面用<code>HexoBlog</code>称呼。</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/51.3rb3bgrgpg.webp"                                        ></p><h1 id="上传仓库代码"><a href="#上传仓库代码" class="headerlink" title="上传仓库代码"></a>上传仓库代码</h1><p>创建完私有仓库后，在本地博客文件中复制几个文件到另外一个文件夹，其中包括<code>.github</code>，<code>scaffolds</code>，<code>source</code>，<code>themes</code>，<code>.gitignore</code>，<code>_config.yml</code>，<code>package.json</code>，<code>package-lock.json</code><br><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/52.13ln14aht9.webp"                                        ><br>还有一个很重要的一步：在<code>.gitignore</code>中添加<code>themes/keep/.git</code>，不然没法提交代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line"></span><br><span class="line">git remote add origin git@github.com:用户名/自动化仓库名.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h1 id="生成部署密钥"><a href="#生成部署密钥" class="headerlink" title="生成部署密钥"></a>生成部署密钥</h1><p>任意目录下，<code>ssh-keygen -f github-deploy-key</code>，然后一路按回车直到生成成功。当前目录下会有<code>github-deploy-key</code>和<code>github-deploy-key.pub</code>两个文件。</p><p>复制<code>github-deploy-key</code>文件内容，在 Github 的<code>HexoBlog</code>仓库点击<code>Settings -&gt; Secrets and variables -&gt; Actions -&gt; New repository secret</code>页面上添加。</p><ul><li>在<code>Name</code>输入框填写<code>HEXO_DEPLOY_PRI</code>；</li><li>在<code>Value</code>输入框填写<code>github-deploy-key</code>文件内容；</li></ul><p>复制<code>github-deploy-key.pub</code>文件内容，在 Github 的<code>your.github.io</code>仓库点击<code>Settings -&gt; Deploy keys -&gt; Add deploy key</code>页面上添加。</p><ul><li>在<code>Title</code>输入框填写<code>HEXO_DEPLOY_PUB</code>；</li><li>在<code>Key</code>输入框填写<code>github-deploy-key.pub</code>文件内容；</li><li>勾选<code>Allow write access</code>选项；</li></ul><h1 id="编写-Github-Actions"><a href="#编写-Github-Actions" class="headerlink" title="编写 Github Actions"></a>编写 Github Actions</h1><p>在本地<code>HexoBlog</code>根目录下创建<code>.github/workflows/deploy.yml</code>文件，目录结构如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">blog (repository)</span><br><span class="line">└── .github</span><br><span class="line">    └── workflows</span><br><span class="line">        └── deploy.yml</span><br></pre></td></tr></table></figure><p>在<code>deploy.yml</code>文件中粘贴以下内容。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">CI</span>  <span class="comment"># 自动部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="attr">THEME_REPO:</span> <span class="string">XPoet/hexo-theme-keep</span>   <span class="comment"># Hexo所使用的主题的仓库</span></span><br><span class="line">  <span class="attr">THEME_BRANCH:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">DEPLOY_REPO:</span> <span class="string">FelicxFoster/FelicxFoster.github.io</span>    <span class="comment"># Hexo编译后要部署的仓库</span></span><br><span class="line">  <span class="attr">DEPLOY_BRANCH:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">on</span> <span class="string">node</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span> <span class="string">and</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">os:</span> [<span class="string">ubuntu-latest</span>]</span><br><span class="line">        <span class="attr">node_version:</span> [<span class="number">16.</span><span class="string">x</span>]</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">theme</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">themes/keep</span>     <span class="comment"># 主题路径</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">deploy</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">.deploy_git</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configuration</span> <span class="string">environment</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">HEXO_DEPLOY_PRI:</span> <span class="string">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          git config --global user.name $GIT_USER</span></span><br><span class="line"><span class="string">          git config --global user.email $GIT_EMAIL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><h1 id="查看部署"><a href="#查看部署" class="headerlink" title="查看部署"></a>查看部署</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>重新提交后，即可在 Github 的<code>HexoBlog</code>仓库查看Actions部署结果。<br><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/53.58h8d9civl.webp"                                        ></p>]]></content>
    
    
    <summary type="html">使用 Github Action 自动化部署 Hexo 博客，实现随时随地写文章发文章</summary>
    
    
    
    <category term="折腾系列" scheme="https://blog.felicx.eu.org/categories/%E6%8A%98%E8%85%BE%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="hexo" scheme="https://blog.felicx.eu.org/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>2024年一波三折的Q2</title>
    <link href="https://blog.felicx.eu.org/1057849259.html"/>
    <id>https://blog.felicx.eu.org/1057849259.html</id>
    <published>2024-06-16T12:53:12.000Z</published>
    <updated>2024-06-16T12:53:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>距离上一次写博客已经过去了4个月。不是我不想写，实在是有心无力。Q2这段时间经历了太多事情，整个人都不在状态，这里也做个总结，顺便聊一下一些人生感悟。</p><p>3月份主要是在准备面试和面试的过程中，最近行情不太好，投了几家都没面邀，后面就只面了一家，搞自动驾驶的，一共三面，面试过程倒挺轻松的，问的问题也比较符合我现在做的，就是到了谈薪阶段，给不了想要的薪资，最后也是不了了之。</p><p>4月份一直在忙工作上的活，也没时间搞博客。</p><p>5月劳动节放假期间去配了副眼镜，结果度数配高了，戴了几天眼睛都很不舒服，赶紧请了半天假去医院检查了下眼睛，确认眼睛有点发炎，然后度数确实是过高了，只好戴回旧眼镜，想着后面有时间再去重新配一副。<br>然而，痛苦的事情来了。检查完眼睛的下午去参加了公司的团建，席中喝了些白酒，回来后右后槽牙开始隐隐作痛，本身这颗牙之前做过根管治疗。到了半夜，疼的受不了了，抓紧吃了颗布洛芬，模模糊糊睡了过去。到了早上，去牙科诊所看了下，先给我开了点止疼药，说是后面可能需要拔掉。吃了几天的止疼药后，牙齿没有自发疼了，但是有咬合疼。约了个中山大学附属口腔，想着主任能不能有办法只做根管，不用拔牙。但是事与愿违，医生建议还是拔掉，因为做了根管可能保不了半年又会复发，没必要浪费钱。整个人有点恍惚，又约了穗华口腔，想着能不能拯救一下。到了医院，拍了片医生还是建议拔掉，粗略跟医生算了下二次根管的费用和后续种植牙的费用，毅然选择了拔牙。整个过程很快，拔牙后的一周都在喝粥修养。</p><p>到了6月，最痛苦的来了。1号晚上饭还没吃完，突然肚子上腹部疼，到了晚上12点，痛感很明显，自发性绞痛，赶紧吃了粒洛索洛芬钠片，还是没法好受，而且开始怕寒，期间肚子很胀，又拉又吐。<br>到了凌晨3点，痛感更加明显了，钻心痛，汗水直流，实在顶不住了，开始裹着外套出门，本想着去附近医院挂个急诊，结果没开门，赶紧打车去南方医科大学附属医院挂急诊。到了那里，整个人都不好受了，医生也看不出啥，诊断是急性肠胃炎，然后打针挂水，挂到了早上，肚子还是很疼，但是医生看不出来，只好先回来了。<br>到了下午，右下腹开始按压疼，走路都很疼，顶不住了，去附近医院，又是B超又是拍CT，确诊为急性阑尾炎，心里想着先保守治疗吧，所以开始吊针，晚上回来后还是没有效果，晚上还被疼醒了。<br>第二天起来后，肚脐周围都开始按压疼，早上忍着痛去公司上班，实在顶不住了，又去医院挂了一次水，完全没有效果，立马挂了中山大学附属第三医院的胃肠外科，到了医院后，给医生看了确诊急性阑尾炎，立马给我挂了个急诊，让我办理住院。<br>早上六点开始做手术，麻醉很快，九点钟我醒来的时候已经做完手术了，然后整个人迷迷糊糊的被推回了病床，就是一整天都在挂水，下午我就开始下床走动，肚子被开了三个孔，有时候伤口有点疼，还带了个引流管，走路很麻烦。一共住了4天半院，最后一天早上拔了引流管后，下午就出院了。回来后整个人还是很虚，只能喝粥。</p><p>到了今天好了一点，趁还有精力写了下博客，记录下Q2这一波三折的人生经历。从眼睛到牙齿再到阑尾，Q2真是够精彩的。经历了这么多事情，也有了一些自己的感悟。</p><p>✅ 身体是自己的，只有搞好身体，才有赚钱的本钱。<br>✅ 好的心态很重要，心态好对病情恢复很有帮助。<br>✅ 身边有人陪还是挺重要的，一个人孤身看病住院其实挺难熬的。<br>✅ 医保是个好东西，能省很多钱，还有保险也要买。</p>]]></content>
    
    
    <summary type="html">记录一下Q2这段时间来的人生波折</summary>
    
    
    
    <category term="随笔" scheme="https://blog.felicx.eu.org/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="年度总结" scheme="https://blog.felicx.eu.org/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>CAN 之 DBC 文件解析（详细版）</title>
    <link href="https://blog.felicx.eu.org/4096777957.html"/>
    <id>https://blog.felicx.eu.org/4096777957.html</id>
    <published>2024-02-05T13:28:26.000Z</published>
    <updated>2024-02-05T13:28:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前写了一篇简单版的 <a href="https://blog.felicx.eu.org/768939725.html">DBC 文件解析</a>，下面详细介绍下 DBC 文件里的各个字段。</p><h2 id="总体概览"><a href="#总体概览" class="headerlink" title="总体概览"></a>总体概览</h2><p>DBC文件是以 Tag（标签）来标识每一个元素。</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_autodriving/9.5a3k6eadieg0.webp"                                        ></p><p>如上图所示，一般 dbc 文件中包含了如下的 8 种信息：</p><ul><li>版本与新符号</li><li>波特率定义</li><li>网络节点的定义</li><li>报文帧的定义</li><li>信号的定义</li><li>注解部分</li><li>特征部分</li><li>数值表部分</li></ul><h2 id="详细解释"><a href="#详细解释" class="headerlink" title="详细解释"></a>详细解释</h2><h3 id="版本的定义"><a href="#版本的定义" class="headerlink" title="版本的定义"></a>版本的定义</h3><p><code>VERSION</code> 信息可为空，也可以由用户自定义；<br><code>NS_</code> 表示 New Symbol，在外面创建 dbc 文件时已经自动生成，所以无需过多留意，默认即可；</p><h3 id="波特率的定义"><a href="#波特率的定义" class="headerlink" title="波特率的定义"></a>波特率的定义</h3><p>格式为 <code>BS_: [baudrate:BTR1,BTR2]</code></p><p>其中 <code>BS_</code> 为关键字，用于定义 CAN 网络的波特率；<code>[]</code> 内容表示为可选部分，可以省略；<br>但关键字 <code>BS_:</code> 必须存在，省略则会出错。《DBC File Format Document》规范中明确提醒，必须保留 <code>BS_:</code> 标签。</p><h3 id="网络节点的定义"><a href="#网络节点的定义" class="headerlink" title="网络节点的定义"></a>网络节点的定义</h3><p>格式为 <code>BU_: Nodename1 Nodename2 Nodename3 ……</code></p><p><code>BU_</code> 为关键字，表示网络节点；<code>Nodename1、Nodename2</code> 为网络节点名字，由用户自己定义。注意需要保证节点命名的唯一性。</p><h3 id="报文帧的定义"><a href="#报文帧的定义" class="headerlink" title="报文帧的定义"></a>报文帧的定义</h3><p>格式为 <code>BO_ MessageId MessageName: MessageSize Transmitter</code></p><ul><li><code>BO_</code> 为关键字，表示报文；</li><li><code>MessageId</code> 为报文 ID，是以 10 进制数表示的；</li><li><code>MessageName</code> 为报文的名字，命名规则和 C 语言变量相同；</li><li><code>MessageSize</code> 为报文数据域字节数，即数据长度，为无符号整型数据，CAN 2.0 为最大 8 字节，CAN FD  最大 64 字节；</li><li><code>Transmitter</code> 为该报文的网络节点；如果该报文没有指定发送节点，则该值需设置为 “Vector__XXX”。</li></ul><p>用 <code>BO_ 996 HUD_1_B: 8 HUD</code> 来举例，这个报文是由 HUD 这个节点发出的，数据域长度为 8 字节，ID 为 996（0x3E4），名字命名为 HUD_1_B。</p><h3 id="信号的定义"><a href="#信号的定义" class="headerlink" title="信号的定义"></a>信号的定义</h3><p>格式为 <code>SG_ SignalName (SigTypeDefinition) : StartBit|SignalSize@ByteOrder ValueType (Factor,Offset) [Min|Max] Unit Receiver</code></p><ul><li><code>SG_</code> 为关键字，表示信号；</li><li><code>SignalName</code> 为该信号的名字；</li><li><code>SigTypeDefinition</code> 是多路选择信号的定义，可选项，有 3 种格式；<ul><li>空，表示普通信号；</li><li>M，表示多路选择器信号；</li><li>m50，表示被多路选择器选择的信号，50 表示当 M 定义的信号的值等于 50 的时候，该报文使用此通路；</li></ul></li><li><code>StartBit|SignalSize</code> 表示该信号起始位、信号长度；</li><li><code>ByteOrder</code> 表示信号的字节顺序：0 代表 Motorola 格式，1 代表 Inter 格式；</li><li><code>ValueType</code> 表示该信号的数值类型：+ 表示无符号数，- 表示有符号数；</li><li><code>Factor,Offset</code> 分别表示因子和偏移量，这两个值用于信号的原始值与物理值之间的转换；<ul><li>物理值 &#x3D; 原始值 * 因子 + 偏移量；</li></ul></li><li><code>Min|Max</code> 表示该信号的最小值和最大值，即指定了该信号值的范围；这两个值为 double 类型；</li><li><code>Unit</code> 表示该信号的物理单位，为字符串类型；</li><li><code>Receiver</code> 表示该信号的接收节点，若该信号没有指定的接收节点，则必须设置为 “Vector__XXX”。</li></ul><p>如示下面的例中：<br>第一个信号 <code>SG_ S_Check : 45|10@0+ (0.00625,0) [0|160] &quot;M&quot; EL3160_60,ESC</code><br>表示定义了一个命名为 S_Check 的普通信号，其起始位是第 45 位，信号长度 10 bit；<br>信号是 Motorola 格式，数值类型为无符号类型数；因子为 0.00625，偏移量为 0；信号取值范围为 0 到 160；<br>信号物理单位为字符串 “M”，该信号接收节点为 EL3160_60 和 ESC 这两个节点。</p><p>第二个信号 <code>SG_ Send_Mux M : 7|8@0+ (1,0) [0|0] &quot;&quot; EL3160_60,ESC</code><br>表示定义了一个命名为 Send_Mux 的多路选择器信号，其起始位是第 7 位，信号长度 8 bit；<br>信号是 Motorola 格式，数值类型为无符号类型数；因子为1，偏移量为 0；信号取值范围为 0 到 0；<br>信号物理单位为字符串 “”；该信号接收节点为 EL3160_60 和 ESC 这两个节点。该信号做选择通道使用。</p><p>第三个信号 <code>SG_ S_Level_A_Voltage m50 : 15|16@0+ (0.00625,0) [0|160] &quot;V&quot; EL3160_60,ESC</code><br>表示定义了一个命名为 S_Level_A_Voltage 的被选择信号，其起始位是第 15 位，信号长度 16 bit；<br>信号是 Motorola 格式，数值类型为无符号类型数；因子为 0.00625，偏移量为 0；信号取值范围为 0 到 160；<br>信号物理单位为字符串 “V”；该信号接收节点为 EL3160_60 和 ESC 这两个节点。<br><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_autodriving/10.4eihxmqt4960.webp"                                        ><br><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_autodriving/11.mw28fhmxruo.webp"                                        ><br>Send_Mux 作为选择通路使用，这个例子中，当 Send_Mux 等于 50、51、52、54 时，代表后面的选择的通路。</p><h3 id="注解部分"><a href="#注解部分" class="headerlink" title="注解部分"></a>注解部分</h3><p>格式为 <code>CM_ Object MessageId/NodeName &quot;Comment&quot;</code></p><ul><li><code>CM_</code> 为关键字，表示注解信息；</li><li><code>Object</code> 表示进行注解的对象类型，可以是节点 BU_、报文 BO_、消息 SG_；</li><li><code>MessageId/NodeName</code> 表示进行注解的对象，若前面的对象类型是信号或者报文，则这里的值应为报文的 ID（10 进制数表示）；若前面的对象类型为节点，则这里的值应为节点的名字；</li><li><code>Comment</code> 表示进行注解的文本信息；</li></ul><p>如示例中的 <code>CM_ SG_ 996 HUD_HeightLv &quot;Control hud height level&quot;</code>;<br>表示对 ID 为 996（0x3E4）这条报文下的名为 “HUD_HeightLv” 的信号进行注解说明，说明的内容为 “Control hud height level”。</p><p>注意注释以 “” 包围，注释内部不允许再出现双引号。</p><h3 id="特征定义部分"><a href="#特征定义部分" class="headerlink" title="特征定义部分"></a>特征定义部分</h3><p>和特征相关的 Tag 一共有三条：</p><ul><li><p>BA_DEF_  特征名称类型定义。格式为 <code>BA_DEF_ Object AttributeName ValueType Min Max</code>;<br>   - BA_DEF 标签</p></li><li><p>Object 特征类型，可以是 BU_（节点特征定义）、BO_（报文特征定义）、SG_（信号特征定义）、空格（项目特征定义）；</p></li><li><p>AttributeName 特征名称（C 语言变量格式）</p></li><li><p>ValueType 特征值类型（只能是十进制、十六进制、浮点数、枚举、字符 5 种类型）</p></li><li><p>Min Max 数值类型这里出现范围，枚举类型这里是枚举值，字符类型，这里是空。</p></li><li><p>BA_DEF_DEF_ 特征默认值定义。格式为 <code>BA_DEF_DEF_ AttributeName DefaultValue</code>;</p><ul><li>BA_DEF_DEF_ 标签</li><li>AttributeName 特征名称（C 语言变量格式）</li><li>DefaultValue 该特征的默认设置值</li></ul></li><li><p>BA_ 特征项目设置值定义，格式为 <code>BA_ AttributeName projectValue</code>;</p><ul><li>BA_ 标签</li><li>AttributeName 特征名称（C 语言变量格式）</li><li>projectValue 该特征的设置值</li></ul></li></ul><p>举例：<br><code>BA_DEF_ BO_ &quot;GenMsgCycleTime&quot; INT 0 65535; BA_DEF_DEF_ &quot;GenMsgCycleTime&quot; 2200; BA_ &quot;GenMsgCycleTime&quot; BO_ 400 100;</code></p><p>表示对定义了一个针对消息类型的特征，特征名为 “GenMsgCycleTime”，特征值是整型数据，取值范围在 0 到 65535 之间；<br>默认值为 2200；<br>项目设置值 “CAN ID &#x3D;&#x3D; 400” 的消息，其特征值设置为 100；</p><h3 id="数值表部分"><a href="#数值表部分" class="headerlink" title="数值表部分"></a>数值表部分</h3><p>格式为 <code>VAL_ MessageId SignalName N &quot;DefineN&quot; …… 0 &quot;Define0&quot;</code></p><ul><li>VAL_ 为关键字，表示数值表定义</li><li>MessageId 表示该信号所属的报文 ID（10 进制数表示）</li><li>SignalName 表示信号名</li><li>N “DefineN” …… 0 “Define0” 表示定义的数值表内容，即该信号的有效值分别用什么符号表示</li></ul><p>如示例中的 <code>VAL_ 996 HUD_OffSt 1 &quot;Active&quot; 0 &quot;Not Active&quot;</code>;</p><p>表示对 ID 为 996（0x3E4）的这条报文下的，一个命名为 “HUD_OffSt” 的信号，进行其数值表的定义；<br>用 “Active” 取代 1；用 “Not Active” 取代 0。只有自然数类型的信号才可以使用数值表表示。</p>]]></content>
    
    
    <summary type="html">DBC 文件数据详细解析</summary>
    
    
    
    <category term="自动驾驶" scheme="https://blog.felicx.eu.org/categories/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6/"/>
    
    
    <category term="can" scheme="https://blog.felicx.eu.org/tags/can/"/>
    
  </entry>
  
  <entry>
    <title>CAN 之 DBC 文件解析（简单版）</title>
    <link href="https://blog.felicx.eu.org/768939725.html"/>
    <id>https://blog.felicx.eu.org/768939725.html</id>
    <published>2024-02-03T08:25:44.000Z</published>
    <updated>2024-02-03T08:25:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-DBC-文件"><a href="#什么是-DBC-文件" class="headerlink" title="什么是 DBC 文件"></a>什么是 DBC 文件</h2><p>DBC 是Database Can的缩写，其代表的是CAN的数据库文件。简单地说，通过 CAN 总线通信的数据类型可以用 DBC 文件来读取和理解。一般通过 Vector CANdb++ 进行编辑和查看。</p><h2 id="DBC-文件内容"><a href="#DBC-文件内容" class="headerlink" title="DBC 文件内容"></a>DBC 文件内容</h2><p>当我们打开一份 DBC 文件时，左侧树形目录对应</p><ul><li>Networks：从网络的视角来观察总线上存在的节点、报文和信号</li><li>ECUs：每个 ECU 的 Network Node 和 Environment Variables<ul><li>Environment Variables：在使用 CANoe 仿真节点时会用到</li><li>Network nodes：从单个节点的视角来观察与节点相关的总线报文及信号<ul><li>Tx Messages：节点发送报文</li><li>Rx Messages：节点接收报文</li><li>Mapped Tx Signals：节点发送信号</li><li>Mapped Rx Signals：节点接收信号</li></ul></li></ul></li><li>Messages：CAN 总线上传输信息的最小单位</li><li>Signals：Message 里最小的元素单位</li></ul><p>值得一提的是，Messages 与 Signals 下包含的报文信号比 Network nodes 下的收发报文信号要多，并且有可能会包含实际没用到的报文信号，因为所有创建的报文信号都会在 Messages 与 Signals 下显示，但只有映射到节点的报文信号才会在 Network nodes 下显示。</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_autodriving/8.3u67ywb5l6g0.webp"                                        ></p><p>因此我们主要看 Network nodes 下里的网络节点，网络节点分为多个类，如下图，分为 SDE、sensor2、sensor3 三个类节点。</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_autodriving/1.61mazo5befs0.webp"                                        ></p><p>当点开节点时，会看到类节点下的 TX 与 RX 下的多个 messages。</p><ul><li>ID：CAN message id，一般以16进制显示</li><li>Name： CAN message name</li><li>ID-Format：CAN 报文的类型（CAN Standard&#x2F;CAN FD Standard）</li><li>DLC：数据长度代码，CAN 报文中数据的长度</li></ul><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_autodriving/2.2jjluphrst80.webp"                                        ></p><p>每个 message 又包含了多个 signals。</p><ul><li>Name：信号的名称</li><li>Multiplexing：多路复用</li><li>Startbit：信号的起始位</li><li>Byte Order：信号的位计数，分为 Motorols（大端字节序）和 Intel（小端字节序）</li><li>Value Type：数据类型</li><li>Factor：信号的转换系数</li><li>Offset：信号的转换偏移</li><li>Minimum &amp; Maximum：最小和最大的信号值</li><li>Unit：信号中存在的物理数据的单位</li><li>Comment：信号说明</li></ul><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_autodriving/3.3sfawiu1lbg0.webp"                                        ></p><p>其中 factor 因数 与 offse 偏移量 定义了 physical 物理值（如vehicle speed，engine speed,water temperature）与 raw 原始值（总线上传输的值）的线性转换规则。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">physical_value = raw_value * <span class="built_in">factor</span> + offset</span><br><span class="line">raw_value = ( pysical_value - offset ) / <span class="built_in">factor</span></span><br></pre></td></tr></table></figure><h3 id="DBC-文件解析"><a href="#DBC-文件解析" class="headerlink" title="DBC 文件解析"></a>DBC 文件解析</h3><p>这里使用 Python。首先安装 cantools 这个库文件，可以直接解析 dbc 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install cantools</span><br></pre></td></tr></table></figure><p>使用时，直接 import cantools 即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cantools</span><br><span class="line">dbc_file = <span class="string">&quot;******&quot;</span></span><br><span class="line">dbc_info = cantools.db.load_file(dbc_file)    <span class="comment">#创建一个dbc数据库对象</span></span><br></pre></td></tr></table></figure><p>直接使用时，下述附代码，可直接复制使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cantools</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DbcInfo</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用于读取dbc文件，返回dbc信息</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_file</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        init</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.dbc_file = input_file</span><br><span class="line">        self.dbc_info = cantools.db.load_file(self.dbc_file)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_message</span>(<span class="params">self, frame_id</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return message，特别强调，frame_id输入10进制即可，同时必须是int型数据，不能是字符串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.dbc_info.get_message_by_frame_id(frame_id)   <span class="comment">#直接返回message的所有信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_message_name</span>(<span class="params">self, frame_id</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return message name</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.dbc_info.get_message_by_frame_id(frame_id).name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_message_name_by_message_id</span>(<span class="params">self, frame_name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return message id by message name</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.dbc_info.get_message_by_name(frame_name).frame_id</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_signals_list</span>(<span class="params">self, frame_id</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return signals list</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.dbc_info.get_message_by_frame_id(frame_id).signal_tree    <span class="comment">#这里返回的是message中signal的list，包含一个message中所有的signal</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_signal</span>(<span class="params">self, frame_id, signal_name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return signal, 输入message id和signal name</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.dbc_info.get_message_by_frame_id(frame_id).get_signal_by_name(signal_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_signal_config_maximum</span>(<span class="params">self, frame_id, signal_name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return signal maximum</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.dbc_info.get_message_by_frame_id(frame_id).get_signal_by_name(signal_name).maximum</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_signal_config_minimum</span>(<span class="params">self, frame_id, signal_name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return signal minimum</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.dbc_info.get_message_by_frame_id(frame_id).get_signal_by_name(signal_name).minimum</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_signal_config_scale</span>(<span class="params">self, frame_id, signal_name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return signal scale，这里指的是signal定义中其取值范围的间隔，</span></span><br><span class="line"><span class="string">        比如从1到10，每个2取一个值，scale就是2</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.dbc_info.get_message_by_frame_id(frame_id).get_signal_by_name(signal_name).scale</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_signal_config_comment</span>(<span class="params">self, frame_id, signal_name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return signal comment，signal说明</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.dbc_info.get_message_by_frame_id(frame_id).get_signal_by_name(signal_name).comment</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">signal_config_value_description_to_num</span>(<span class="params">self, frame_id, signal_name, value_str</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return signal value description</span></span><br><span class="line"><span class="string">        这里需要特别说明下，有些signal取值不是正常的数值，而是文字描述，</span></span><br><span class="line"><span class="string">        这个在定义中是个表，比如1：open, 2:close, 4:ignore，</span></span><br><span class="line"><span class="string">        本函数的意思是当你取到这个字符串，比如close时，能够返回这个字符串在对应中的数字2，</span></span><br><span class="line"><span class="string">        这在解析和保存以及后续发送中是很有用的。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.dbc_info.get_message_by_frame_id(frame_id).get_signal_by_name(signal_name).\</span><br><span class="line">            choice_string_to_number(value_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    dbc_info = DbcInfo(<span class="string">&#x27;D:test.dbc&#x27;</span>)</span><br><span class="line">    <span class="comment">#test，根据自己需求使用上述函数即可</span></span><br><span class="line">    <span class="comment">#frame_id输入10进制即可，同时必须是int型数据，不能是字符串</span></span><br><span class="line">    <span class="built_in">print</span>(dbc_info.get_message_name(<span class="number">520</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果想进行 can 报文修改，需要注意的是，直接给的数据不一定符合要求，需要保证修改数值在 signal 的最大最小范围内，同时保证该值符合定义中的取值间隔，可采用下述函数进行 check，保证输入数值符合要求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_value_meet_norms</span>(<span class="params">self, frame_id, signal_name, value</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    check value meet norms and return closest value based on scale factor</span></span><br><span class="line"><span class="string">    检查输入是否符合规范，同时输出符合规范的最接近输入value值的value</span></span><br><span class="line"><span class="string">    如果你要用脚本修改can报文，但是修改的值如果不符合要求，给入会报错，</span></span><br><span class="line"><span class="string">    该函数保证修改值符合规范且接近用户期望值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    max_value = self.get_signal_config_maximum(frame_id, signal_name)</span><br><span class="line">    min_value = self.get_signal_config_minimum(frame_id, signal_name)</span><br><span class="line">    scale_value = self.get_signal_config_scale(frame_id, signal_name)</span><br><span class="line">    <span class="keyword">if</span> value &gt; max_value:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(scale_value, <span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(max_value)</span><br><span class="line">        <span class="keyword">return</span> max_value</span><br><span class="line">    <span class="keyword">elif</span> value &lt; min_value:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(scale_value, <span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(max_value)</span><br><span class="line">        <span class="keyword">return</span> min_value</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        num = <span class="built_in">round</span>(value / scale_value)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(scale_value, <span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(num * scale_value)</span><br><span class="line">        <span class="keyword">return</span> num * scale_value</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a class="link"   href="https://www.cnpython.com/pypi/cantools" >cantools 官方包<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
    <summary type="html">DBC 文件数据格式介绍及解析</summary>
    
    
    
    <category term="自动驾驶" scheme="https://blog.felicx.eu.org/categories/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6/"/>
    
    
    <category term="python" scheme="https://blog.felicx.eu.org/tags/python/"/>
    
    <category term="can" scheme="https://blog.felicx.eu.org/tags/can/"/>
    
  </entry>
  
  <entry>
    <title>CAN 之 BLF 文件解析</title>
    <link href="https://blog.felicx.eu.org/1584988185.html"/>
    <id>https://blog.felicx.eu.org/1584988185.html</id>
    <published>2024-01-29T14:04:28.000Z</published>
    <updated>2024-01-29T14:04:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>blf 数据是 CAN 数据录制的一种格式，以二进制格式存储数据，需要用 CANoe 等工具进行解析才能查看数据，下面介绍使用 Python 解析 blf 数据。</p><h2 id="工具包安装"><a href="#工具包安装" class="headerlink" title="工具包安装"></a>工具包安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install cantools python-can</span><br></pre></td></tr></table></figure><h2 id="解析blf文件"><a href="#解析blf文件" class="headerlink" title="解析blf文件"></a>解析blf文件</h2><p>一般情况下，解析 blf 需要 dbc 文件，当然其实不用 dbc 也可以，只不过解析比较麻烦，推荐还是配合 dbc 解析，这个也是我们最常用的办法。所以要用 dbc，需要先加载 dbc 文件，这里需要cantools。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cantools</span><br><span class="line"><span class="keyword">import</span> can</span><br><span class="line">dbc_file = <span class="string">r&quot;xxx.dbc&quot;</span></span><br><span class="line">dbc = cantools.db.load_file(dbc_file)</span><br></pre></td></tr></table></figure><p>加载完 dbc 文件，就可以解析 blf 文件了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="string">r&quot;xxx.blf&quot;</span></span><br><span class="line">log_data = can.BLFReader(f)</span><br><span class="line"><span class="keyword">for</span> msg <span class="keyword">in</span> log_data:</span><br><span class="line">  <span class="built_in">print</span>(msg)</span><br></pre></td></tr></table></figure><p>打印结果是这样的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Timestamp: 1673917200.026000    ID: 0301    S Rx    DL:  8    1d b0 41 54 07 02 00 00    Channel: 0</span><br><span class="line">Timestamp: 1673917200.026000    ID: 070b    S Rx    DL:  8    00 c8 0c b6 24 b8 24 b8    Channel: 0</span><br><span class="line">Timestamp: 1673917200.028000    ID: 0322    S Rx    DL:  8    00 00 00 00 00 00 03 00    Channel: 0</span><br><span class="line">Timestamp: 1673917200.126000    ID: 030d    S Rx    DL:  8    00 14 00 00 00 00 00 00    Channel: 0</span><br></pre></td></tr></table></figure><p>上面 msg 输出的格式为“时间戳、can_id、属性（比如是否是 canfd 帧、是否是错误帧、是 rx 还是 tx 帧等等）、长度（也就是 dlc）、以 16 进制格式输出的 raw data、can channel”。</p><p>由于 msg 本身就是一个 can.message 类，因此我们也可以手动取到它的各种<a class="link"   href="https://python-can.readthedocs.io/en/stable/message.html" >属性<i class="fas fa-external-link-alt"></i></a><br><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_autodriving/12.1iob8ph8a2ow.png"                                        ></p><p>可以发现，时间戳解析出来了，其它的数据都是 16 进制，没法直接看。当然我们如果熟悉 blf 格式，可以自己把数据还原出来，但是既然已经用第三方库，我们当然就不用自己解析了，而且仔细观察一下即可发现，之前的加载 dbc 并没有用上，所以这时一个重要的函数登场了，那就是<code>dbc.decode_message(id, data)</code>，具体代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">decoded = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> msg <span class="keyword">in</span> logdata:</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    dec = dbc.decode_message(msg.arbitration_id, msg.data)</span><br><span class="line">    <span class="keyword">if</span> dec:</span><br><span class="line">      <span class="keyword">for</span> key, data <span class="keyword">in</span> dec.items():</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> decoded:</span><br><span class="line">          decoded[key] = []</span><br><span class="line">          decoded[key].append([msg.timestamp, data])</span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>因为我要把 blf 数据解析出来转成 mf4 了，所以构建了一个 decoded 字典，每个 key 里记一个信号，熟悉 mf4 的应该知道，mf4 里每个信号主要包含两部分，一个是时间戳，一个是数据，有了这两个，我们就可以创建 mf4 文件了，最后放上创建 mf4 的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> asammdf <span class="keyword">import</span> MDF,Signal</span><br><span class="line">sigs = []</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> decoded.items():</span><br><span class="line">  timestamps = [i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> v]</span><br><span class="line">  data = [i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> v]</span><br><span class="line">  s = Signal(data, timestamps, name=k)</span><br><span class="line">  sigs.append(s)</span><br><span class="line"></span><br><span class="line">mdf = MDF()</span><br><span class="line">mdf.append(sigs)</span><br><span class="line">mdf.save(<span class="string">&quot;xx.mf4&quot;</span>, overwrite=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这样就实现了 blf 文件的解析与转换，当然，转换的格式很自由，只要熟悉相应的格式，比如 csv，hdf5，xlsx，json，pickle 都可以，因为我们已经拿到原始数据了，保存成什么格式就很简单了。</p>]]></content>
    
    
    <summary type="html">Python 中用 cantools 和 can 工具包解析 blf 文件</summary>
    
    
    
    <category term="自动驾驶" scheme="https://blog.felicx.eu.org/categories/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6/"/>
    
    
    <category term="python" scheme="https://blog.felicx.eu.org/tags/python/"/>
    
    <category term="can" scheme="https://blog.felicx.eu.org/tags/can/"/>
    
  </entry>
  
  <entry>
    <title>CAN 之报文录制格式</title>
    <link href="https://blog.felicx.eu.org/2276434991.html"/>
    <id>https://blog.felicx.eu.org/2276434991.html</id>
    <published>2024-01-28T14:16:50.000Z</published>
    <updated>2024-01-28T15:07:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>搞自驾，免不了要跟 CAN 数据打交道，那常见的 CAN 报文录制格式有哪些呢？</p><h2 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h2><p>CSV（Comma-Separated Values）以纯文本形式存储表格数据（数字和文本）。</p><p>多用于测试数据，全文本文件，可以用 notepad++，Excel 等软件直接打开。</p><h2 id="ASC-BLF"><a href="#ASC-BLF" class="headerlink" title="ASC&#x2F;BLF"></a>ASC&#x2F;BLF</h2><p>ASC（ASCII）格式为可读的文本文件，该格式文件可以与外部程序进行数据交互，可读性强。<br>支持所有总线信息&#x2F;协议、系统变量、环境变量、内部事件、标记和注释的报文。</p><p>BLF（Binary Logging Format）格式是基于报文的读写格式，是一种二进制日志格式。以二进制格式存储数据，在文件大小和读&#x2F;写性能方面非常高效。<br>支持所有总线信息&#x2F;协议、系统变量、环境变量、内部事件、标记和注释的报文。</p><p>这两种文件主要用于 CANoe&#x2F;CANalyzer 等相关 Vector 软件，用于记录测试数据（ASC 可以用文本直接打开，BLF 需要用 CANoe 进行解析）。</p><h2 id="MDF-MF4-dat"><a href="#MDF-MF4-dat" class="headerlink" title="MDF&#x2F;MF4&#x2F;dat"></a>MDF&#x2F;MF4&#x2F;dat</h2><p>MF4（Measurement Data Format version4）格式用于汽车行业以二进制文件格式存储测量数据。CAN、LIN 和 FlexRay 总线信息以 ASAM 标准存储，其他总线系统和协议以Vector-specific 标准存储。<br>支持所有总线信息&#x2F;协议和环境变量。</p><p>MDF（Measurement Data Format）格式分为基于报文的和基于信号的，基于报文的格式只记录报文信息，基于信号的格式只记录信号信息。<br>支持环境变量、统计信息、CAN 信号、LIN 信号、FlexRay 信号、GPS 信号、J1939 信号和 J1587&#x2F;J1708 信号，但是不支持MOST 信号。</p><p>这几种文件主要用于标定工具（如 CANape&#x2F;INCA 等）测试数据的记录。这些数据可以包含不同类型的数据，故在标定领域应用较多。</p><h2 id="A2L-HEX-S19"><a href="#A2L-HEX-S19" class="headerlink" title="A2L&amp;HEX&#x2F;S19"></a>A2L&amp;HEX&#x2F;S19</h2><p>A2L 文件是基于 ASAP2 标准，采用 ASAP2 指定的一套类 XML 语言的描述性语言（采用开标签和关标签来描述信息）书写，描述 ECU 的通信等相关的参数，以及标定，观测变量的地址以及物理值计算公式等等的文本格式文件。HEX&#x2F;S19 文件则是对应的地址的参数和数据文件。</p><p>这几种数据也多用于标定领域，从事标定工作的小伙伴肯定不陌生。</p><p>打个不太恰当的比方，如果把车载 ECU 比作一个人，那么 A2L 就是他的骨架，HEX&#x2F;S19 文件就是他的血肉，两者缺一不可。<br>另外需要注意的是每一版软件的 A2L 和 HEX 里的地址是一一对应的，如果错用了HEX 文件就有可能出现数据紊乱的情况，需要特别注意。</p>]]></content>
    
    
    <summary type="html">本文介绍了汽车软件开发测试中常见的 can 报文录制格式</summary>
    
    
    
    <category term="自动驾驶" scheme="https://blog.felicx.eu.org/categories/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6/"/>
    
    
    <category term="can" scheme="https://blog.felicx.eu.org/tags/can/"/>
    
  </entry>
  
  <entry>
    <title>Docusaurus 搭建个人知识库</title>
    <link href="https://blog.felicx.eu.org/2483129101.html"/>
    <id>https://blog.felicx.eu.org/2483129101.html</id>
    <published>2024-01-13T15:24:25.000Z</published>
    <updated>2024-01-13T15:30:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>博客是用来展示自己的，想写啥就写啥，所以会比较杂。而 Wiki 更偏向于电子百科，可以作为个人知识库。市面上有很多优秀的 Wiki 系统，但我不想花钱买数据库服务，只能找不需要数据库的这一类系统。因此找到了 <code>Docusaurus</code> ，支持用 <code>jsx</code> 语法的 <code>markdown</code>，无缝结合 <code>React</code>。具体效果可以参考<a class="link"   href="https://wiki.felicx.eu.org/" >我的 Wiki<i class="fas fa-external-link-alt"></i></a></p><h2 id="Docusaurus-安装"><a href="#Docusaurus-安装" class="headerlink" title="Docusaurus 安装"></a>Docusaurus 安装</h2><p>主要参考了<a class="link"   href="https://www.docusaurus.cn/docs/installation" >官方文档<i class="fas fa-external-link-alt"></i></a></p><h3 id="系统需求"><a href="#系统需求" class="headerlink" title="系统需求"></a>系统需求</h3><p>Node.js &gt;&#x3D; 16.14 或 yarn &gt;&#x3D; 1.5</p><h3 id="创建站点"><a href="#创建站点" class="headerlink" title="创建站点"></a>创建站点</h3><p>安装 Docusaurus 的最简单方法是使用命令行工具，该工具会搭建 Docusaurus 网站骨架。</p><p>在新的空存储库中或现有存储库中的任何位置运行此命令，将创建一个包含支架文件的新目录，并自动下载安装需要的库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx create-docusaurus@latest my-website classic</span><br><span class="line"><span class="comment"># `my-website` 为你想要创建的目录，`classic` 为你想要用的模板</span></span><br><span class="line"><span class="comment"># 也可以选择 `facebook`、`bootstrap` 等模板</span></span><br></pre></td></tr></table></figure><h3 id="运行站点"><a href="#运行站点" class="headerlink" title="运行站点"></a>运行站点</h3><p>要在编辑文件时预览更改，可以运行一个本地服务器并启动你的网站，最新更改就能立即反映出来了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-website</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>默认情况下，浏览器将打开 <a class="link"   href="http://localhost:3000/" >http://localhost:3000<i class="fas fa-external-link-alt"></i></a> 网址。</p><p>恭喜你！您刚刚创建了第一个 Docusaurus 网站！浏览网站以查看可用内容吧。</p><h3 id="配置站点信息"><a href="#配置站点信息" class="headerlink" title="配置站点信息"></a>配置站点信息</h3><p>由于我只是想搭建个人知识库，因为已经搭建好了<a href="https://blog.felicx.eu.org/">个人博客</a>，所以修改了下 docusaurus.config.js 中的<code>presets</code>，删除了 blog 页面，只保留 Docs</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">presets</span>: [</span><br><span class="line">  [</span><br><span class="line">    <span class="string">&#x27;classic&#x27;</span>,</span><br><span class="line">    <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">import(&#x27;@docusaurus/preset-classic&#x27;).Options</span>&#125; */</span></span><br><span class="line">    (&#123;</span><br><span class="line">      <span class="attr">docs</span>: &#123;</span><br><span class="line">        <span class="attr">sidebarPath</span>: <span class="string">&#x27;./sidebars.js&#x27;</span>,</span><br><span class="line">        <span class="comment">// Please change this to your repo.</span></span><br><span class="line">        <span class="comment">// Remove this to remove the &quot;edit this page&quot; links.</span></span><br><span class="line">        <span class="attr">editUrl</span>:</span><br><span class="line">          <span class="string">&#x27;https://github.com/FelicxFoster/WikiPage/tree/master&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">theme</span>: &#123;</span><br><span class="line">        <span class="attr">customCss</span>: <span class="string">&#x27;./src/css/custom.css&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>找到 docusaurus.config.js 中的 <code>navbar</code>，注释掉 blog 那一行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">navbar</span>: &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;YOLOのWiki&#x27;</span>,</span><br><span class="line">  <span class="attr">logo</span>: &#123;</span><br><span class="line">    <span class="attr">alt</span>: <span class="string">&#x27;YOLOのWiki Logo&#x27;</span>,</span><br><span class="line">    <span class="attr">src</span>: <span class="string">&#x27;img/logo.svg&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">items</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;docSidebar&#x27;</span>,</span><br><span class="line">      <span class="attr">sidebarId</span>: <span class="string">&#x27;tutorialSidebar&#x27;</span>,</span><br><span class="line">      <span class="attr">position</span>: <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&#x27;Note&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// &#123;to: &#x27;/blog&#x27;, label: &#x27;Blog&#x27;, position: &#x27;left&#x27;&#125;,</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">href</span>: <span class="string">&#x27;https://github.com/FelicxFoster/&#x27;</span>,</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&#x27;GitHub&#x27;</span>,</span><br><span class="line">      <span class="attr">position</span>: <span class="string">&#x27;right&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="Docusaurus-部署"><a href="#Docusaurus-部署" class="headerlink" title="Docusaurus 部署"></a>Docusaurus 部署</h2><p>Vercel 有个好处，可以自动编译并部署，所以只需要把代码提交到 Github 仓库，并在 Vercel 里 import 该仓库就可以了。</p><p>由于每次部署 Vercel 编译需要时间太久，所以尽量在本地调试好再推送到 Vercel。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run build       <span class="comment"># 编译生成 build 文件</span></span><br><span class="line">npm run serve       <span class="comment"># 可视化编译的效果</span></span><br></pre></td></tr></table></figure><h2 id="Docusaurus-美化"><a href="#Docusaurus-美化" class="headerlink" title="Docusaurus 美化"></a>Docusaurus 美化</h2><h3 id="搜索插件"><a href="#搜索插件" class="headerlink" title="搜索插件"></a>搜索插件</h3><p>Docusaurus 默认是没有搜索功能的，这里使用 <a class="link"   href="https://github.com/easyops-cn/docusaurus-search-local" >docusaurus-search-local<i class="fas fa-external-link-alt"></i></a> 这款本地搜索插件来实现。</p><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @easyops-cn/docusaurus-search-local</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在 docusaurus.config.js 中的 config 内容中新增，与 themeConfig 同级</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">themes</span>: [</span><br><span class="line">  [</span><br><span class="line">    <span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&quot;@easyops-cn/docusaurus-search-local&quot;</span>),</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">hashed</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">language</span>: [<span class="string">&quot;en&quot;</span>, <span class="string">&quot;zh&quot;</span>],</span><br><span class="line">      <span class="attr">highlightSearchTermsOnTargetPage</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">explicitSearchResultPath</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>配置完后，可能会报错，显示 <code>Module not found: Error: Can&#39;t resolve &#39;@theme/SearchPage&#39;</code>，不用担心，根据 <a class="link"   href="https://github.com/easyops-cn/docusaurus-search-local/issues/252" >issue<i class="fas fa-external-link-alt"></i></a>，只需要重新 <code>npm start</code> 即可。</p><h3 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h3><p>Docusaurus 默认使用 prismjs 进行代码块的语法高亮，但是需要自己安装这个库，下面参考<a class="link"   href="https://docusaurus.io/zh-CN/docs/markdown-features/code-blocks#supported-languages" >Docusaurus 代码块<i class="fas fa-external-link-alt"></i></a>。</p><h4 id="库安装"><a href="#库安装" class="headerlink" title="库安装"></a>库安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i prismjs</span><br></pre></td></tr></table></figure><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>安装完后，使用 3 个反引号包裹文本块，就可以实现代码块高亮了，比如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`js console.log(&#x27;每个仓库都应该有个吉祥物。&#x27;); `</span><span class="string">``</span></span><br></pre></td></tr></table></figure><p>但是 prismjs 默认只有部分语言可以高亮，像 bash、poweshell 这些，需要在 docusaurus.config.js 中的 prism 内容中新增 additionalLanguages，如下所示，具体要添加的内容，可以在 <a class="link"   href="https://prismjs.com/#supported-languages" >Supported languages<i class="fas fa-external-link-alt"></i></a> 中查找。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">prism</span>: &#123;</span><br><span class="line">  <span class="attr">theme</span>: prismThemes.<span class="property">github</span>,</span><br><span class="line">  <span class="attr">darkTheme</span>: prismThemes.<span class="property">dracula</span>,</span><br><span class="line">  <span class="attr">additionalLanguages</span>: [<span class="string">&#x27;Bash&#x27;</span>],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>注意添加了 additionalLanguages，需要重新启动 Docusaurus 才能生效。</p><h3 id="emoji-使用"><a href="#emoji-使用" class="headerlink" title="emoji 使用"></a>emoji 使用</h3><p>想要在文档中添加 emoji，如📝，需要安装 remark-emoji 库。</p><h4 id="库安装-1"><a href="#库安装-1" class="headerlink" title="库安装"></a>库安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i remark-emoji</span><br></pre></td></tr></table></figure><h3 id="更改字体"><a href="#更改字体" class="headerlink" title="更改字体"></a>更改字体</h3><p>Docusaurus 默认字体有点不好看，本站使用<a class="link"   href="https://github.com/lxgw/LxgwWenKai" >霞鹜文楷<i class="fas fa-external-link-alt"></i></a>来替换。</p><h4 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h4><p>在 <a class="link"   href="https://github.com/lxgw/LxgwWenKai/releases" >releases<i class="fas fa-external-link-alt"></i></a> 下载想要的 ttf 字体（我选的是 LXGWWenKai-Bold.ttf ），放在 Docusaurus 项目的 static&#x2F;font 目录下。</p><p>修改 src&#x2F;css&#x2F;custom.css 添加字体 ，在最前面添加如下内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;LXGWWenKai Regular&#x27;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;/font/LXGWWenKai-Regular.ttf&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置 ifm-font-family-base:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">--ifm-font-family-base</span>: <span class="string">&quot;LXGWWenKai Regular&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存即可生效。</p><h4 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h4><p>上面这种方法每次都要在网页端加载 ttf 字体，会导致网页加载很慢。其实我们可以使用 CDN，网页加载时只需获取所使用的文字所在的分包，大幅降低所需加载的大小，从而提升网页加载速度。</p><p>参考 <a class="link"   href="https://github.com/chawyehsu/lxgw-wenkai-webfont" >lxgw-wenkai-webfont<i class="fas fa-external-link-alt"></i></a> 的使用文档，先安装字体</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save lxgw-wenkai-webfont</span><br></pre></td></tr></table></figure><p>然后将 CDN 地址添加到 docusaurus.config.js 的 stylesheets 属性（与 themes 配置同一级）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stylesheets</span>: [</span><br><span class="line">  <span class="comment">// String format.</span></span><br><span class="line">  <span class="string">&#x27;https://docusaurus.io/style.css&#x27;</span>,</span><br><span class="line">  <span class="comment">// Object format.</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">href</span>: <span class="string">&#x27;https://cdn.bootcdn.net/ajax/libs/lxgw-wenkai-webfont/1.7.0/style.min.css&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>最后像上面一样修改 src&#x2F;css&#x2F;custom.css 的 :root 属性（注意和上面的有点区别）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">--ifm-font-family-base</span>: <span class="string">&quot;LXGW WenKai&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用 Docusaurus 搭建个人 Wiki 并使用 Vercel 部署</summary>
    
    
    
    <category term="折腾系列" scheme="https://blog.felicx.eu.org/categories/%E6%8A%98%E8%85%BE%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="docusaurus" scheme="https://blog.felicx.eu.org/tags/docusaurus/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 博客美化</title>
    <link href="https://blog.felicx.eu.org/3164120416.html"/>
    <id>https://blog.felicx.eu.org/3164120416.html</id>
    <published>2024-01-13T14:02:07.000Z</published>
    <updated>2024-01-13T15:02:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo 默认的博客主题有点单调，挑来挑去选择了 <a class="link"   href="https://github.com/XPoet/hexo-theme-keep" >keep<i class="fas fa-external-link-alt"></i></a> 主题，下面是我的一些踩坑操作。</p><h2 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h2><p>我的博客使用的是 <a class="link"   href="https://waline.js.org/" >Waline<i class="fas fa-external-link-alt"></i></a> 这款简洁、安全的评论系统。要在博客中使用 Waline，分为三步</p><ul><li>通过 LeanCloud 配置 Waline 评论系统的数据库</li><li>通过 Vercel 部署 Waline 评论系统的服务端</li><li>在主题配置文件中配置 Waline 服务端地址</li></ul><h3 id="LeanCloud-设置"><a href="#LeanCloud-设置" class="headerlink" title="LeanCloud 设置"></a>LeanCloud 设置</h3><ol><li><p><a class="link"   href="https://console.leancloud.app/login" >登录<i class="fas fa-external-link-alt"></i></a> 或 <a class="link"   href="https://console.leancloud.app/register" >注册<i class="fas fa-external-link-alt"></i></a> <code>LeanCloud 国际版</code> 并进入 <a class="link"   href="https://console.leancloud.app/apps" >控制台<i class="fas fa-external-link-alt"></i></a></p></li><li><p>点击左上角 <a class="link"   href="https://console.leancloud.app/apps" >创建应用<i class="fas fa-external-link-alt"></i></a> 并起一个你喜欢的名字 (请选择免费的开发版):<br><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/42.6rypkwgmz3s0.webp"                        alt="创建应用"                 ></p></li><li><p>进入应用，选择左下角的 <code>设置</code> &gt; <code>应用 Key</code>。你可以看到你的 <code>APP ID</code>，<code>APP Key</code> 和 <code>Master Key</code>。请记录它们，以便后续使用。<br><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/43.6wqfjluvk8o0.webp"                        alt="ID 和 Key"                 ></p></li></ol><h3 id="Vercel-部署"><a href="#Vercel-部署" class="headerlink" title="Vercel 部署"></a>Vercel 部署</h3><ol><li><p>点击<a href="https://vercel.com/new/clone?repository-url=https://github.com/walinejs/waline/tree/main/example"><img                         lazyload                       alt="image"                       data-src="https://vercel.com/button"                        alt="Vercel"                 ></a>按钮，跳转至 Vercel 进行 Server 端部署。</p></li><li><p>输入一个你喜欢的 Vercel 项目名称并点击 <code>Create</code> 继续:</p></li></ol><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/44.2rmrjj4xgdw0.webp"                        alt="创建项目"                 ></p><ol start="3"><li>此时 Vercel 会基于 Waline 模板帮助你新建并初始化仓库，仓库名为你之前输入的项目名。</li></ol><p><img                         lazyload                       alt="image"                       data-src="https://waline.js.org/assets/vercel-3-a2_49HA9.png"                        alt="deploy"                 ></p><p>一两分钟后，满屏的烟花会庆祝你部署成功。此时点击 <code>Go to Dashboard</code> 可以跳转到应用的控制台。</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/45.30mm2ojqvvs0.webp"                        alt="deploy"                 ></p><ol start="4"><li>点击顶部的 <code>Settings</code> - <code>Environment Variables</code> 进入环境变量配置页，并配置填入三个环境变量 <code>LEAN_ID</code>, <code>LEAN_KEY</code> 和 <code>LEAN_MASTER_KEY</code> 。它们的值分别对应上一步在 LeanCloud 中获得的 <code>APP ID</code>, <code>APP KEY</code>, <code>Master Key</code>。</li></ol><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/46.5mohtdq2mz00.webp"                        alt="设置环境变量"                 ></p><ol start="5"><li>环境变量配置完成之后点击顶部的 <code>Deployments</code> 点击顶部最新的一次部署右侧的 <code>Redeploy</code> 按钮进行重新部署。该步骤是为了让刚才设置的环境变量生效。</li></ol><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/47.5rpypeua5zo0.webp"                        alt="redeploy"                 ></p><ol start="6"><li>此时会跳转到 <code>Overview</code> 界面开始部署，等待片刻后 <code>STATUS</code> 会变成 <code>Ready</code>。此时请点击 <code>Visit</code> ，即可跳转到部署好的网站地址，此地址即为你的服务端地址。</li></ol><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/48.2j16zqj2dao0.png"                        alt="redeploy success"                 ></p><h3 id="绑定域名-可选"><a href="#绑定域名-可选" class="headerlink" title="绑定域名 (可选)"></a>绑定域名 (可选)</h3><ol><li><p>点击顶部的 <code>Settings</code> - <code>Domains</code> 进入域名配置页</p></li><li><p>输入需要绑定的域名并点击 <code>Add</code></p></li></ol><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/49.poaqq0izajk.webp"                        alt="Add domain"                 ></p><ol start="3"><li>在域名服务器商处添加新的 <code>CNAME</code> 解析记录</li></ol><table><thead><tr><th>Type</th><th>Name</th><th>Value</th></tr></thead><tbody><tr><td>CNAME</td><td>example</td><td>cname.vercel-dns.com</td></tr></tbody></table><ol start="4"><li>等待生效，你可以通过自己的域名来访问了🎉</li></ol><ul><li>评论系统：example.yourdomain.com</li><li>评论管理：example.yourdomain.com&#x2F;ui</li></ul><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/50.jyb7yotec0w.webp"                        alt="success"                 ></p><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>keep 主题已经支持 Waline 了，所以只修改主题中的 _config.yml 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">waline:</span><br><span class="line">  server_url: https://example.yourdomain.com  <span class="comment"># 这里填上面设置的域名</span></span><br></pre></td></tr></table></figure><h2 id="设置文章加密访问"><a href="#设置文章加密访问" class="headerlink" title="设置文章加密访问"></a>设置文章加密访问</h2><p>有时想写一些私密博客，这里推荐一款适用于 Hexo 的静态博客加密插件 <a class="link"   href="https://github.com/D0n9X1n/hexo-blog-encrypt" >hexo-blog-encrypt<i class="fas fa-external-link-alt"></i></a>。</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> your-hexo</span><br><span class="line">npm install hexo-blog-encrypt</span><br></pre></td></tr></table></figure><h3 id="文章配置"><a href="#文章配置" class="headerlink" title="文章配置"></a>文章配置</h3><p>在想要加密的文章里添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">password: xxx</span><br><span class="line"><span class="comment"># 下面两个可选</span></span><br><span class="line">message: <span class="string">&#x27;Hey, password is required here.&#x27;</span></span><br><span class="line">wrong_pass_message: <span class="string">&#x27;Oh, this is an invalid password. Check and try again, please.&#x27;</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Hexo 博客使用 Keep 主题进行美化</summary>
    
    
    
    <category term="折腾系列" scheme="https://blog.felicx.eu.org/categories/%E6%8A%98%E8%85%BE%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="hexo" scheme="https://blog.felicx.eu.org/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 博客搭建</title>
    <link href="https://blog.felicx.eu.org/426584999.html"/>
    <id>https://blog.felicx.eu.org/426584999.html</id>
    <published>2024-01-07T02:07:50.000Z</published>
    <updated>2024-01-07T03:07:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前博客用的是 <a href="https://blog.felicx.eu.org/3594890502.html">Halo 2.0</a> 搭建，最近服务器到期了，在国内服务器需要备案，不想再续费了。对我而言，写博客重点是写，而不是一直折腾外观，所以没必要选择动态博客。搜索了很久，最终选择了 <em>Hexo+Github+Vercel</em> 的组合，既能满足我写博客的需求，又能省钱，两全其美。具体效果可以参考<a href="https://blog.felicx.eu.org/">我的博客</a>。</p><h2 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h2><p>因为 Hexo 是基于 Node.js 的，所以要使用 Hexo，那么第一步肯定是安装 Node.js。</p><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>进入<a class="link"   href="https://nodejs.cn/download/" >下载地址<i class="fas fa-external-link-alt"></i></a>下载</p><p>直接安装，完成后，在 cmd 上输入 <code>node -v</code> 和 <code>npm -v</code> 查看是否安装成功，这两条命令如果都输出了版本号，那么就表示安装成功了。</p><p>安装完之后，因为 Node.js 仓库会被墙掉，所以我们需要更换为国内镜像仓库，在终端中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="安装-Hexo-工具"><a href="#安装-Hexo-工具" class="headerlink" title="安装 Hexo 工具"></a>安装 Hexo 工具</h3><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>出现 Hexo 的相关信息则表示 Hexo 安装成功</p><h3 id="创建-Hexo-本地程序"><a href="#创建-Hexo-本地程序" class="headerlink" title="创建 Hexo 本地程序"></a>创建 Hexo 本地程序</h3><p>在电脑上创建一个目录 HexoBlog，cmd 命令进入该目录（不要用 Git Bash Here，不然你没法用 Ctrl+C 关闭）</p><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line"><span class="comment"># 下面是在执行上面的命令之后的结果</span></span><br><span class="line">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class="line">INFO  Install dependencies</span><br><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure><h3 id="启动-Hexo-本地服务"><a href="#启动-Hexo-本地服务" class="headerlink" title="启动 Hexo 本地服务"></a>启动 Hexo 本地服务</h3><p>安装完成 Hexo 程序直接执行 <code>hexo s</code> 或者 <code>hexo server</code> 命令就可以打开 Hexo 的本地服务。在命令行上会显示启动后的服务地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br><span class="line"><span class="comment"># 下面是在执行上面的命令之后的结果</span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>复制上文中的 <code>http://localhost:4000</code> 并在浏览器中打开，就可以看到你的网站在本地的部署</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/30.h5s2tffx1y8.webp"                        alt="Hexo界面"                 ></p><h2 id="GitHub-同步"><a href="#GitHub-同步" class="headerlink" title="GitHub 同步"></a>GitHub 同步</h2><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>前往 <a class="link"   href="https://github.com/" >GitHub<i class="fas fa-external-link-alt"></i></a> 新建一个仓库，而且得确保你的仓库是 <code>public</code>，同时，仓库名最好是 <code>用户名.github.io</code>（其实自定义也是可以的，是为了防止后面 vercel 被封了还可以迁移到 GithubPage）。</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/31.7atwy6z92kg0.webp"                        alt="Github仓库"                 ></p><h3 id="设置-Git"><a href="#设置-Git" class="headerlink" title="设置 Git"></a>设置 Git</h3><p>打开 <code>Git Bash</code> ，运行下面的命令 :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;&#123;&#123;你的电子邮箱地址&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>连续 3 次回车，最终会在用户目录下生成个包含公钥私钥等数据的目录 ( 一般是 <code>C:/Users/&#123;&#123;你的用户名&#125;&#125;/.ssh/</code> ) 。</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/32.7c9etvt6kyw0.webp"                        alt="ssh密钥配置"                 ></p><p>打开这个目录，找到 <code>id_rsa.pub</code> 文件，用记事本打开并复制里面的内容</p><p>粘贴到GitHub仓库的 <code>Key</code> 中，<code>Title</code> 填你喜欢的，点击保存 ( <code>Add SSH Key</code> )</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/33.6fosy52va3c0.webp"                        alt="在GitHub中输入密钥"                 ></p><p>运行下方命令 :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;&#123;&#123;你的 GitHub username&#125;&#125;&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;&#123;&#123;你的 GitHub 注册邮箱地址&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h3><p>打开 <code>Git Bash</code> ，运行下面的命令 :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com <span class="comment"># 此处邮箱地址不用改</span></span><br></pre></td></tr></table></figure><p>如果提示 <code>Are you sure you want to continue connecting (yes/no)?</code> 请输入 <code>yes</code> 并回车。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi &#123;&#123;你的 GitHub username&#125;&#125;! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>看到这个信息则说明配置成功。</p><h3 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h3><p>完成上面的步骤后，接下来就是推送网站到 Github Pages 了，然后我们就能被其他人访问了。</p><p>只需要在我们刚才的 HexoBlog 目录中的站点配置文件 <code>_config.yml</code> ，找到最后一行，修改它</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/34.9bdv7bg0nn4.webp"                        alt="deploy修改"                 ></p><p>在你新建的仓库这里，可以找到repo，复制它</p><p><img                         lazyload                       alt="image"                       data-src="https://yzfzzz.oss-cn-shenzhen.aliyuncs.com/image/202204021430661.png"                        alt="repo链接"                 ></p><p>cmd 进入 HexoBlog 目录中，依次执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>完成上述步骤之后，主要使用如下命令，就能将我们本地的内容推送到远程 GitHub 仓库了，然后在浏览器中访问：<code>https://用户名.github.io</code>。</p><h2 id="Vercel-部署"><a href="#Vercel-部署" class="headerlink" title="Vercel 部署"></a>Vercel 部署</h2><p>我们知道，GitHub 是国外网站，所以有时候访问会很慢，这时，我们可以尝试用 <a class="link"   href="https://vercel.com/" >vercel<i class="fas fa-external-link-alt"></i></a> 加速博客访问。</p><h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h3><p>进入<a class="link"   href="https://vercel.com/login" >登陆页面<i class="fas fa-external-link-alt"></i></a>，使用 GitHub 账号登陆即可（需要手机号码验证，直接填手机号收验证码即可，不会收集你的信息的）。</p><h3 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h3><p>选择 Create a New Project<br><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/36.352f4nluc9g0.webp"                        alt="Create a New Project"                 ></p><p>在关联的 github 账户中，找到刚才的博客仓库，选择 import<br><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/37.4bjkduoz5xo0.webp"                        alt="import repository"                 ></p><p>进入部署页面选择 deploy，注意 Framework Preset 要选择 Other 而不是 Hexo，其他的默认<br><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/38.d7aw375n5mg.webp"                        alt="deploy"                 ></p><p>生成之后点击 Continue to Dashboard<br><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/39.6ya5uhy8xl80.webp"                        alt="Dashboard"                 ></p><p>访问 Vercel 给你的域名（类似于<code>https://xxx.vercel.app/</code>），就能加速访问你的网站了</p><h3 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h3><p>然而，你用上面 vercel 自动分配的域名是无法访问你的网站的，因为 vercel 在国内已经被墙了。所以你需要在 vercel 中绑定自己的域名。</p><p>选择 Settings 中的 Domains 添加域名<br><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/40.3zt5lqrksd00.webp"                        alt="绑定域名"                 ></p><p>另外，需要在域名解析处（比如我是 Cloudfalre）填写相应的 CNAME 值。</p><table><thead><tr><th>Type</th><th>Name</th><th>Value</th></tr></thead><tbody><tr><td>CNAME</td><td>blog</td><td>cname.vercel-dns.com</td></tr></tbody></table><h2 id="博客使用"><a href="#博客使用" class="headerlink" title="博客使用"></a>博客使用</h2><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;name&quot;</span>       <span class="comment"># 新建文章</span></span><br><span class="line">hexo new page <span class="string">&quot;name&quot;</span>  <span class="comment"># 新建页面</span></span><br><span class="line">hexo g                <span class="comment"># 生成页面</span></span><br><span class="line">hexo d                <span class="comment"># 部署</span></span><br><span class="line">hexo g -d             <span class="comment"># 生成页面并部署</span></span><br><span class="line">hexo s                <span class="comment"># 本地预览</span></span><br><span class="line">hexo clean            <span class="comment"># 清除缓存和已生成的静态文件</span></span><br><span class="line">hexo <span class="built_in">help</span>             <span class="comment"># 帮助</span></span><br></pre></td></tr></table></figure><h3 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h3><p>你可以通过更换主题，并写上你的名字以便修改自己网站的信息并美化它</p><p>我用的是 <a class="link"   href="https://github.com/XPoet/hexo-theme-keep" >keep<i class="fas fa-external-link-alt"></i></a> 主题<br><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/41.1corvsdyk3c0.webp"                        alt="keep"                 ></p><p>他的<a class="link"   href="https://keep-docs.xpoet.cn/" >介绍文档<i class="fas fa-external-link-alt"></i></a>写得非常的详细，简直是保姆级教程，大家可以慢慢去探索。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a class="link"   href="https://zhuanlan.zhihu.com/p/661328908" >Hexo+Github+Netlify博客搭建教程<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
    <summary type="html">服务器到期了，把博客从 Halo 迁移到了 Hexo 上并用 vercel 部署，主打白嫖</summary>
    
    
    
    <category term="折腾系列" scheme="https://blog.felicx.eu.org/categories/%E6%8A%98%E8%85%BE%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="hexo" scheme="https://blog.felicx.eu.org/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>2023年度总结</title>
    <link href="https://blog.felicx.eu.org/3216805600.html"/>
    <id>https://blog.felicx.eu.org/3216805600.html</id>
    <published>2023-12-31T14:07:50.000Z</published>
    <updated>2023-12-31T15:07:10.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2d63796e61d4dd034435e8ad87d9990e36e2954a0d69cf92f560fd814530ae1b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="随笔" scheme="https://blog.felicx.eu.org/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="年度总结" scheme="https://blog.felicx.eu.org/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>美股投资原则</title>
    <link href="https://blog.felicx.eu.org/268856862.html"/>
    <id>https://blog.felicx.eu.org/268856862.html</id>
    <published>2023-12-30T13:41:57.000Z</published>
    <updated>2023-12-30T13:41:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h1><ul><li>永远谨记『高收益，高风险』。</li><li>市值低于100 亿美元的股票，不要碰。</li><li>刚上市的股票谨慎购买。</li><li>中概股和港股谨慎购买。</li><li>抵住诱惑更加专注，不要妄想抓住所有机会。控制好持股个数，美股不应该超过 10 个，港股不应该超过 2 个。</li><li>购买股票应该像买大件家电一样，操作不要太频繁，购买也不要太过随意，购买之前一定是做足了功课。</li><li>谨慎抄底大跌的股票，先搞清楚为什么大跌？好的股票很多，没必要冒这个风险。</li></ul><h1 id="卖股票原则"><a href="#卖股票原则" class="headerlink" title="卖股票原则"></a>卖股票原则</h1><ul><li>[短期投资] 对于投机类股票，可以不设置止盈点，但是必须设置止损点（铁律）。止损点设置在 8%～15%。</li><li>[长期投资] 股票卖出与价格无关，卖出原因：<ul><li>因为买入逻辑没有了。</li><li>需要资金买入更好的股票。</li><li>股票涨得太快，卖出为了降低风险，分散化投资。</li></ul></li></ul><h1 id="抄底原则"><a href="#抄底原则" class="headerlink" title="抄底原则"></a>抄底原则</h1><ul><li>考虑是否卖股票，参考卖股票原则。</li><li>当股票下跌时犹豫是否加仓，优先考虑的是「风险是否能承受」而不是分摊成本或者赌反弹。</li></ul>]]></content>
    
    
    <summary type="html">美股投资，只能挣到能力范围内的钱</summary>
    
    
    
    <category term="投资" scheme="https://blog.felicx.eu.org/categories/%E6%8A%95%E8%B5%84/"/>
    
    
    <category term="股票" scheme="https://blog.felicx.eu.org/tags/%E8%82%A1%E7%A5%A8/"/>
    
  </entry>
  
  <entry>
    <title>有效的时间管理</title>
    <link href="https://blog.felicx.eu.org/1344029253.html"/>
    <id>https://blog.felicx.eu.org/1344029253.html</id>
    <published>2023-12-10T08:21:23.000Z</published>
    <updated>2023-12-10T08:36:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是《<a class="link"   href="https://36kr.com/p/2550740545525892" >比时间管理更重要的，是注意力管理<i class="fas fa-external-link-alt"></i></a>》的读书笔记。</p><blockquote><p>你如何过一天，便如何过一生。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每天都很忙，却好像什么都没做到；很努力地付出，最后就是没有拿得出手的工作成果；都快年底了，年初的读书计划一半都没完成。</p><p>你可能需要的是真正的时间管理，准确来说，是注意力管理。</p><h2 id="重要紧急四象限是最没用的理论"><a href="#重要紧急四象限是最没用的理论" class="headerlink" title="重要紧急四象限是最没用的理论"></a>重要紧急四象限是最没用的理论</h2><p>几乎每个知道重要紧急四象限的人，都做不好时间管理，因为从实际的落地上，几乎没有可操作性。</p><p><img                         lazyload                       alt="image"                       data-src="https://cdn.jsdelivr.net/gh/FelicxFoster/PicXImage@master/blog_reading_notes/1.2pnvcrff6yi0.webp"                                        ></p><h2 id="通过时间账户看清时间分布"><a href="#通过时间账户看清时间分布" class="headerlink" title="通过时间账户看清时间分布"></a>通过时间账户看清时间分布</h2><p>时间可以分为九个账户，分别是精力恢复、收拾自己、通勤、工作、学习成长、锻炼、情感、社交、消遣娱乐。</p><p>明确时间账户后，可以细化我们对生活中时间的理解与复盘，进而调整不同账户的时间投入，调整自己的身心状态。</p><table class="tg"><thead>  <tr>    <th class="tg-g7sd">时间账户</th>    <th class="tg-g7sd">      属性</th>    <th class="tg-cly1">投入</th>  </tr></thead><tbody>  <tr>    <td class="tg-lboi">      精力恢复</td>    <td class="tg-cly1" rowspan="3">      必要时间</td>    <td class="tg-cly1" rowspan="3">9.5小时</td>  </tr>  <tr>    <td class="tg-lboi">      收拾自己</td>  </tr>  <tr>    <td class="tg-lboi">      通勤</td>  </tr>  <tr>    <td class="tg-lboi">      工作</td>    <td class="tg-cly1">      工作时间</td>    <td class="tg-cly1">9.5小时</td>  </tr>  <tr>    <td class="tg-lboi">      学习成长</td>    <td class="tg-cly1" rowspan="5">      自我时间</td>    <td class="tg-cly1" rowspan="5">5小时</td>  </tr>  <tr>    <td class="tg-0pky">      锻炼</td>  </tr>  <tr>    <td class="tg-0pky">      情感</td>  </tr>  <tr>    <td class="tg-0pky">      社交</td>  </tr>  <tr>    <td class="tg-0pky">      消遣娱乐</td>  </tr></tbody></table><h2 id="时间管理需要养成习惯"><a href="#时间管理需要养成习惯" class="headerlink" title="时间管理需要养成习惯"></a>时间管理需要养成习惯</h2><table><thead><tr><th>习惯</th><th>说明</th></tr></thead><tbody><tr><td>养成记工作日志的习惯</td><td>坚持记工作日志是不可缺少的职业习惯，把当天的工作收获、经验教训用文字的形式记录下来</td></tr><tr><td>不在工作时间内干私事</td><td>提高工作效率。今天你缺乏上进心、得过且过、安于现状，明天就有可能被淘汰。</td></tr><tr><td>挤出一切可以利用的时间</td><td>挤出可以利用的时间，效率最大化。</td></tr><tr><td>今日事，今日毕</td><td>杜绝工作生活中拖延的习惯。</td></tr><tr><td>避开一切排队</td><td>比如上班路程上的时间损耗，中午吃饭的时间损耗，错峰行动是在不增加经济负担情况下的更佳策略。</td></tr><tr><td>巧妙投资健康</td><td>包括饮食、运动投入、情绪稳定、工作压力管理、家人健康身心守护等内容。健康越稳定，做事情的质量就更高。</td></tr><tr><td>降低无效社交</td><td>尝试避开充满炫耀和攀比，只为了吃喝的聚会，更要慎重对待突然冒出来的邀约。</td></tr><tr><td>控制娱乐消遣</td><td>✅尽量减少在娱乐应用上花费时间和精力。<br />✅设计合理的使用时间断点。坐车吃饭的时候可以刷B站，但是周末或睡觉前刷短视频，肯定会越刷越兴奋，这个时候是没有打断点的。<br />✅设计堕落约束规则。如果想刷剧了，就去跑步机上跑步；如果想干点堕落的事，就给自己肉体增加点运动量或者惩罚。</td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="别再做无法执行的日程表"><a href="#别再做无法执行的日程表" class="headerlink" title="别再做无法执行的日程表"></a>别再做无法执行的日程表</h2><p>这类日程无法对抗意外，需要各个时间点都踩准节奏。如果有中断或者延误或者突发状况，则剩余的日程安排基本就会失效，最后的结果就是无法执行日程。</p><p><img                         lazyload                       alt="image"                       data-src="https://cdn.jsdelivr.net/gh/FelicxFoster/PicXImage@master/blog_reading_notes/2.533an6kmiw80.webp"                                        ></p><p>我们应该通过任务流去管理自己的日程。</p><p><img                         lazyload                       alt="image"                       data-src="https://cdn.jsdelivr.net/gh/FelicxFoster/PicXImage@master/blog_reading_notes/3.5tbuzo6ndb40.webp"                                        ></p><p>1、流水日记区</p><ul><li>流水事件关键词： 记录各时间段发生的事，尽量精练，不超过15个字。</li><li>过程-感受-反思： 记录各时间段的想法和感受，也可作为流水事件的补充。</li></ul><p>主要负责收集与整理。通过流水日记区观察到自己在那段时间里的可支配时间被分配在哪些事情上。 哪些事情是主动做的，哪些事情是问题发生后，被动拿出可支配时间容错的。</p><p> 在日记区并不仅仅是记录这个时候在做什么，更重要的是旁边一栏的“过程、感受、反思”。</p><p>2、思考复盘区</p><ul><li>二次复盘反思： 往往是今天受了某事情的触动，是今天值得反复思考的部分。</li><li>三次复盘反思： 往往是二次复盘反思的延伸思考，亦或者是对这段时间的反思。</li></ul><p>三次复盘是过一段时间的复盘，比如一周再复盘，加入了时间的变量，我们能更理智地看待一些当时被情绪裹挟的事。</p><p>3、待办任务区</p><ul><li>DDL (Deadline)： 几时交付。</li><li>相关人： 可以是自己，也可以是其他人。</li><li>核心诉求： 相关人想要什么结果。</li><li>待办任务： 服务于核心诉求的行动关键词。</li></ul><p>这里写上去的每一个任务都是自己给自己加的，并且是根据当天实际发生的事情推演出来的。</p><p>核心述求需要记录的是，相关人想要什么，尝试着推演与洞察， 一定要养成推演（或者问，或者猜）出对方核心述求的习惯 。</p>]]></content>
    
    
    <summary type="html">如果你希望在每天有限的24小时内，摆脱忙碌无果的无力感，更好地把握未来，最好的方法就是开始时间管理。</summary>
    
    
    
    <category term="读书笔记" scheme="https://blog.felicx.eu.org/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="时间管理" scheme="https://blog.felicx.eu.org/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>终身免费 ORG 顶级域名申请</title>
    <link href="https://blog.felicx.eu.org/2502663362.html"/>
    <id>https://blog.felicx.eu.org/2502663362.html</id>
    <published>2023-11-19T12:24:23.000Z</published>
    <updated>2023-11-19T12:55:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有时我们在云上搭建一个网站，需要有对应的域名，那怎么办呢，有人说去买一个啊！确实可以去买一个域名，但咱主打的是一个省钱，有永久免费的域名为什么不薅呢。</p><p>说到免费的顶级域名，可能很多人会想到 Freenom 家的 .tk 域名吧，他家太难注册就不推荐了，今天给大家推荐另外一个 .EU.ORG 的免费域名（虽然他们的【<a class="link"   href="https://nic.eu.org/" >官方网站<i class="fas fa-external-link-alt"></i></a>】界面很Low，但是不要怀疑，就是真的官方网站）。</p><p>EU.ORG 是欧盟组织下面的域名（EU 代表欧盟），是 1996 年 9 月 10 日由 Paul Mockapetris 创建的域名，目前个人和组织都是可以免费注册的。虽然 .EU.ORG 看起来本身像个二级域名，但是已被大部分 DNS 服务商（包括谷歌、Cloudflare等）认定为顶级域名，所以我们就放心大胆的使用就好了。</p><h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p>1、在浏览器打开 EU.ORG <a class="link"   href="https://nic.eu.org/" >官网<i class="fas fa-external-link-alt"></i></a>；</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/13.2dvhofxntq68.webp"                        alt="01"                 ></p><p>2、由于这个网站服务器是在欧盟（法国），注册账号的个人信息就填写英国那边的，这样容易审核通过。那英国个人信息怎么获取呢，用这个<a class="link"   href="https://www.meiguodizhi.com/uk-address" >随机地址生成器<i class="fas fa-external-link-alt"></i></a>来获取，点一下“随机地址”，需要记录一下全名、街道、城市、电话这四项内容；</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/14.1twwfervt94w.webp"                        alt="02"                 ></p><p>3、注册账号填写好，前面填写的邮箱会收到一条激活邮件，把邮件里的链接复制在当前浏览器打开激活即可，同时记住下面这个临时名称，后面要用。</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/23.6wxbo77r1gw0.webp"                        alt="03"                 ></p><p>4、点“Validate”验证通过；</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/24.37ylfabdx5y0.webp"                        alt="04"                 ></p><h2 id="注册域名"><a href="#注册域名" class="headerlink" title="注册域名"></a>注册域名</h2><p>1、激活后，登录账号进行注册域名；</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/15.5gleuimo1a40.webp"                                        ></p><p>2、输入上面获取到的临时名称和之前设置的密码，然后点“Login”；</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/16.3ych6oi3aae0.webp"                                        ></p><p>3、点“New Domain”，开始注册正式的域名；</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/17.4ue2xth1td00.webp"                                        ></p><p>4、注册域名过程中，需要注意的是：填写的域名要完整、填写域名服务器选择第第一个即可。域名解析提供商可以是阿里云和腾讯云；我这边填写的是 Cloudflare 的 NS，可以直接填写上：<code>sid.ns.cloudflare.com</code>，<code>grannbo.ns.cloudflare.com</code>；</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/18.6l5fpy8kmvw0.webp"                                        ></p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/19.5tr0vhkvm0g0.webp"                                        ></p><p>5、完成到这里就基本完成了，接下来需要等等网站工作人员的人工审核，快的话1小时左右，慢的话可能要等到第3天（比如遇到非工作日），所以需要耐心等就是了；</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/20.58h2mcxa32o0.webp"                                        ></p><p>6、注册成功后，你的邮箱会再次收到注册成功的邮件，里面写有.EU.ORG就是你的域名了。</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/21.4qh2x8ahz2w0.webp"                                        ></p><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>待 EU.ORG 登入页面出現你注册的域名后</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/22.5nhji2t8fbk0.webp"                                        ></p><p>就可以使用 <a href="https://blog.felicx.eu.org/1263441363.html">Cloudflare 进行域名解析</a>了。</p>]]></content>
    
    
    <summary type="html">申请免费的顶级域名 eu.org</summary>
    
    
    
    <category term="折腾系列" scheme="https://blog.felicx.eu.org/categories/%E6%8A%98%E8%85%BE%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="建站" scheme="https://blog.felicx.eu.org/tags/%E5%BB%BA%E7%AB%99/"/>
    
    <category term="域名" scheme="https://blog.felicx.eu.org/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>Cloudflare 解析 ORG 域名</title>
    <link href="https://blog.felicx.eu.org/1263441363.html"/>
    <id>https://blog.felicx.eu.org/1263441363.html</id>
    <published>2023-11-18T13:29:43.000Z</published>
    <updated>2023-11-18T13:55:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们有了自己的域名，那么怎么让域名与我们的 ip 产生联系呢。 这个时候我们就可以使用 CDN 服务商来进行 DNS 解析。</p><p>但是，我之前申请的是 .org 这种顶级域名，这类域名在国内没有获得国家工信部备案审批，不能在国内备案。对这类不能在国内备案的域名，是不能用阿里云腾讯云这些国内注册服务商进行 DNS 解析的。</p><p>怎么搞，这时就得用上  <a class="link"   href="https://dash.cloudflare.com/" >Cloudflare<i class="fas fa-external-link-alt"></i></a> 这样的 CDN 服务商来进行 DNS 解析了。</p><h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p>进入官网，右上角默认的是 English(US)，可以点击 English(US) 切换到简体中文，然后注册一个账号。</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/1.4hzn2sewhv0.webp"                        alt="img"                 ></p><h2 id="添加站点"><a href="#添加站点" class="headerlink" title="添加站点"></a>添加站点</h2><p>登录到 Cloudflare 账户后，我们需要添加一个站点，也就是你申请到的域名。</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/2.62ws3760c540.webp"                        alt="img"                 ></p><h2 id="选择域名解析方案"><a href="#选择域名解析方案" class="headerlink" title="选择域名解析方案"></a>选择域名解析方案</h2><p>进入选择套餐界面，选择免费的解析套餐，点 Continue；</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/3.39oj1keldri0.webp"                        alt="img"                 ></p><h2 id="更改名服务器"><a href="#更改名服务器" class="headerlink" title="更改名服务器"></a>更改名服务器</h2><p>Cloudflare 会为你提供两个新的域名服务器（Name Server）地址。</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/4.77ffc3nuxqw0.webp"                        alt="img"                 ></p><p>你需要在你的域名注册商处更新你的域名服务器设置，将现有的域名服务器替换为 Cloudflare 提供的地址。这一步使得你的域名流量经过 Cloudflare 的网络。</p><p>比如我是 <a class="link"   href="https://nic.eu.org/arf/en/login/" >en.org<i class="fas fa-external-link-alt"></i></a> 的。登陆 eu.org 后台，找到Nameservers</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/5.31dlbky5ft40.webp"                        alt="img"                 ></p><p>将上面申请的两组 Nameservers 填入 Name1 和 Name2</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/6.1c7xqj0qdz6o.webp"                        alt="img"                 ></p><p>确认提交，等待 NS 记录生效后，Cloudflare会进行验证。这可能需要一些时间，一般是 24 小时之内会有 Cloudflare 的邮件通知。我们可以先回到Cloudflare界面，点击完成。</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/7.51fbx2c6nq00.webp"                        alt="img"                 ></p><h2 id="安全性设置（可选）"><a href="#安全性设置（可选）" class="headerlink" title="安全性设置（可选）"></a>安全性设置（可选）</h2><h3 id="设置-SSL-安全为-strict"><a href="#设置-SSL-安全为-strict" class="headerlink" title="设置 SSL 安全为 strict"></a>设置 SSL 安全为 strict</h3><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/8.2pzajf7x24k0.webp"                        alt="img"                 ></p><h3 id="设置自动-https-重写"><a href="#设置自动-https-重写" class="headerlink" title="设置自动 https 重写"></a>设置自动 https 重写</h3><p>在<code>SSL/TLS-&gt;边缘证书</code>中开启“始终使用 HTTPS”。注意，这里的“始终使用 HTTPS”选项不能和 nginx 端同时开启，两端只能开启一个，否则会出错。</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/9.5d4d2n5k8i00.webp"                        alt="img"                 ></p><h3 id="打开速度优化"><a href="#打开速度优化" class="headerlink" title="打开速度优化"></a>打开速度优化</h3><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/10.3u2h9no7vtq0.webp"                        alt="img"                 ></p><h2 id="设置-DNS-记录"><a href="#设置-DNS-记录" class="headerlink" title="设置 DNS 记录"></a>设置 DNS 记录</h2><p>完成上面的步骤后，点击 DNS ，进行主域名的 ip 解析。通过 A 记录解析我们的 ip 地址。设置好解析记录后，等待 5 分钟，就可以 ping 通这个域名了。</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/11.74etizm5kgk0.webp"                        alt="img"                 ></p><p>记得把代理状态设置为仅限 DNS，即不开启小云朵。</p><p>小云朵开启表示：完全代理，让 Cloudflare 完全代理网站，这样可以避免用户检测到真实的服务器 ip，每次检测都是 Cloudflare 公司的节点 ip；小云朵关闭（灰色）就表示：不使用 Cloudflare 的节点代理，相当于直连到你的服务器。</p><p>特别是如果你使用了 Nginx Proxy Manager 进行域名反代，就不能开启小云朵。</p>]]></content>
    
    
    <summary type="html">eu.org 这种顶级域名无法用国内云服务器解析，这里介绍使用 Cloudflare 解析此类域名</summary>
    
    
    
    <category term="折腾系列" scheme="https://blog.felicx.eu.org/categories/%E6%8A%98%E8%85%BE%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="建站" scheme="https://blog.felicx.eu.org/tags/%E5%BB%BA%E7%AB%99/"/>
    
    <category term="域名" scheme="https://blog.felicx.eu.org/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>获取网页 logo 图标</title>
    <link href="https://blog.felicx.eu.org/430851967.html"/>
    <id>https://blog.felicx.eu.org/430851967.html</id>
    <published>2023-11-18T06:19:20.000Z</published>
    <updated>2023-11-18T06:37:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在做自己的网址导航，需要提取和显示网址的 favicon 图标，使导航链接除了文字名称，前面还有更明显的 logo 标志，使选择和查看都更加便捷。</p><p>网页 logo 图标一般是指 favicon 图标，作为缩略的网站标志，一般显示于浏览器的地址栏或者在标签上。</p><p>如下图红圈的位置， 即是 favicon 图标。</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_tool_script/26312444-47fe04132dce433d.3rsr5waqo1u0.webp"                        alt="网易云logo"                 ></p><p>favicon 的格式不一定是 ico 格式，它可以是 png，jpg 甚至是 gif，不过 ico 格式是所有浏览器都支持的。</p><h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><p>那么怎么获取网页 logo 图标的 URL 链接呢？有三种方法。</p><h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><p>最常用的方法（适用于 90% 的站点）是，直接在访问网址首页链接后加上 <code>/favicon.ico</code>，例如：<a class="link"   href="https://www.baidu.com/favicon.ico" >https://www.baidu.com/favicon.ico<i class="fas fa-external-link-alt"></i></a></p><h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><p>第二种获取方法，需要在浏览器界面按 F12 键，进入开发者模式（建议使用 google 内核浏览器）。在默认的 Elements 中点开<code>&lt;head&gt;...&lt;/head&gt;</code>。<br><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_tool_script/26312444-d4a86f8829df7433.1fyjcib8xncw.webp"                        alt="F12开发者模式"                 ></p><p>找到 &lt;link 中含有 favicon 或 ico 的链接，右键点选 Edit attribute（即编辑属性）以复制该链接，粘贴到空白页面后回车后即显示该网站的 logo 图标。<br><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_tool_script/26312444-bc648e387b0e5296.dgk3b0ggwew.webp"                        alt="找到标识"                 ><br><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_tool_script/26312444-d781c6e623370910.1zfi3gtpon6o.webp"                        alt="复制链接"                 ></p><p>说明：有的链接前缀格式是<code>//</code>开头的，建议使用作为 URL 链接时前面加上<code>https:</code>，</p><h3 id="法三"><a href="#法三" class="headerlink" title="法三"></a>法三</h3><p>第三种方法，使用第三方的网页图标在线抓取网站，比如<a class="link"   href="https://gonglue.qinggl.com/app/img/icon.jsp" >这个<i class="fas fa-external-link-alt"></i></a>。</p><p>以上，你学会了吗？</p>]]></content>
    
    
    <summary type="html">提取和显示网址的 favicon 图标</summary>
    
    
    
    <category term="工具脚本" scheme="https://blog.felicx.eu.org/categories/%E5%B7%A5%E5%85%B7%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="logo" scheme="https://blog.felicx.eu.org/tags/logo/"/>
    
  </entry>
  
  <entry>
    <title>禁用 Windows Defender Antivirus Service</title>
    <link href="https://blog.felicx.eu.org/969299867.html"/>
    <id>https://blog.felicx.eu.org/969299867.html</id>
    <published>2023-11-17T11:10:45.000Z</published>
    <updated>2023-11-17T11:56:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>禁用 Windows Defender Antivirus Service可能会降低计算机的安全性，因为它是 Windows操作系统的内置防病毒和恶意软件保护工具。但没办法，我的老电脑内存顶不住了，只能忍痛禁掉。</p><h2 id="关闭注册表"><a href="#关闭注册表" class="headerlink" title="关闭注册表"></a>关闭注册表</h2><ul><li>使用注册表编辑器。win+R，打开”运行”对话框，输入<code>regedit.exe</code>打开注册表；</li><li>浏览路径<code>HKEY_LOCAL_MACHINE/SOFTWARE/Policies/Microsoft/Windows Defender</code>；</li><li>右键单击<code>Windows Defender</code>文件夹键，选择<code>新建</code>→<code>DWORD（32位）值</code>。将新建的键命名为<code>DisableAntiSpyware</code>，并双击该键将值设置为 1 。</li></ul><h2 id="关闭组策略"><a href="#关闭组策略" class="headerlink" title="关闭组策略"></a>关闭组策略</h2><ul><li>win+R，输入<code>gpedit.msc</code>，打开组策略编辑器。然后浏览路径<code>计算机配置/管理模板/Windows组件/Windows Defender防病毒程序</code>；</li><li>双击<code>关闭Windows Defender防病毒程序</code>选项，选择<code>已启用</code>选项以禁用Windows Defender Antivirus。最后单击<code>应用</code>按钮和<code>确定</code>按钮，并重启电脑。</li></ul><p>电脑重启后 Windows Defender Antivirus Service 就不会有启动且占用内存的情况了。</p>]]></content>
    
    
    <summary type="html">两步禁用 Windows Defender Antivirus Service，没办法，老电脑内存实在顶不住。</summary>
    
    
    
    <category term="开发运维" scheme="https://blog.felicx.eu.org/categories/%E5%BC%80%E5%8F%91%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="windows" scheme="https://blog.felicx.eu.org/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>Nginx Proxy Manager 实现公网访问家庭 NAS</title>
    <link href="https://blog.felicx.eu.org/2431342973.html"/>
    <id>https://blog.felicx.eu.org/2431342973.html</id>
    <published>2023-11-17T09:15:18.000Z</published>
    <updated>2023-11-17T09:47:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有些小伙伴建站没有用云服务器，而是移到了自己的 NAS 上。但是运营商是封堵我们的 80，443端口的，那如何实现公网 IP 无 443 和 80 端口外网访问呢？</p><p>我们可以用 Nginx Proxy Manager 里自带一个端口转发功能，绕过封堵的 80，443端口，实现从公网对家里服务器的访问，在此记录一下。</p><h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><p>在 Nginx Proxy Manager 面板里点击<code>Dashboard-Streams-Add Streams</code>，分别填入以下信息：</p><p><code>Incoming Port</code>：入站端口，填一个你要用来代替 80&#x2F;443 的端口<br><code>Forward Host</code>：转发主机，填本机 ip：127.0.0.1<br><code>Forward Port</code>：转发端口，填被封堵的端口，80 或者 443</p><p>然后点保存。设置以后，从外网访问你部署在家庭服务器上的网站需要在域名后加上你设置的入站端口。</p><p>比如原来你访问在地址栏输入的 url 是<code>https://www.domain.cn</code>，443 端口被封了访问不了了，按上图设置之后，在浏览器地址栏输入<code>https://www.domain.cn:9443</code>就能访问了。</p><p>同理，如果你没有上 https，要绕过被封堵的 http 的默认端口 80，就把转发端口设置为 80 即可。然后访问的时候在域名后加上你设置的入站端口即可绕过运营商对 80 端口的封堵访问。</p>]]></content>
    
    
    <summary type="html">用 Nginx Proxy Manager 端口转发功能，实现从公网对家里服务器的访问</summary>
    
    
    
    <category term="折腾系列" scheme="https://blog.felicx.eu.org/categories/%E6%8A%98%E8%85%BE%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="建站" scheme="https://blog.felicx.eu.org/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>Nginx Proxy Manager 上部署静态网站</title>
    <link href="https://blog.felicx.eu.org/2175112272.html"/>
    <id>https://blog.felicx.eu.org/2175112272.html</id>
    <published>2023-11-17T08:13:57.000Z</published>
    <updated>2023-11-17T08:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，对于一些 Docker 搭建的 Web 项目，NPM 能够很轻松地给他们做反向代理。</p><p>然而对于一些静态网站，小伙伴们可能不知道怎么用 NPM 来展示，这篇文章就来简单和大家分享一下，如何用 NPM 来托管一些简单的 HTML 单页。</p><h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><p>因为我们已经有 NPM 在运行，监听了 443 端口和 80 端口，避免为了一个静态网站而建立另一个 Web 服务器。</p><p>托管一些简单的 HTML 单页是一个简单的、低流量的需求，使用 NPM 已经运行的内置 nginx 就可以了。</p><h3 id="放置静态网页"><a href="#放置静态网页" class="headerlink" title="放置静态网页"></a>放置静态网页</h3><p>找到你用 docker compose 构建的 NPM 目录，比如我的是<code>~/data/docker_data/nginxproxymanager/</code>，进入里面的 data 文件夹，建立一个空文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/data/docker_data/nginxproxymanager/data/</span><br><span class="line"><span class="built_in">mkdir</span> web_html</span><br></pre></td></tr></table></figure><p>然后将网页文件 index.html 放置在该文件夹下（注意只支持 index.html，php 不支持）</p><h3 id="NPM-配置"><a href="#NPM-配置" class="headerlink" title="NPM 配置"></a>NPM 配置</h3><p>登陆 NPM，在网页里新建一个 Proxy Host</p><p>Details 填入</p><ul><li><code>Domain Names</code>：域名</li><li><code>Scheme</code>：http</li><li><code>Forward Hostname / IP</code>：docker 容器 ip</li><li><code>Forward Port</code>：这个随便填，最后都是走服务器80口出</li></ul><p>SSL 填入</p><ul><li><code>SSL Certificate</code>：SSL 证书</li><li><code>Force SSL</code>：勾选</li></ul><p>Advanced 填入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line">  <span class="string">root</span> <span class="string">/data;</span> <span class="comment"># index.html 所在目录</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存，然后就可以通过域名访问你的静态网页了。</p>]]></content>
    
    
    <summary type="html">记录通过NPM搭建静态网页</summary>
    
    
    
    <category term="折腾系列" scheme="https://blog.felicx.eu.org/categories/%E6%8A%98%E8%85%BE%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="建站" scheme="https://blog.felicx.eu.org/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>Nginx Proxy Manager 在线申请 SSL 证书</title>
    <link href="https://blog.felicx.eu.org/376257426.html"/>
    <id>https://blog.felicx.eu.org/376257426.html</id>
    <published>2023-11-16T13:17:29.000Z</published>
    <updated>2023-11-16T13:45:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们知道，Nginx Proxy Manager 反代域名使用 HTTPS，需要 SSL 证书，我们可以用 NPM 的一键申请证书，但这样每个域名都需要单独申请，太麻烦了。这里介绍一种申请泛域名的 SSL 证书，一级域名、二级域名都共用一个证书，省时省事。</p><h2 id="验证方式"><a href="#验证方式" class="headerlink" title="验证方式"></a>验证方式</h2><p>NPM 中 <code>Let’s Encrypt</code> 证书申请有两种验证方式：一种是基于 <code>HTTP</code> 的验证方式，另一种是基于 <code>DNS</code> 的验证方式。</p><h3 id="HTTP-01-验证"><a href="#HTTP-01-验证" class="headerlink" title="HTTP-01 验证"></a>HTTP-01 验证</h3><p>关于 HTTP-01 验证的详细描述可以看<a class="link"   href="https://letsencrypt.org/zh-cn/docs/challenge-types/#http-01-%E9%AA%8C%E8%AF%81" >官方文档<i class="fas fa-external-link-alt"></i></a>。</p><p>这种方式最简单，不需要任何关于域名配置的额外知识，但是必须使用 80 端口，绝大部分人可能用不了，所以这里就不说了。</p><h3 id="DNS-01-验证"><a href="#DNS-01-验证" class="headerlink" title="DNS-01 验证"></a>DNS-01 验证</h3><p>关于 DNS-01 验证的详细描述可以看<a class="link"   href="https://letsencrypt.org/zh-cn/docs/challenge-types/#dns-01-%E9%AA%8C%E8%AF%81" >官方文档<i class="fas fa-external-link-alt"></i></a>。</p><p>此验证方式要求您在该域名下的 TXT 记录中放置特定值来证明您控制域名的 DNS 系统，这需要您的 DNS 提供商提供 API。</p><h2 id="申请-SSL-证书"><a href="#申请-SSL-证书" class="headerlink" title="申请 SSL 证书"></a>申请 SSL 证书</h2><p>进入 NPM，点击<code>SSL Certificates - Add SSL Certificate - Let&#39;s Encrypt</code>，输入以下配置：</p><p><code>Domain Names</code>：输入一级域名和泛域名，example.com 和 *.example.com<br><code>Email Address for Let&#39;s Encrypt</code>：选择 Cloudflare 登录邮箱；</p><p>点击 Use a DNS Challenge 使用 DNS 申请，DNS Provider 选择 Cloudflare，下一步就是申请 Cloudflare API Token，可以先往下看。</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/25.hwk8hzseni0.webp"                                        ></p><p>点击“I Agree to the Let’s Encrypt Terms of Service”，然后点击“Save”，就会自动申请 SSL 证书了。</p><h2 id="申请-Cloudflare-API-Token"><a href="#申请-Cloudflare-API-Token" class="headerlink" title="申请 Cloudflare API Token"></a>申请 Cloudflare API Token</h2><p>打开 Cloudflare 官网并登录账号，在页面右上角的个人头像下拉菜单中点击“我的个人资料”。切换到“API 令牌”，点击“创建令牌”；</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/27.5p0ojbaya300.webp"                                        ></p><p>在 “API 令牌模板”中选择“编辑区域 DNS”后面的“使用模板”；</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/26.lzgxnddyz4w.webp"                        alt="img"                 ></p><p>进入模板之后选择需要控制的域名之后下一步并创建令牌；</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/28.1cn02rcducv4.webp"                                        ></p><p>此时已经添加了令牌权限并生成了令牌，把生成结果填入 NPM 的<code>dns_cloudflare_api_token</code>即可。</p><p><img                         lazyload                       alt="image"                       data-src="https://felicxfoster.github.io/picx-images-hosting/blog_toss_series/29.2cdmq4mufuvw.webp"                                        ></p><p>最后一行可以看到 SSL 证书已经申请完成，有效期3个月，到期会自动续期。</p>]]></content>
    
    
    <summary type="html">NMP 申请泛域名的 SSL 证书</summary>
    
    
    
    <category term="折腾系列" scheme="https://blog.felicx.eu.org/categories/%E6%8A%98%E8%85%BE%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="建站" scheme="https://blog.felicx.eu.org/tags/%E5%BB%BA%E7%AB%99/"/>
    
    <category term="halo" scheme="https://blog.felicx.eu.org/tags/halo/"/>
    
  </entry>
  
  <entry>
    <title>云服务器添加虚拟内存</title>
    <link href="https://blog.felicx.eu.org/4224994049.html"/>
    <id>https://blog.felicx.eu.org/4224994049.html</id>
    <published>2023-11-16T09:21:39.000Z</published>
    <updated>2023-11-16T09:51:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近翻新了下自己的博客，部署了些 docker 应用，结果小鸡内存蹭蹭往上涨，2G 内存眨眼就没了一大半。贫穷的我真不想掏钱加配置，只能添加虚拟内存来缓缓了。</p><h2 id="什么是-Swap"><a href="#什么是-Swap" class="headerlink" title="什么是 Swap"></a>什么是 Swap</h2><p>Swap 说白了就是把一块磁盘空间当成内存来使用。它包括换出和换入两个过程。</p><p>所谓换出，就是把进程暂时不用的内存数据存储到磁盘中，并释放这些数据占用的内存。而换入，则是在进程再次访问这些内存的时候，把它们从磁盘读到内存中来。</p><p>一个很典型的场景就是，即使内存不足时，有些应用程序也并不想被 OOM 杀死，而是希望能缓一段时间，等待人工介入，或者等系统自动释放其他进程的内存，再分配给它。</p><p>除此之外，我们常见的笔记本电脑的休眠和快速开机的功能，也基于 Swap 。休眠时，把系统的内存存入磁盘，这样等到再次开机时，只要从磁盘中加载内存就可以。这样就省去了很多应用程序的初始化过程，加快了开机速度。</p><p>缺点就是，swap 是存放在磁盘上的，磁盘的速度和内存比较起来慢了好几个数量级，如果不停的读写 swap，那么对系统的性能肯定有影响，尤其是当系统内存很吃紧的时候，读写 swap 空间发生的频率会很高，导致系统运行很慢，像死了一样，这个时候添加物理内存是唯一的解决办法。</p><h2 id="详细操作"><a href="#详细操作" class="headerlink" title="详细操作"></a>详细操作</h2><h3 id="定义-Swap的大小及位置"><a href="#定义-Swap的大小及位置" class="headerlink" title="定义 Swap的大小及位置"></a>定义 Swap的大小及位置</h3><p>选择你 Swap 文件要放置的位置，比如我直接在根目录&#x2F;下创建，然后设置 swap 分区的名称为 swapfile。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/swapfile bs=1k count=2048000</span><br></pre></td></tr></table></figure><p>上面 swapfile 为你创建 Swap 文件分区的名称，你可以根据需要改成你自己的名称；bs 即 blocksizes，每个块大小为 1k；count&#x3D;2048000，总大小为 2G 的文件。</p><h3 id="建立-Swap"><a href="#建立-Swap" class="headerlink" title="建立 Swap"></a>建立 Swap</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkswap /swapfile</span><br></pre></td></tr></table></figure><h3 id="启动-Swap"><a href="#启动-Swap" class="headerlink" title="启动 Swap"></a>启动 Swap</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapon /swapfile</span><br></pre></td></tr></table></figure><h3 id="检查是否正确"><a href="#检查是否正确" class="headerlink" title="检查是否正确"></a>检查是否正确</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -m</span><br></pre></td></tr></table></figure><h3 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h3><p>修改 &#x2F;etc&#x2F;fstab 使其启动时自动 mount，这个操作与 Swap 分区法一样，在 &#x2F;etc&#x2F;fstab 中最后一行增加如下语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/swapfile  swap  swap    defaults 0 0</span><br></pre></td></tr></table></figure><h3 id="删除-Swap分区"><a href="#删除-Swap分区" class="headerlink" title="删除 Swap分区"></a>删除 Swap分区</h3><p>如果不再需要swap，可以清理该分区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapoff /swapfile</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">给小鸡一个稳定的家</summary>
    
    
    
    <category term="开发运维" scheme="https://blog.felicx.eu.org/categories/%E5%BC%80%E5%8F%91%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="linux" scheme="https://blog.felicx.eu.org/tags/linux/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YOLOのBLOG</title>
  
  
  <link href="https://blog.felicx.eu.org/atom.xml" rel="self"/>
  
  <link href="https://blog.felicx.eu.org/"/>
  <updated>2025-01-04T01:50:00.000Z</updated>
  <id>https://blog.felicx.eu.org/</id>
  
  <author>
    <name>felicx</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2025年度OKR</title>
    <link href="https://blog.felicx.eu.org/1985364334.html"/>
    <id>https://blog.felicx.eu.org/1985364334.html</id>
    <published>2025-01-04T01:00:00.000Z</published>
    <updated>2025-01-04T01:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e44315abd9668fe6539ae1b0e89c01a51e03e27a0edcbfc49e114e1891ed9497"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="随笔" scheme="https://blog.felicx.eu.org/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="年度总结" scheme="https://blog.felicx.eu.org/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>我的听歌之路</title>
    <link href="https://blog.felicx.eu.org/3315959774.html"/>
    <id>https://blog.felicx.eu.org/3315959774.html</id>
    <published>2024-12-14T08:32:42.000Z</published>
    <updated>2024-12-14T10:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天闲来无事，翻了下网易云创建的歌单，发现很多歌单现在都不怎么听了，但是在当时的年纪，却每天都在循环。</p><p>小学时听音乐的途径只有收音机，每天除了听鬼怪故事，就是听歌，喜欢听《包青天》、《我的中国心》、《酒干倘卖无》、《冬天里的一把火》，反反复复的听。反倒是对大街小巷传唱度很高的《老鼠爱大米》、《最炫民族风》这些流行歌曲嗤之以鼻。现在想起来，多半是受父亲熏陶，因为这些老歌属于他那个年代的流行歌曲，而他每天都在家里哼，久而久之便习惯上了老歌。</p><p>到了初中，开始接触到 MP3，也开始接触到了更多的流行歌曲。像《春天里》、《我的好兄弟》这类讲兄弟情的，当时很是喜欢。初中是叛逆期，就喜欢称兄道弟，倒也不出奇。也是在初中开始接触到了 Beyond，《海阔天空》是我听的第一首粤语歌，从那时候开始，就开始喜欢上这支乐队，无论是家驹的嗓音，还是他们的歌词，总能激起心中的澎湃，特别是后面听了《Amani》，全场大合唱的时候，很有感触。</p><p>到了高中，刚好碰上《爸爸去哪儿》开播，那时还特地把手机铃声换成了主题曲，当时用的是老人机，没法下载歌曲，还是用收音机录了好多次才当了铃声。这个阶段，开始慢慢意识到自己和别人的差距，也没有时间去说情情爱爱，所以对《客官不可以》、《多余的解释》这些都不感兴趣，尤其反感 TFBOYS 的歌。高中更多的是听朴树的《平凡之路》和南征北战的《我的天空》，给我难熬的学习生涯一抹阳光，让我还有动力继续往前走。值得一提的是，直到毕业，我都不喜欢凤凰传奇的歌，觉得太土了。</p><p>到了大学，开始喜欢民谣，还是那种伤感的民谣。那个时间段，网易的歌单里都是《成都》、《城南花已开》、《Let Her Go》、《Five Hundred Miles》这一类的；慢慢的开始听《觅香》、《Wait For You》这些，情窦初开了嘛；到了大三，接触到了机器人，每天都是泡在实验室，开始喜欢上了小众的歌曲，像《阿衣莫》、《上头歌》、《月光光》，说不上为什么喜欢，但听这些歌能让我平静，写代码这些能更有思路。当然，这个阶段我更像是是杂食系，听粤语，听日语，听英语，只要是喜欢的都收藏。期间买了把口琴，有事没事就在宿舍里吹，所以我的歌单里又多了很多流行歌曲的口琴版。大三时韩综《Super Band》开始播出，每周更新都没落下，十分惊艳乐手们的创作水准，专门列了个歌单来收藏他们的歌。当然，这个时候 Beyond 更是我的内心寄托，感觉和 Beyond 有种奇怪的缘分，高中时年级级歌就是《光辉岁月》改编的，到了大学，校歌《大学问》也是《光辉岁月》改编的。</p><p>毕业后，开始工作。恰好这时《乐队的夏天》开播。每天都是在公司下好新出的一集，回家慢慢看。当然不是所有摇滚都喜欢，像重塑的歌我就无感，我更喜欢新裤子、后海大鲨鱼这些，像羽果的《怒马》、丢火车的《火车日记》、康士坦的《美好的事可不可以发生在我身上》也比较喜欢。仔细想想，我应该是向往这种自由的气息，毕竟一周除了工作没剩多少个人时间。工作第二年，我开始跳槽，也是这个时候接触到了毛不易的歌，很慢很舒服，尤其喜欢《无名的人》，仿佛写的就是自己，比《平凡之路》还写实。对凤凰传奇的改观也是工作后，再也不觉得他们的歌土了，而且又开始喜欢起听小时候的华语乐坛金曲，实在不喜欢现在的流行歌曲，完全没有听下去的欲望，感觉华语乐坛倒退了好多。</p><p>写了这么多，听歌品味的变化，我觉得是我听音乐的动机和方式不同了。小时候只有收音机和父亲的哼唱，所以喜欢老歌；初高中接触到了流行歌曲和粤语歌，所以听歌风格开始变化；到了大学，要静下心写代码，所以听小众歌曲，要练口琴，所以听口琴版；毕业工作了，更加向往自由，所以听乐队，越发觉得孤独，所以听老歌。</p>]]></content>
    
    
    <summary type="html">年龄越来越大，听的歌也在慢慢变化</summary>
    
    
    
    <category term="随笔" scheme="https://blog.felicx.eu.org/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="音乐" scheme="https://blog.felicx.eu.org/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>Typecho 博客搭建</title>
    <link href="https://blog.felicx.eu.org/9399837.html"/>
    <id>https://blog.felicx.eu.org/9399837.html</id>
    <published>2024-10-20T04:28:34.000Z</published>
    <updated>2024-10-20T08:10:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>国庆前就搭好博客了，放假回来到现在，总算有时间整理下博客了。主要是前段时间看到个朋友圈主题的博客，挺适合我这种随手记的。</p><h2 id="数据库创建"><a href="#数据库创建" class="headerlink" title="数据库创建"></a>数据库创建</h2><p>之前写过一篇『<a href="https://blog.felicx.eu.org/1521393913.html">国内外一些免费的云数据库</a>』，挑来挑去选了 TiDB（<del>主要是使用 Supbase 死活无法连接 Typecho</del>）。</p><ol><li>创建数据库集群；<br><img src="/assets/post/20241020_BrQp44wY.webp" alt="img"></li><li>创建项目所需数据库；<br>CREATE DATABASE tidbcloud_WeChat_Moments_icefox; （可自定义为想起的数据库名称）<br><img src="/assets/post/20241020_VBC3Vv0w.webp" alt="img"></li><li>在 Overview 界面，点击右上角的 Connect 获得数据库连接参数；<br><img src="/assets/post/20241020_TCnyiBt4.webp" alt="img"></li><li>Endpoint Type 选择 Public，数据库选择为刚刚创建的数据库，保存好生成的参数；<br><img src="/assets/post/20241020_2sY3AU2R.webp" alt="img"></li><li><a href="https://letsencrypt.org/certs/isrgrootx1.pem">下载 CA 证书</a>，TiDB 的 Public 连接方式强制要求 TLS 连接，故还需配置其 CA 证书；</li></ol><h2 id="Typecho-程序"><a href="#Typecho-程序" class="headerlink" title="Typecho 程序"></a>Typecho 程序</h2><ol><li>打开<a href="https://github.com/typecho/typecho"> Github 链接</a>下载 Typecho 程序；</li><li>根目录新建 vercel.json，输入以下<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;functions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;api/index.php&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;runtime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vercel-php@0.6.0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;routes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/(.*)&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;dest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/api/index.php&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;regions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;hkg1&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>根目录新建 &#x2F;api&#x2F;index.php，输入以下<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span>= <span class="keyword">__DIR__</span> . <span class="string">&#x27;/..&#x27;</span>.<span class="variable">$_SERVER</span>[<span class="string">&quot;PHP_SELF&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span>))</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/../index.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#echo $_SERVER[&quot;PHP_SELF&quot;];</span></span><br></pre></td></tr></table></figure></li><li>将刚才下载的 CA 证书 isrgrootx1.pem 放在根目录；</li><li>选个主题，我挑的是 <a href="https://github.com/xiaopanglian/icefox">icefox</a>，放入 \usr\themes 目录下</li><li>将代码提交到 Github，等下要用 Vercel 引入；</li></ol><h2 id="Vercel-部署"><a href="#Vercel-部署" class="headerlink" title="Vercel 部署"></a>Vercel 部署</h2><p>Vercel 部署没什么好说的，注意要配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">TYPECHO_HOST=<span class="string">&quot;&quot;</span> <span class="comment"># 数据库地址</span></span><br><span class="line">TYPECHO_DATABASE=<span class="string">&quot;tidbcloud_WeChat_Moments_icefox&quot;</span> <span class="comment"># 数据库名称</span></span><br><span class="line">TYPECHO_USERNAME=<span class="string">&quot;&quot;</span> <span class="comment"># 数据库用户名</span></span><br><span class="line">TYPECHO_PASSWORD=<span class="string">&quot;&quot;</span> <span class="comment"># 数据库密码</span></span><br><span class="line">TYPECHO_PREFIX=<span class="string">&quot;typecho_&quot;</span> <span class="comment"># 前缀</span></span><br><span class="line">TYPECHO_ADAPTER_NAME=<span class="string">&quot;Pdo_Mysql&quot;</span> <span class="comment"># 数据库适配器</span></span><br><span class="line">TYPECHO_CHARSET=<span class="string">&quot;utf8mb4&quot;</span> <span class="comment"># 数据库编码</span></span><br><span class="line">TYPECHO_ENGINE=<span class="string">&quot;MyISAM&quot;</span> <span class="comment"># 数据库引擎</span></span><br><span class="line">TYPECHO_PORT=<span class="string">&quot;4000&quot;</span> <span class="comment"># 数据库端口</span></span><br><span class="line">TYPECHO_SSL_CA=<span class="string">&quot;isrgrootx1.pem&quot;</span> <span class="comment"># 数据库SSL证书位置</span></span><br></pre></td></tr></table></figure><p><img src="/assets/post/20241020_idZ9ZWGA.webp" alt="img"></p><h2 id="Typecho-安装"><a href="#Typecho-安装" class="headerlink" title="Typecho 安装"></a>Typecho 安装</h2><p>输入 Vercel 分配的网址+&#x2F;install.php，进入安装页面，跟着步骤走就行了。<br><img src="/assets/post/20241020_4x3p7Ntp.webp" alt="img"></p>]]></content>
    
    
    <summary type="html">Typecho + Vercel + TiDB，把白嫖用到极致</summary>
    
    
    
    <category term="折腾系列" scheme="https://blog.felicx.eu.org/categories/%E6%8A%98%E8%85%BE%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="typecho" scheme="https://blog.felicx.eu.org/tags/typecho/"/>
    
  </entry>
  
  <entry>
    <title>技术岗位如何写简历（转）</title>
    <link href="https://blog.felicx.eu.org/1589846811.html"/>
    <id>https://blog.felicx.eu.org/1589846811.html</id>
    <published>2024-09-23T15:15:21.000Z</published>
    <updated>2024-09-23T15:30:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在搜东西，无意中来到一位大佬的<a href="https://www.paincker.com/">博客</a>，看到了这篇<a href="https://www.paincker.com/how-to-write-a-resume/">技术岗位如何写简历</a>，这里做个转载，方便日后反复学习。</p><h2 id="明确目标"><a href="#明确目标" class="headerlink" title="明确目标"></a>明确目标</h2><p><strong>求职是一个双向选择的过程</strong>。投简历面试的过程应该尽可能<strong>充分且实事求是</strong>的展示个人能力和特点，让 HR 和面试官在最短的时间里了解你，判断是否适合岗位需要。</p><ul><li><p>能力问题。简历应该尽力展示自己的能力，但是如果目前能力还不够，抱着侥幸心理刻意夸大个人实力、隐瞒欺骗方式通过面试的做法不可取。即使通过面试了，如果个人能力差太多，工作业绩很不好，一样会被淘汰。</p></li><li><p>时机与合适问题。如果对自己的认知不够清晰，不了解自己喜欢和擅长什么，强行拿到并不适合自己的岗位，和自己擅长或者感兴趣的事情差异太大，每天上班都很难受，也没意思。反过来看，面试失败并不一定是因为能力不够，可能是因为目前招人的意愿不强，或者只是因为个人能力和岗位需求不匹配。</p></li></ul><p>双向选择的过程通常都可以拿谈恋爱来类比。</p><ul><li>为了追到对自己并不感兴趣的异性，一直努力迎合对方，从一开始身份就是不公平的，即使追到了也容易会被嫌弃。学习PUA技术欺骗女生的做法也不可取。</li><li>强行改变自己甚至迷失自我的做法也是不好的。被一个女生拒绝并不一定是不够优秀，可能是因为对方目前没心思谈恋爱，或者是因为不合适。例如某个女生就喜欢家庭条件一般能吃苦的人，而你偏偏是个富二代 (●ﾟωﾟ●)</li></ul><h2 id="换位思考"><a href="#换位思考" class="headerlink" title="换位思考"></a>换位思考</h2><p>多进行换位思考，站在面试官的角度想问题。很多有工作经验的人包括我自己也做过面试官，对面试官的处境有所了解。在短短几个小时的时间里了解一个候选人其实很困难，有时候面试完了也拿不定主意，不确定候选人到底合适不合适。面试官挖掘候选人的能力很重要，候选人自我展示的能力也很重要。</p><p>应聘岗位的关注点：</p><ul><li>大公司、负责成熟产品的团队，分工更加明确，招聘实际干活的开发人员时，通常比较注重基础知识，关注技术深度，希望求职者在某些领域有较为深入的研究（当然不可能所有领域都很深入），一方面这种技能可以解决团队遇到的该领域的疑难问题，另一方面也体现了候选人的钻研能力。</li><li>高职级的岗位，或者是小团队，可能会关心员工有没有创业精神、产品意识、技术广度、领导能力等。</li><li>开发人员的通用能力都会比较被重视，例如智商、逻辑思维、学习能力、解决问题能力、团队精神、沟通能力等。</li></ul><h2 id="简历内容组成"><a href="#简历内容组成" class="headerlink" title="简历内容组成"></a>简历内容组成</h2><p>关于简历具体的形式（应该写多长，写哪些内容），不同的人有不同的看法，这里主要说一下我的看法。</p><p>根据文章 <a href="https://novoresume.com/career-blog/cv-vs-resume-what-is-the-difference">CV vs Resume - What are the Differences &amp; Definitions [+ Examples]</a> 的介绍，Resume 和 CV 是两个不同的概念，Resume 更加精简，通常只有一页，用于各行各业的求职；而 CV 更加详细，用于学术相关的招生和招聘。</p><p>有很多“江湖传言”说简历只能写一页，理由是 HR 每天要看很多简历，太长了没时间看，这里的简历指的正是 Resume。但是对于开发岗位，最好要用类似 CV 的东西，从技术专业角度对项目做一些更详细的介绍。</p><p>借鉴 Resume 和 CV 的概念，针对社招开发岗位，简历可以分为几部分：</p><p>一、简历 (Resume)，保持精简，最好是一页纸。简历用于<strong>HR筛选</strong>，以及让面试官快速了解你的<strong>基本情况</strong>。</p><ul><li>基本信息：姓名、年龄、联系方式（电话、邮箱、微信），必要时加上居住地、求职意向。</li><li>教育经历：时间、城市、学校、专业、学历，必要时加上英语成绩。</li><li>工作和项目经验：因为要精简，并且通常会有重复内容，这两者可以压缩到一起。<ul><li>每段工作经历，基本信息可包括时间、城市、公司、团队、职位。</li><li>可以采用<strong>总 - 分结构</strong>描述。每段工作先用一句话做简单总结（例如公司、团队、项目规模、个人成长等），然后分几点介绍工作内容和成果。每一点又可以先用一句话概括，再详细介绍。</li><li>关键项目的介绍，说清楚自己<strong>扮演的角色</strong>，是独立完成、项目负责人还是参与者，也可以注明大致的贡献占比。使用技术关键字（例如开发语言、工具），但不用写技术细节。成果要有说服力，多使用<strong>数据展示</strong>（例如开源项目 GitHub Star 2k+，性能提升 30% 等）。重点关键词可加粗，还可以插入相关网址链接（当然电子简历才好用链接，纸质简历就不太方便了）。</li><li>如果项目多，又有博客，可以写“更多项目详见个人博客”并插入链接。</li><li>做到让 HR 这样的非技术人员也能大致看到你的实力，并能根据技术关键字判断你的技能和岗位需求是否匹配。</li></ul></li><li>自我评价：可以列举自己的优点，一定要有<strong>实际案例支撑</strong>（可直接在括号中简要说明），否则就成了没有说服力的空话了。</li><li>个人技能：最擅长的东西应该在项目经验中已经介绍过了，这里列举你用过的所有编程语言、框架等技术关键字，主要作用是<strong>体现技术广度</strong>。使用“入门”、“了解”、“熟练”等描述，<strong>慎用精通</strong>，因为容易翻车。如果写了精通，面试官碰巧有了解这方面，可能会问一些比较难的问题，被问倒了就会让人怀疑你是否诚实了。也可以使用图形例如五角星来描述熟练度。</li></ul><p>二、履历 (CV) 或附录，是简历的补充，内容相对详细，长度可以有多页。</p><ul><li>内容可以包括重点项目经验的技术实现细节和关键点等。可以借鉴 STAR 原则说明，即 Situation（情景）、Task（任务）、Action（行动）和Result（结果），但也要根据实际进行调整，不能生搬硬套。</li><li>面试官如果对你简历中的某个项目感兴趣可以具体看 CV；同时在面试聊项目时也起到提纲的效果，如果担心一时想不起来，可以对照 CV 介绍。</li><li>形式上，建议附在简历末尾。也可以考虑写到个人博客中，在简历里贴链接。</li></ul><p>三、其他。</p><ul><li>个人博客：如果有还不错的个人博客，可以贴到简历里。个人博客如果写的好，<strong>远比简历的参考价值要大</strong>。</li><li>GitHub：如果 GitHub 比较活跃，有个人项目，可以贴到简历里。有一定技术含量、Star 较多的开源项目，通常是个<strong>很大的加分项</strong>。</li><li>Demo：对于客户端 App、网站之类的项目，必要时可以准备好项目、Demo、截图、网址等，面试官可以自行查看，或者现场给面试官演示，帮助进行说明。</li></ul><h2 id="项目经验的整理"><a href="#项目经验的整理" class="headerlink" title="项目经验的整理"></a>项目经验的整理</h2><p>有一定工作经验的人通常会有较多项目经验。为了保持简历的简洁，需要挑选最重点的内容来写。写项目经验时可以按照这样的方式进行：</p><ul><li>使用思维导图，将自己过去所有感觉还可以的项目都列出来，想到什么都写上。</li><li>对每个项目的成果如何展示、能反映什么样的能力特点做思考。例如复杂的业务，说明自己业务能力较好；技术项目，说明自己有一定的技术深度；某些小工具项目，说明自己注重工具的使用；个人开源项目，说明自己热爱技术等。</li><li>挑选几个最有代表性的、比较容易说明和展示的项目，做相对详细的分析，根据项目的重要性，介绍的篇幅也需要有控制。</li><li>最后将选定的项目和介绍压缩到简历上。</li><li>其他没有被选中但是也还不错的项目，可以通过博客或附录的形式展示。</li></ul><h2 id="内容与排版"><a href="#内容与排版" class="headerlink" title="内容与排版"></a>内容与排版</h2><ul><li>整体结构要清晰，避免逻辑混乱和内容冗余，和写文章类似。例如工作经验和项目经验，常会有很多重复内容，可以合并到一起。</li><li>文字表述要简单明了。如果觉得内容较少，不要刻意凑字数，简历字数和个人经验能力没有直接联系。</li><li>排版要整洁，版面要匀称。例如前面很拥挤，但是后面却有大块空白，就会很不匀称。字数较少可以适当加大字体、增加行间距、增加页面距等。字数太多，首先考虑压缩文字，实在没法压缩再从排版上考虑。</li><li>尽量避免错别字和标点符号问题。这会让人觉得你做事情不认真。</li></ul><h2 id="简历编辑工具"><a href="#简历编辑工具" class="headerlink" title="简历编辑工具"></a>简历编辑工具</h2><p>简历有多种编辑工具：</p><ul><li>Word。不太建议使用，想让简历稍微精致一点，Word 不太好实现。</li><li>Markdown。我使用的是这种方式，自己修改了 CSS 调整格式。</li><li>LaTeX。LaTeX 的排版效果很好，但是环境配置相对复杂，LaTeX 语法也需要一点时间掌握。我尝试用了大佬的 <a href="https://github.com/billryan/resume">LaTeX简历模板</a>，但是编译后的效果不对，可能是兼容性问题，一时不好解决，就放弃了。</li><li>PhotoShop 等设计工具，可以制作出画面更加精美的简历。比较耗时并且考验审美能力，对于技术开发岗位没太大必要，更适合设计师类岗位。</li><li>在线简历模板。例如 <a href="https://www.wondercv.com/">超级简历</a> 。</li></ul>]]></content>
    
    
    <summary type="html">转自一位博主的写简历大法</summary>
    
    
    
    <category term="随笔" scheme="https://blog.felicx.eu.org/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="职场" scheme="https://blog.felicx.eu.org/tags/%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>国内外一些免费的云数据库</title>
    <link href="https://blog.felicx.eu.org/1521393913.html"/>
    <id>https://blog.felicx.eu.org/1521393913.html</id>
    <published>2024-09-22T06:01:25.000Z</published>
    <updated>2024-09-22T07:07:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在折腾用 Vercel 来部署 Typecho 网站，其中项目要用到数据库，这激发起了我寻找免费云数据库的兴趣。</p><h2 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h2><table><thead><tr><th>数据库</th><th>介绍</th></tr></thead><tbody><tr><td><a href="https://tidbcloud.com/">TiDB Cloud</a></td><td>国产之光，5GB 的 MySQL 免费存储和 每月 50M 请求单元，支持每天备份，要 SSL 连接，需下载 CA 证书</td></tr><tr><td><a href="https://azure.microsoft.com/zh-cn/products/mysql/">Azure</a></td><td>面向学生的 Azure 订阅里有免费的数据库服务，按下面教程操作即可；<br>另外也可以在免费 1G1C 的小鸡上自行搭建数据库服务</td></tr><tr><td><a href="https://www.netlify.com/integrations/aiven/?utm_campaign=minimal-starter">Aiven</a></td><td>5GB 存储空间，有 PostgreSQL、MySQL 等其他服务</td></tr><tr><td><a href="https://www.memfiredb.com/">Memfiredb</a></td><td>国产数据库，512MB 存储空间</td></tr><tr><td><a href="https://www.koyeb.com/">Koyeb</a></td><td>免费 4GB 的 PostgreSQL 数据库空间</td></tr><tr><td><a href="https://www.mongodb.com/zh-cn/cloud/atlas/register">MongoDB Atlas</a></td><td>MongoDB 数据库托管服务，免费账户可以永久使用 500MB 的数据库</td></tr><tr><td><a href="https://supabase.com/">Supabase</a></td><td>专用的 PostgreSQL 数据库</td></tr><tr><td><a href="https://render.com/">Render</a></td><td>10GB 数据库空间，有 PostgreSQL、Redis、MySQL 等，好像需要绑卡了</td></tr><tr><td><a href="https://www.freedb.tech/">FreeDB</a></td><td>国外免费的远程 MySQL 数据库，25MB 存储空间，缺点是连接较慢</td></tr><tr><td><a href="https://xata.io/">Xata</a></td><td>PostgreSQL 的无服务器数据平台</td></tr><tr><td><a href="https://www.sqlpub.com/">SQLPub</a></td><td>国内免费的 MySQL 数据库，获得最大 36000 次&#x2F;小时的请求、同时 30 个连接和 500M 存储空间，是测试服务</td></tr><tr><td><a href="https://www.db4free.net/">DB4free</a></td><td>MySQL 服务器测试服务</td></tr><tr><td><a href="https://www.freesqldatabase.com/">FreeSQLdatabase</a></td><td>5MB 存储空间</td></tr><tr><td><a href="serv00.com/">Serv00</a></td><td>支持 10 个 MySQL 8.0、3 个 PostgreSQL 14、3 个 MongoDB 5.0</td></tr><tr><td><a href="https://turso.tech/">Turso</a></td><td>用于生产的 SQLite，500 个数据库，总存储空间 9GB</td></tr><tr><td><a href="https://neon.tech/">Neon</a></td><td>512 MB的 Postgres 数据库空间</td></tr><tr><td><a href="https://www.leancloud.cn/">LeanCloud</a></td><td>云端数据存储服务</td></tr><tr><td><a href="https://www.cloudflare-cn.com/developer-platform/d1/">Cloudflare D1</a></td><td>Cloudflare 的原生无服务器数据库</td></tr><tr><td><a href="https://vercel.com/docs/storage">Vercel Storage</a></td><td>Vercel 本身也有免费数据库服务了，但有限制，每月只有 60hrs&#x2F;0.25cpu&#x3D;240h 的使用时间；<br>可能还会休眠，如果您的数据库在 5 分钟内未被访问，则数据库将被暂停。下次访问时，您将经历长达 1 秒的“冷启动”</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">白嫖使我快乐</summary>
    
    
    
    <category term="折腾系列" scheme="https://blog.felicx.eu.org/categories/%E6%8A%98%E8%85%BE%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="数据库" scheme="https://blog.felicx.eu.org/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>红十字救护员培训之旅</title>
    <link href="https://blog.felicx.eu.org/855438526.html"/>
    <id>https://blog.felicx.eu.org/855438526.html</id>
    <published>2024-09-02T14:32:25.000Z</published>
    <updated>2024-09-09T15:32:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近红十字会来公司做“初级急救员”培训，想着无事，参加下也无妨。另一方面还是想学习急救技能以备不时之需，刚好有机会索性参加下。<br>整个课程就8课时，既有理念知识，又有实操练习，收获蛮多，这里简要记录下来，后面可以温故知新。</p><h2 id="CPR"><a href="#CPR" class="headerlink" title="CPR"></a>CPR</h2><h2 id="AED"><a href="#AED" class="headerlink" title="AED"></a>AED</h2><h2 id="情景再现"><a href="#情景再现" class="headerlink" title="情景再现"></a>情景再现</h2><p>情景：假设你在逛商场时，有人突然晕倒，而你恰巧有红十字救护员证书，你应该怎么做？</p><ol><li>观察周围环境，确认环境安全无误（不能救人把自己命搭上去）；</li><li>确认自己做好个人防护，比如手套口罩（救人要确保自己的防护安全）；</li><li>跪在患者边上，双手轻拍患者双肩同时大声呼唤“先生先生，听得到吗”（确认患者是否还有意识）；</li><li>左手手肘撑地（假设你在患者右手边），脸贴近但不要触碰患者，口中数“1001、1002、1003…1010”（数10秒，确认患者是否还有自主呼吸）；</li><li>大声呼救，“这里有人晕倒了”（确认患者失去意识了，叫人来帮忙）；</li><li>亮明身份，“我是红十字的救护员”（不说身份不一定有人帮你）；</li><li>请人帮忙，“这位先生请帮我拨打120并告知我结果，这位女士请帮我找下AED并拿过来给我”（你要救人，肯定没时间做这些事）；</li><li>招呼懂急救的人，“现场有懂急救的朋友也请来一起帮忙”（心肺复苏按压很累的）；</li><li>掀开患者衣物，准备做CPR，也就是心肺复苏术（避免患者里面戴了啥影响按压，而且后面用AED也要掀开衣服的，患者是女生就要做个人墙再掀衣服）；</li><li>CPR按30:2来进行，按30次，嘴里数着“01、02、03…30”，人工呼吸2次；</li><li>然后AED来了后，按图示贴好左右电极片（患者右乳上方肩胛骨下方，肚脐左边肋骨下方）；</li><li>插好电源，AED会提示两次不要触碰患者，跟随AED提示，张开双臂，“请大家不要触碰患者”；</li><li>点击完成后，按下闪烁的放电键，开始继续CPR；</li><li>当患者眼睛或者手脚有反应后，停止按压；</li><li>左手手肘撑地（假设你在患者右手边），脸贴近但不要触碰患者，右手双指搭在患者喉咙处，口中数“1001、1002、1003…1010”（数10秒，确认患者恢复自主呼吸）；</li><li>确认患者恢复意识后，边帮患者拉好衣服，边人文关怀，“先生您好，刚刚您晕倒了，我帮您做了急救，同时也拨打了120，我会陪伴您到120到来”；</li></ol>]]></content>
    
    
    <summary type="html">红十字急救一些培训记录</summary>
    
    
    
    <category term="随笔" scheme="https://blog.felicx.eu.org/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="救护" scheme="https://blog.felicx.eu.org/tags/%E6%95%91%E6%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>职场语录</title>
    <link href="https://blog.felicx.eu.org/3001155188.html"/>
    <id>https://blog.felicx.eu.org/3001155188.html</id>
    <published>2024-09-01T14:04:29.000Z</published>
    <updated>2024-09-09T15:04:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经常会逛比如脉脉这些职场论坛，总能学到很多行业大佬的职场经验，这里做个记录，方便反复学习。</p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><div class="tag-plugin colorful note" ><div class="title">📝&nbsp;对如何快速适应测试组长岗位的看法与建议。</div><div class="body"><p>1. 组长还算不上真正的管理岗，不过是管理岗的必经之路，可以先试试，不做管理岗，走专家线路也是不错的；</p> <p>2. 组长通常自己还有测试任务，但是一定要留出时间处理组内的事情；</p> <p>3. 与组员的工作差别主要是要对进度和质量负责，无主的临时事情也要处理。首先要学会有效的监控进度和质量，做到对自己没有参与、不大熟悉的项目测试过程和结果好坏有判断能力；</p> <p>4. 根据遇到的问题，制定必要的日常管理和分工规则，比如各种文档整理有默认的分工，收集不紧急的事务，分到个人，项目不忙的时候处理；</p> <p>5. 向上争取资源，解决组员的问题，比如太忙的话争取人力、延长时间或缩小范围，加班多的时候争取点小福利；</p> <p>6. 抓大放小，明确原则，保证重点项目；</p> <p>7. 多倾听了解组员的意见或错误，不要因小事跟组员有冲突，组员无伤大雅的问题私下沟通消化；</p> <p>总之，组长与组员最大的区别是会增加很多沟通，随时保持清晰的思路，能识别问题，及时解决问题。</p></div></div>]]></content>
    
    
    <summary type="html">一些职场经验记录</summary>
    
    
    
    <category term="随笔" scheme="https://blog.felicx.eu.org/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="职场" scheme="https://blog.felicx.eu.org/tags/%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>零成本部署网站统计系统</title>
    <link href="https://blog.felicx.eu.org/2224651331.html"/>
    <id>https://blog.felicx.eu.org/2224651331.html</id>
    <published>2024-07-25T13:02:32.000Z</published>
    <updated>2024-07-25T13:24:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有了个人博客，想统计博客的访问流量数据该怎么办？本着一分钱不花的原则，使用 Supabase 免费数据库服务，通过 Vercel 搭建一个替代 Google Analytics 的网站数据统计。</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li>首先在 GitHub 的 <a href="https://github.com/umami-software/umami">Umami</a> 项目 Fork 到自己的账号下；</li><li>在 <a href="https://supabase.com/">Supabase</a> 中创建一个项目，需要记住所设置的密码，之后会用到;<br><img src="/assets/post/20240725_qRoX27iU.webp" alt="img"></li><li>等待初始化完成点击右上角 connect 复制出需要之后使用的连接链接;<br><img src="/assets/post/20240725_6Wam74ik.webp" alt="img"><br><img src="/assets/post/20240725_6awSseWG.webp" alt="img"><br>其中 postgres:&#x2F;&#x2F;postgres.vzhpxlcldnemfwtfztfh:[YOUR-PASSWORD]@aws-0-us-west-1.pooler.supabase.com:5432&#x2F;postgres 需要将 [YOUR-PASSWORD] 调整为上一步中设置的密码;</li><li>在 <a href="https://vercel.com/">Vercel</a> 创建项目，选择自己 Fork 的 Umami;<br><img src="/assets/post/20240725_DOVJU7Nk.webp" alt="img"></li><li>添加环境变量后点击 Deploy 进行部署;<br><img src="/assets/post/20240725_V9YKa5vl.webp" alt="img"><br>其中 HASH_SALT 是你在键盘上随机输入的字符串，DATABASE_URL 为替换了密码的数据库连接地址</li><li>等待部署完成，通过项目地址或者自己绑定的域名可以进入具体的设置页面，账号是 admin，密码是 umami；<br><img src="/assets/post/20240725_Ky5NKtX8.webp" alt="img"><br>登录后可以修改密码，设置自己要统计访问的网站并获取到监听代码，之后就是在目标网站上进行部署操作了；<br><img src="/assets/post/20240725_ttp29hUS.webp" alt="img"></li><li>最后就是在 Hexo 中使用 Umami；</li></ol><ul><li>如果主题没有适配 Umami 的话，可以使用 <a href="https://hexo.io/zh-cn/api/injector">hexo injector</a> 直接注入;</li><li>在博客项目根目录，创建 scripts 文件夹;</li><li>在 scripts 文件夹下，创建 injector.js 文件并填入；<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo.<span class="property">extend</span>.<span class="property">injector</span>.<span class="title function_">register</span>(<span class="string">&#x27;head_end&#x27;</span>, <span class="string">&#x27;&lt;script async defer data-website-id=&quot;&lt;data-website-id&gt;&quot; src=&quot;&lt;src&gt;&quot;&gt;&lt;/script&gt;&#x27;</span>);</span><br><span class="line"><span class="comment">// 把 &lt;data-website-id&gt; 和 &lt;src&gt; 替换成在 Umami 中获取到的信息</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">用 Supabase 和 Umami 在 Vercel 上搭建个人网站数据统计</summary>
    
    
    
    <category term="折腾系列" scheme="https://blog.felicx.eu.org/categories/%E6%8A%98%E8%85%BE%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="umami" scheme="https://blog.felicx.eu.org/tags/umami/"/>
    
    <category term="supabase" scheme="https://blog.felicx.eu.org/tags/supabase/"/>
    
  </entry>
  
  <entry>
    <title>天涯神贴 KK 三部曲之第一部</title>
    <link href="https://blog.felicx.eu.org/940241892.html"/>
    <id>https://blog.felicx.eu.org/940241892.html</id>
    <published>2024-07-20T14:31:00.000Z</published>
    <updated>2024-07-26T15:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="tag-plugin tabs" align="center"id="tab_57"><div class="nav-tabs"><div class="tab active"><a href="#tab_57-1">阅读原文</a></div><div class="tab"><a href="#tab_57-2">个人笔记</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_57-1"><h2 id="总论"><a href="#总论" class="headerlink" title="总论"></a>总论</h2><p>2010年的房地产调控，让很多人看到了希望：让房价降得再猛烈些吧。还有人更是幸灾乐祸似的呼喊：让房地产赶紧崩盘吧。让没房子的好好看看有房子的笑话，是人生的一大快事。</p><p>但是我们是不是要仔细想想，为什么调控？调控期望得到什么样的效果？</p><p>1、是如千千万万想买房子的人期望的那样，让人人买的起房吗？</p><p>2、是如千千万万的流氓无产者期望的那样，让房地产崩盘，开发商上吊，地方政府不再靠卖地实现GDP吗？</p><p>2010年房价下跌已经变成了人民最急切的期望，已经高过了解决超贫困家庭的温饱问题，已经超过了子女教育，医疗和养老。并且为房地产必须下降提出了若干义正言辞理由，总结下来无外乎三条：</p><p><strong>1、人人都有居住权。房子是用来住的，不是用来炒的。</strong><br><strong>2、房子太贵了，租售比严重不合理，空置率太高，人均收入太低，早晚要崩盘。</strong><br><strong>3、房价上涨造成物价上涨，人民生活变得困难。</strong></p><p>的确，当经济过热，房价过高，会对经济运行和社会安定带来较高的风险。这也是国家所担忧的。防范金融风险，一切维稳才是中央考虑的重中之中。</p><p>而民间所总结的三条，应该和调控的原因和目的基本不沾边。让我们一条一条的分析一下：</p><p><strong>1、人人都有居住权。房子是用来住的，不是用来炒的。</strong></p><p>其实这是一个伪命题。房子包括房屋及房屋所属的土地两个部分。房屋本身只有居住价值；而土地所具备稀缺性，决定了土地的投资价值。房地产贵的不是房屋，而是房屋下面那块地皮。所以商品房具备了投资与自住双重属性。</p><p>任志强说的并没有错，居者有其屋并不等于人人享有商品房的产权。居住的房屋也不等于商品房。</p><p><strong>2、房子太贵了，租售比严重不合理，空置率太高，人均收入太低，早晚要崩盘。</strong></p><p>这个问题比较大。房价是不是太贵了？有没有泡沫？</p><p>我们首先从国民的收入结构来分析</p><p>一个遵从“丛林法则”的精英社会决定了国民收入的金字塔结构。</p><p>既然是金字塔，底端的中低收入者占据了金子塔的最大比例，但是大家要知道金字塔的顶端既使只有 10% 人口，那也将是一个 1 亿多的绝对庞大的数字，远远超过了绝大多数西方国家的人口总和。</p><p>而北上广深以及三十多个省会，这些个靠掠夺全国或者一省资源，以牺牲大多数人口的利益为代价发展壮大起来的超大型及大型城市，需要容纳全国 1 亿多的精英人群，是否能得出房地产严重泡沫，空置率过高的结论？</p><p>当低收入者们努力挥洒汗水期望着自己年薪能够超过 5 万，8 万，10 万。。。的时候，他们可能做梦也想不出精英阶层手中究竟拥有多少财富。</p><p>精英们会象流氓无产者们一厢情愿认为的那样：因为一个区区房产税而恐慌性抛弃手中的大量房产吗？</p><p>答案显然是否定的。</p><p>可以确认的是，<strong>房价不是由统计局的平均收入决定的。而是精英的平均收入决定的。</strong></p><p>便于分析，我们剥离掉商品房（注意：只是商品房，而不是房屋）的社会属性，先把它看做商品。是商品就有他的内在规律。</p><p><strong>什么决定商品的价格，价值？对不起，我只能说你上学上傻了。</strong></p><p><strong>是供求关系，只有供求关系。</strong></p><p>我们判断一个核心城市市区内的商品房是具备足够稀缺性的。</p><p>如果你在北京海淀区上班，即使你在山海关拥有 1000 平方米的住宅也不能替代你住在北京市近郊区以内的愿望。而无论你是租房，分房还是买房，只要你<br>还在海淀区上班，你就必须住在北京市近郊区以内。</p><p>假设你挣得钱不足够多，你需要租一套房子解决你的上班问题，上班距离的远近及居住的质量，取决于你愿意支付的租金。</p><p>假设你的钱够买房子，我相信你更愿意买房，因为你可以拥有房屋的产权和房产增值的收益。而买房子的大小，品质，离你上班的远近，取决于你手中的资金和你对未来收入的预期。</p><p>买房问题很象是中国的上学问题，而且简直是异曲同工。</p><p>假设你家附近有个重点中学，教学质量很好，考大学几率很高，而其他的学校你觉得不理想，你肯定希望无论如何自家小孩也要上这个重点中学。</p><p>上重点中学凭什么？我们简单的剥离掉其他社会因素的影响，可以认为想上重点中学就要凭好成绩，小孩努力考到前多少名，就可以上重点中学。</p><p>这与努力赚钱买房是一个道理，有钱的出高价就能买到好位置好环境的房子。</p><p>我们再加入社会因素的影响，比如某大人物看到这个中学很抢手，很可以赚一笔，于是就设计了加分项，谁给自己送的钱多，就给谁加分，于是小孩要上重点中学不但要考高分，还要送钱加分。</p><p>同理，<strong>当好位置的商品房成为稀缺资源，</strong>各类炒房客的出现是必然的。</p><p>如果说炒房客加高价给最终住户的行为会产生泡沫，那么重点小学和公立幼儿园高昂的择校费应不应该也叫做泡沫？</p><p>尽管炒房和公立幼儿园加价成为普遍的社会现象是令人痛心的，但它们不以刚需人群的意志为转移的存在着，且与泡沫无关。</p><p>最被提及与泡沫有关的是以下两点：</p><p><strong>第一，中国的房价甚至高于某些发达国家的房价。</strong></p><p>其实，众所周知的是：不光房价高于某些发达国家，石油，高速，教育，医疗，税收等费用都远远高于某些发达国家。</p><p>而且中国的精英人群尽管所占比例不大，但是绝对数量足够大，而且精英平均收入甚至远远高于某些发达国家的收入水平。</p><p>未来 10 年还得涨，从前 10 年看后 10 年，按照经济科技发展的速度。涨价幅度可能比之前更猛。</p><p><strong>第二：租售比问题</strong></p><p>这个问题不用过多解释，使租售比更合理的方法不是只有降低房价一种，还有一种更靠谱的：<strong>房租大幅度上涨。而且已经在行动中。</strong>房租长期保持低价就像 1990 年以前的和田玉长期保持低价一样不可能。</p><p><strong>3、房价上涨造成物价上涨，人民生活变得困难。</strong></p><p>这个问题其实也不用多解释，懂经济学的该明白自然会明白，不会轻易被忽悠，不懂的解释半天也不会明白。</p><p>简单的可以这样说，物价上涨是经济过热，钞票印多了的后果。而房地产因为稀缺性和易保存比较吸金，所以吸收了大量的钞票，以至于大家光看到了房地产的飞涨。</p><p><strong>其实如果房地产交易量下降，不再具有吸金功能，那么农产品等生活必须品以及房屋租金等等就会大幅上涨。</strong>这是因为多出来的大量钞票总要有个流向，如果不被房地产吸收，就会被大蒜，绿豆，姜，及全部生活必须品的上涨来吸收。</p><p>事实也证明确实如此。2010年房产调控后，物价上涨的势头非常迅猛。</p><p><strong>那麽是不是房地产就没有泡沫呢？</strong></p><p>这个问题谁也不知道，因为到现在政府拿不出一份权威的数据来说明房地产到底有无泡沫。</p><p>但是房价高了就有风险，政府从感性上还是有清楚认识的。</p><p>注意，我们前面啰嗦了很多，现在才开始接近真相。</p><h2 id="这次调控的真实意图，防范金融风险"><a href="#这次调控的真实意图，防范金融风险" class="headerlink" title="这次调控的真实意图，防范金融风险"></a>这次调控的真实意图，防范金融风险</h2><p>辨别利益是看透一切事物真相的武器。</p><p>高房价谁是受益者？</p><p>诸侯、开发商、炒房客。</p><p><strong>独独缺了中央。</strong></p><p>这时你是否猜到中央为什么要调控？如果还猜不到没关系，听我道来。</p><p><strong>纵观古今上位者最不能容忍的是别人受益，自己被黑锅。</strong></p><p>大开发商，小开发商，大炒房客，小炒房客，地方政府都是收益者，但是风险却由中央来抗。这是一笔很不划算的买卖。</p><p>而房地产混战的局面，造成了国家队央企成员只有凭财大气粗高价拿地的份，钱花的最多，风险却抗的最大。</p><p><strong>中央深深的感觉到要想国家队受益，要想控制风险只有做到两个字：垄断。</strong></p><p><strong>【PS：一语道出真相，垄断是最赚钱的买卖，稀缺资源永远要掌控在上位者手中，就好比西游记中的蟠桃、丹药等，垄断决定话语权】</strong></p><p>提高资金门槛，让小开发商，小炒房客，有点钱的小老百姓退出这个游戏。房地产很好玩，但不是小人物应该玩的。</p><p>先让市场冷静，彻底整顿，踢出那些个跳梁小丑，然后国家队出马，绝对垄断的市场，才能够统一定价，才能够控制风险，才能够利润最大化。</p><p>既然油价高于美国是合理的，那麽房价高于美国一定也是合理的，关键在于垄断。</p><p>不仅仅是房价的垄断，因为过高的垄断定价将会使交易量下降，国家队也需要资金周转。</p><p><strong>真正厉害的，还是房租的垄断。公租房的推出是房租垄断进程的里程碑。</strong></p><p>至于苦等廉租房的同志，不要抱太大的希望。城市要建设、地铁、广场，政府大楼都要上马，钱从哪里来？不会无缘无故凭空出来。</p><p>想想小学就近上学，但是重点小学真的就近就能上吗？小学名额可以寻租，经适房、廉租房也是一个道理。</p><p><strong>篇外：统计数据</strong></p><p>说到房产泡沫的问题，就不得说说官方的统计数据。</p><p>官方的统计数据从来是可以很雷，但不可以很真。</p><p><strong>我们的统计原则基本就是：村骗乡，乡骗县，一骗骗到国务院。</strong></p><p>不知道有人去市、县、乡、村进行过社会调查没有？</p><p>社会调查是怎么一回事？</p><p>我来告诉你，所有的关于人口、收入、田地、贫困户的数据都是官方统一编写，统一口径，如果胆敢有哪个小民对调查人员乱说，那是吃不了兜着走的。</p><p>你问数据编来编去的意义在哪里呢？</p><p>意义很大，起码跟向上申请拨款是关系非常密切的。数据不假，钱从哪来？</p><p>统计数据无所谓是否真实并不重要，重要的是它是或缺利益的重要手段。</p><p>假设官方想证明房地产不存在泡沫，那么一定拿的出不存在泡沫的统计数据作证。</p><p>反之，也一样。</p><p>好比，CCTV 为了证明高空置率的结论，派出记者专门找偏远且刚刚完工的楼盘，进行了一次纯粹为了证明内部已事先得出结论的毫无科学依据的调研。</p><p>而地方政府，为了证明刚需多么强劲，也立刻拿出了选择性失明的统计数据来进行回击。</p><p>无论是左还是右，同样都是不科学，都是先有结论，再有证据。</p><p><strong>我们到底应该信谁</strong></p><p>商品房本来名字中就有<strong>商品</strong>二字，不准投资岂不是笑话？真正不准投资的那叫公房，这才是保证老百姓有房住的关键。</p><p>商品房诞生的时候就很明确是：改善居民居住<strong>条件</strong>的，现在政府怪商品房价格过高造成老百姓没房住本来就是颠倒黑白，政府不造保障老百姓居住的公房，而让老百姓去购买改善居住条件的商品房来解决本该政府解决的居住问题，政府不作为才是造成老百姓出现居住问题的罪魁祸首。</p><p>我不期望人人有房，我只希望每一个在城市里找到工作的人通过努力工作勤俭持家能在生活城市里有希望拥有一套安稳的房子来容身，不管这房子的性质是商品房、经适房、廉租房或者其他什么房子。</p><p>【网友说：你说的正是根源所在啊，政府的职责应该向无房者提供的保障房，建成经适房、两限房，被权贵占有牟利，而非要把商品房赋予稳定社会的职能。政府不是不知道问题的根源，而是不愿意放弃巨大的利益】</p><h2 id="房地产游戏的模式"><a href="#房地产游戏的模式" class="headerlink" title="房地产游戏的模式"></a>房地产游戏的模式</h2><p>三个环节：地方政府卖地、银行贷款、开发商在二级市场销售。</p><p>地方政府卖地之后，剩余的风险和收益都归银行和开发商。</p><p>地方政府卖地的款则用于地方广场、地铁、公路之类的建设和权贵的挥霍。</p><p>地方政府只负责卖地，是无风险的买卖。当然还有人企图利用流氓无产者和无知群众的群情激奋来进一步收取房产税来提高地方政府收入。</p><p>税收从来都是向下游转嫁的，政府多收出来的钱一定是通过最下游的房租来体现。</p><p>当然，也有很多明白人士大声疾呼反对房产税。</p><p>自古而今，即使最辉煌的朝代，最被广大群众津津乐道的太平盛世，普通群众也仅仅只是解决了温饱而已，包括贞观、文景、康乾。</p><p>国家的富庶都是以老百姓勒紧裤腰带为代价的。</p><p>所以，政府是不会理会部分明白人反对房产税的呼声的。</p><p>真正对房产税的顾及来自于地方政府对土地出卖前途的担忧，真是鱼与熊掌不可兼得。</p><p>尽管流氓无产者和无知群众的呼声很高，然而房产税征收一旦实际操作起来，就会变的不得人心，征收难度非常之大，实际效果难以预知。也就是说政府没有底。而如果房产税征收效果不佳，地方政府卖地收入再受到巨大影响，那就真正是得不偿失了。</p><p>就会变成赔了夫人又折兵。这样的买卖，政府是不会轻易做的。</p><p>房地产的现状是，商品房二级市场是由各种类型的开发商自由竞争的，一手房开发商之间的竞争，二手房投资客之间的的竞争。</p><p>房价为什麽在一个自由竞争的市场上能够持续上涨？因为稀缺性。不是房屋的稀缺性，而是房屋所必须占用的土地的稀缺性。</p><p>有些群情激奋的群众立刻以 6500 万套房子空置的事情提出质疑，还有 CCTV 的报道，那是要多煽情又多煽情。</p><p>我们无需说 6500 万套的真实性（明白人都知道非常离谱）和空置率的科学性。为什么不说，因为这种稀缺性跟空置率就完全没有关系。商品房的稀缺性是相对人民币而言的。人民币印多了，资金没地方去，商品房就涨价了。</p><p>垄断的市场是没有风险的，土地是完全垄断的，所以地方政府完全没有风险。</p><p>而商品房是自由竞争的市场，是具备风险属性的，尽管由于大量印钞造成了商品房的飞涨，但随着房价的高涨，风险也在积聚。</p><p>地方政府土地垄断没有风险，完全可以置身事外。</p><p>可是银行呢？属于国家的银行。</p><p>银行正在承担自由竞争市场房价高涨积聚的风险。</p><p>这是中央不允许看到的，地方政府受益，而风险全部甩给中央。</p><p>既然垄断的市场是没有风险的，那还是让房屋和土地一起垄断好了。</p><p>垄断还可以解决一个问题：社会稳定。</p><p>常被媒体和群情激奋群众所提及的一个重要问题就是:<strong>房价收入比</strong>。</p><p>大量印刷的人民币促成了房价高涨（因为商品房实在是具备了大资金需要的所有投资品属性），可是那些个巨额的资金普通老百姓并没有见到。</p><p>路人甲：我们一个月就挣 2000 多块钱，干一辈子买不起房啊。</p><p>路人乙：我一个月上万都买不起房。</p><p>媒体：一个家庭不吃不喝 22 年买一套房。</p><p>大量的疯狂印刷的人民币在哪里呢？</p><p>在精英手里。</p><p>我们再回顾一下开篇，<strong>我们奉行的是精英社会，丛林法则，金字塔式收入结构。</strong></p><p>人民币再多，也不可能流到金字塔的底端。</p><p>地方政府垄断卖地也就让百姓们发发牢骚。</p><p>而炒房客，开发商赚的盆满钵满就让生活在中下层的老百姓眼红和不能容忍。</p><p>不患寡而患不均啊。</p><p>垄断，国家队的垄断，可以解决眼红问题，也就是社会稳定问题。</p><p>还有一个最重要的问题：银行和民营开发商之间，是官与民之间的问题。</p><p><strong>而银行和国家队央企，是左兜和右兜的问题。【PS：国家垄断还有利于稳定，便是这种不均的问题，真是控民于心，得心应手】</strong></p><h2 id="房屋垄断"><a href="#房屋垄断" class="headerlink" title="房屋垄断"></a>房屋垄断</h2><p>土地是垄断的，<strong>然而房屋垄断并不是一件容易的事情。</strong></p><p>因为民间百姓手里是存在大量二手房的.当然这也是为什么调控的板子只打在二套房、投资客、炒房客身上的原因。</p><p>同样，房租的垄断也并不是一件容易的事情，因为民间百姓手中的大量二手房都具备出租的特性。</p><p><strong>要垄断，必须抓住源头。</strong></p><p>源头在哪里？</p><p>在一级市场，而不是二级市场。</p><p>房地产的垄断就是要国家队从一级市场做起，从一级市场开发着手完成对商品房开发的垄断。</p><p>一级市场，那是一个高高的门槛，民间资金，就让他该干嘛干嘛吧，房地产不是你玩的。</p><p>一级市场包括的内容是一般开发商无法参与的：城市规划，城中村改造，旧房拆迁，城市综合体开发。</p><p>可以说从规划、改造拆迁、开发、到二级市场销售，一条龙服务。</p><p>一级市场开发的最大特点就是可以创造需求：你不是有房子吗？我拆掉你的房子，看你有没有刚需。</p><p>国家垄断控制风险的意义还在于：需求可以拆出来。</p><p>以后的路，民营开发商的日子将变得越发艰难。</p><p>土地是地方政府的，商品房开发是央企和国企的。</p><p>处于金字塔下层的 40% 家庭，如果还没有一套自己的房子，那么买一套自己的房子就越发的变得不可能。</p><p>商品房将逐渐往金字塔的上层积聚。</p><p>处于金字塔下层 40% 的无房家庭将只能以租房来解决居住问题。</p><p>租金的快速上涨期即将到来，政府已经盯上了房租这块巨大的蛋糕。因为房租的收益比房产税更靠谱，更具有操作性。</p><p>公租房，呼之欲出。</p><p><strong>自古以来，民生问题的底线就是不要出现陈胜、吴广的极端情况。所以政府更在意的是农民问题。【PS：农民无底限，政府只要把握住某条红线，就不会出现陈吴之人】</strong></p><p>因为历史的改朝换代都是大饥荒引起的，无论是汉末、隋末、唐末、还是明末。农产品价格的上涨对政府的震动要远远大于房价的上涨。</p><p>农民具备最原始的力量，而他们关心的并不是三线以上城市的房价，而是能否填饱肚子。</p><p><strong>而关心自己能否拥有一套产权房的都市白领，除了呻吟一下意外，几乎是没有什么有效反抗的可能的。</strong></p><p>中国自古以来都不是人人都能有属于自己的房子，大量的丫鬟、仆妇、管家、小厮寄养在权贵人家，身体都是不自由的，何谈拥有自己的房子。</p><p>自古以来，最多的就是失去土地的农民，住在地主家做长工，又何谈属于自己的房子。</p><p>只要是有贫富差距的社会，只要存在阶级，只要存在统治和被统治，这个社会就会不以人的意志为转移的出现大量的底层居民，没有这些底层居民。权贵就不能很好的生活。【PS：没有阶级就没有人性，有人性就会有阶级】</p><p>为了权贵生活的更好，就要维持大量的底层群众。</p><p>权贵必须保证大量底层群众的基本生活，才能够让自己过得更舒服，仅此而已。这就是民生。</p><p>（呻吟一下）。君不见，天涯上多少盼着被美军解放的铁杆准汉奸，政府楼被炸，七成网民不是替死者默哀，而是一片欢呼。为什么会有这样的民意，参考前苏联，政府确实应三思。</p><p>爱国是与中华的历史分不开的，自秦统一以来，中国由封建时代转变为帝国时代，只有在项羽焚烧咸阳后，对诸侯进行了一次分封，但时间非常短暂，刘邦重新统一了天下，帝国时代经历了漫长的汉、唐、宋、元、明、清。天下一统的爱国情结是根深蒂固的。</p><p>而在秦以前，与中世纪的欧洲是极为相似的，齐国人可以到秦国做宰相，赵国人可以到燕国做将军。中世纪法国的诺曼底公爵可以到英格兰继承王位，瑞典的贵族可以到基普做大公，封建时代的国家概念并不是明显。欧洲经历了漫长的封建时代，国家观念很淡薄，能够抛弃国家货币成立欧盟就是明证。这对于漫长帝国时代，天下一统的国家是很难想象的。</p><p>爱国只跟历史文化传统有关。</p><p>1978 年越南入侵红色高棉，当时的红色高棉对内实行红色恐怖，以共产主义的名义对全国 700 万人口进行奴役和屠杀，总共屠杀了 100 万人。当越南军入侵时，受到了广大柬埔寨群众的热烈欢迎，称越南军解放柬埔寨是解放人类的战争。</p><p>红色高棉失去了民心，必然败亡。</p><p>那时，为了支援红色高棉，中越战争打响。有我国的强力支持，红色高棉仍然走向败亡。【PS：没有民众，失去民心，再强大的帝国支援也是枉然，得道多助，失道寡助也】</p><p>但我们还没有谈到所谓“造反”的地步，只是说房价如你所述——暴涨。中国的中产和以上人士将进一步携款合法外流（在房价暴涨的 09 年，中国外流人口达到历史峰值）。这一部分人利益如何保证？您觉得政府不需要考虑对么？</p><p>现在社会跟几百年前最大的不同是，世界是开放的，这得益于地理大发现和<strong>世界经济一体化</strong>，即使缅甸、朝鲜这样封闭的国家也免不了受到来自世界范围的影响。大一统的集权社会融入了西方民主的思想，同时互联网的出现也让人们对过去的思维进行了再思考。【PS：文化的普及，将有部分人会觉醒，尽管只是少部分，却可以改变世界】</p><p>尽管底层百姓出国还是一个梦想，但对于精英人群，基本上是在世界范围自由流动的。【PS：君不见，16 亿人口，真正可以出国定居的又有多少】</p><p>中国自古以来，商人都是没有地位的，商人的财产可以随时被官员没收，自古如此，至今如此，即使是今天也并没有出现私人财产神圣不可侵犯的宣言。即使出现了，也没有任何可以操作的可能。【PS：只要不是当权者，一切都是羔羊、肥猪，只要成熟便会被屠杀，屁民是韭菜，会一代一代的被收割】</p><p>明朝以后大量的商人移居海外成了华侨，现今的商人为了安全移居海外也不是什么新鲜事，不过是步明朝华侨的后尘罢了，政府会真的放在心上吗？朱元璋没有放在心上，朱棣没有放在心上，现在同样也不会放在心上。【PS：明朝首富沈万三，可能是商人外移的觉醒，富可敌国又如何？最终被收割】</p><p><strong>真正可怕的是官员一方面谋取私利一方面把亲属和存款送到国外，这其实是一种国家背叛。</strong>在国内榨干老百姓的血汗，得到的金钱却在国外挥霍。什么叫卖国，不过如此。</p><p>不过从政府要分租房市场的蛋糕而言，我有不同的看法：</p><p><strong>政府的公租房要想租出好价格，有两种方式</strong></p><p>1）减少市场可出租房源（北京就这样干了，拆迁廉价城中村）</p><p>2）提高竞争房源的成本。（所以我认为推出房产税是大概率的事情，因为政府的公租房是不需要交房产税的）</p><p>于是竞争房源的房租暴涨，政府的公租房也就可以羞羞答答的打个 9 折来安抚一些底层了，反正所有的黑锅都有竞争房源的房东背了。【PS：背后的一只大手，随时都在薅着底层百姓的羊毛】</p><p><strong>房产税的问题，我觉得政府还是慎重的</strong></p><p>1、如果采用不公平法则</p><p>公务员，垄断企业，事业单位的福利房不上税，权贵与利益集团购买囤积的大量商品房不上税，只有普通百姓上税，会加剧社会矛盾，而房产税会大幅提升租金，在公租房没有大量建起来之前，对稳定不利，维稳才是第一要务。</p><p>2、如果实行公平法则小产权房，福利房，权贵囤积房都要上税，执行难度太大，可操作性不强，阻力几乎难以逾越。如果真的收房产税，采用不公平法则的可能性最大，普通的无房百姓生活将变得非常艰难。【PS：想动贵族利益，自古没有好结束，只有强权变法可以坚持一段时间，一旦遭到反击，维稳将会破灭，收割底层老百姓，才是最好的方法，两害取其轻是也】</p><p><strong>维稳问题其实最终还是吃饭问题。</strong></p><p>房价上涨可以不买，如果房租价格不能控制，农产品价格不能控制。一旦大批群众吃饭出现了问题，维稳就无从谈起了。这个底线，还是要严守的。</p><p><strong>说到公租房问题</strong></p><p>首先还是要提到我们实行的双轨制。</p><p>从某一方面可以简单的理解为统治阶级内和统治阶级外。</p><p>也就是我们常说的体制内，体制外。</p><p>体制内:公务员、垄断企业及医院、高校、科研院所等事业单位。</p><p>体制外：外资、私企打工者，个体工商户，农民，这里面也应当包括高层的老板和最底层的长期无业人员。</p><p>我们感受最深的就是涨工资的问题，一旦政府涨工资，那就一定是体制内涨工资，跟体制外完全没有关系。</p><p>在金融危机的 08 年，大批企业关门，减薪，裁员，美国欧洲因为钱紧不得不降低公务员薪水。而这时，我们神奇的国家在干一件事：公务员普遍加薪，是为了全国百姓着想—刺激消费。【PS：应该还是以维稳为主，稳定体制内的人，让他们过得安逸，国家才会舒服，至于屁民只能紧衣缩食，有吃就行】</p><p>还有保障房问题，这个也是我们感受最深的：保障房&#x3D;公务员及垄断企业住房；解决住房问题变成了如何让领导干部住更多更大的房子，如何让体制内员工拥有足够舒适住房的问题。</p><p>体制外的群众，那是别想得到一点好处的。谁让你是被统治阶级呢。</p><p><strong>公租房的推出，也要解决两个问题：</strong></p><p>1、体制内的最下层（最下层也是统治阶级，也就是是古代官吏中的吏）员工的基本住房问题。</p><p>2、向体制外被统治的小民稳定收钱的问题。【PS：哪怕底层的吏，经济收入低，但他们可以有福利，收取租金等，便可以安逸，铁饭碗便是如此】</p><p>以国有企业为主导，发展住房租赁市场。这是现在的政策。</p><p><strong>商人还是要分的吧：</strong></p><p>红顶商人就是官商，统治阶级，那是上位者。普通商人，比如开个袜子厂赚个辛苦钱，最后袜子厂不挣钱了，官员还天天找他，让他孝敬，他就只好移民了。普通商人在中国也是海量的，有点钱，但是没一点地位。</p><p>房产税无论是持有环节征收，还是交易环节征收都是要向最终租房人转嫁的。</p><p>好比鸡饲料上涨没有可能鸡肉不涨价，但是养鸡的并没有赚更多钱。</p><p><strong>降低百姓租房困难的唯一国际通行办法就是减税。</strong>但是减税，在我国是很难行的通的。一个高增长高通胀的国家，高昂的腐败成本和巨大的浪费将导致国家必须维持高税收才能维持运转，GDP 保 8 实际上是必须的也是迫不得已的。维持正常的运转，维持庞大的消耗税收而不是创造税收的公务员队伍，没有 GDP 快速的增长怎么可能呢。</p><h2 id="政府为什么要调控"><a href="#政府为什么要调控" class="headerlink" title="政府为什么要调控"></a>政府为什么要调控</h2><p>难道就为了给你说的 P 民面子？</p><p>如果房价一直暴涨，不更符合食利阶层的利益？房价低价一起彪～</p><p>真不知道你仔细看了没有。我通篇也没下过调控是为了给 P 民面子的结论。</p><p>调控的根本原因还是中央在房地产的游戏中没有得到好处。调控是为了让中央的国家队参与进来，成为主体。</p><p><strong>垄断的目的还在于能够控制价格，为了维稳，</strong>中央是不希望暴涨的，但也不希望不涨。</p><p><strong>回头还说公租房</strong></p><p>在私企打过工的都知道，毫无归属感可言，老板脑袋一发热，随时让员工卷铺盖卷走人。那是要多没保障有多没保障。原因是社会关系，关键客户，都掌握在老板一个人手里，员工就是打个下手，一不爽，就换人呗。</p><p>统治者可知道不能这么用人的。一个庞大的国家机器要想正常运转，必须得让手下的和自己的利益一致。如果自己吃肉，手下的连汤都没得喝，这个机器就转不动了。</p><p>因此，在房价高涨的时代，保障房才成为中央默认的公务员房、垄断企业房。</p><p>公租房首要解决的就是手下里面最底层人士的住房问题。【PS：跟着国家走，有肉吃有汤喝，但凡出现公务员增加，必定是因为福利太好了】</p><p>我认为针对于体制内来说，无论是公务员，事业单位，还是国有企业的初级员工，都可以通过所在单位申请公租房，公租房的租金会略低于市场，主要是单位一定会提供补贴。</p><p>体制外对公租房的申请就没有那么幸运了。</p><p><strong>钱的问题，地方政府也想到了解决的办法。</strong></p><p>在卖地时就要求开发商配套建设一定比例的经适房、廉租房或公租房。【PS：一旦形成垄断，就形成绝对的控制权，开发商想要有活干，必须要满足政府的要求，你占大头，但小头必须有我一份】</p><p>然而，羊毛出在羊身上，开发商不可能做赔本的买卖。经适房好说，反正是卖个住户，大不了利润很低，顶多挣得少点。而廉租房和公租房就纯粹是只见投入不见产出的（开发商可没资金没耐心收租子）。廉租房和公租房的建设成本必须加到所建的商品房身上，这肯定会抬高房价。【PS：一消一涨，最后倒霉的永远是底层百姓】</p><p>关键是拿地成本逐年上涨，孝敬的资金也在逐年上涨，在加上多出来的廉租房和公租房建设成本，房价不可能无限抬高的。开发商也需要资金回笼周转。房价越高风险越大这是无论政府，开发商，炒房客和买房群众都有的共识。只是房价多高才是高，不同的人理解是不同的。</p><p>显然，把大量廉租房和公租房的建设寄托在开发商配套身上是完全行不通的，不仅不能解决住房问题，还让本来就高企的房价更加雪上加霜。</p><p><strong>体制内公务员、垄断企业和事业单位的员工住房问题是不难解决的，因为有政府行为的强制意志在里面。</strong></p><p>1、地方划拨土地，征集开发商建经适房、公租房。</p><p>2、地方政府强制要求开发商建配套经适房、公租房，建设成本就转嫁给购买商品房的冤大头吧。</p><p>3、体制内单位自有土地，集资建房。</p><p>多管齐下，体制内人员的住房不难解决，甚至体制内人员每人住好房子大房子多套房子的问题都不难解决。处于金字塔的中上层，他们俯瞰着芸芸众生。</p><p>处于金字塔下层的体制外的广大群众怎么办？</p><p>体制内员工的住房舒适性和投资获利是首要保证的，不然光让干活不给好处，怎么能让手下听话呢？</p><p>体制外广大群众的住房问题也要解决，这关系到社会稳定。</p><p>能不能拿出一个办法，即解决了群众住房问题，又可以从群众手里长期获取收益？</p><p>细水长流收租子的事情开发商做不了，但政府可以做。</p><p>公租房，如果解决了钱的问题，面向广大群众的公租房的推出，将会取得双赢的局面。</p><p>既然房地产开发最肥的肉留给了国家队，国家队也应该投身到公租房的建设中来。</p><p>国家队全面进场之前，大鱼小鱼虾米泥鳅，皆可得利。</p><p>不把小鱼虾米泥鳅赶出池塘，市场无法控制，风险无法控制，公租房建设也无从谈起。</p><p>二套房首付提高到 50%，第三套房停止贷款，小开发商的清理整顿，民营企业在招拍挂中无论价高价低都无法取得土地，等等一系列重拳直击小鱼虾米。</p><p><strong>土地将回到国家队手中，这个世界将变得清爽。</strong></p><p>让时光倒流到 80、90 年代，我们的地方政府守着蕴藏着巨大财富的金矿、锡矿、铜矿却过着贫穷的日子。</p><p>没有资金，矿山是没有办法变成财富的。于是招商引资，为了 GDP,为了解决就业问题，出台了各种优惠政策，于是外商堂而皇之的走进来了。成为了这些矿山的主人。</p><p>5 年，7 年或者 10 年，外商享受的免税期满的时候，外商卷着巨额财富走了，留下了一个个废弃的充满危险的大坑。这是血琳琳的教训，政府没有理由不吸取。外资、私企、小业主总有一天会让他们清场，尽管这一天晚来了十几年。</p><p>在土地日益稀缺的今天，房租难道不是可持续产出的金矿？让炒房客、投资客、民企开发商见鬼去吧。</p><p>宁愿住桥洞的早晚要当盲流处理的</p><p>逃离城市基本是一部分人被淘汰掉，选择，离开，而又有更多的人冲进去。</p><p>房租收入下降基本是做梦才会出现的事情，国家队的进场就是不让房租下降。</p><p>商品房和公租房的区别实际就是土地性质的不同：一个是出让，一个是划拨。</p><p>出让那必须是招拍挂（招标、拍卖、挂牌），那必须是天价。</p><p>划拨就基本算是白给，收钱就是象征性的意思意思。</p><p>是商品房还是公租房，土地的性质说了算，地方政府说了算。跟房屋质量没有关系。</p><p>一套房子假设 20000 一平，房子的价值也就占 30%，剩余的都是土地的价值。</p><h2 id="无耻-提通过税收调节房价、收入"><a href="#无耻-提通过税收调节房价、收入" class="headerlink" title="无耻 - 提通过税收调节房价、收入"></a>无耻 - 提通过税收调节房价、收入</h2><p>今天看到搜狐上一篇文章说到<strong>要通过征税来调节贫富差距，提出这个方案的人不知是无知还是故意，如果政府听了这种无耻参谋的建议，不知道多少老百姓会活的更惨。</strong></p><p>假设出台又一个新税种，无论它叫什么，我们暂定为财产税。既然有了新税种，就要定任务，那好了，为了这个税种制定了年上缴多少多少的任务。【PS：无论国家出台什么样的新政策，都会有地方或部门争功，定任务，表示积极拥护】</p><p>实操的时候，执行的工作人员发现一旦轮到权贵脑袋上的事就没办法执行，你执行，他先让你下课。</p><p>但是任务必须完成，那还是从普通老百姓身上打主意吧。于是政策就完全走样了，非但起不了劫富济贫的目的，反而加重了穷人的负担。</p><p>往近里说，个人所得税，挣的是谁的税？权贵没看见交，月薪 3000 块的工薪层可一个都跑不了。3000 块月薪上缴的个人所得税你看着不多，可对于养孩子糊口的老百姓来说，哪怕 10 块钱都是重要的。他们可没有资本像月薪上万的小资一样动不动花 500 块钱泡个吧。</p><p>个人所得税是有任务的，工作人员必须完成任务，税别管是局级干部交的，还是连孩子幼儿园都上不起的穷光蛋交的，总之完成任务就是好样的。既然局长的税收不上来，就要从穷光蛋身上加倍收上来。</p><p>往远里说，王安石变法是怎么失败的，以史为鉴可以知得失。王安石的初衷难道不是好的吗，可结果怎么样呢？只有一个——民不聊生。</p><p>书生误国啊。</p><p>许多兄弟关心房价什么时候会涨。</p><p><strong>那么先看看这次调控后都出现了什么样的现象。</strong></p><p>1、全国房产成交量大幅下降</p><p>2、一线城市房价略有下跌，但并不持续，到现在基本跌不动了</p><p>3、多数二三线城市房价不跌反涨，成交量逐渐回升</p><p>4、大多数二线以上城市租金持续上涨</p><p>5、农产品价格有上涨迹象，大蒜、姜等小品种农产品遭遇爆炒。</p><p>6、变化莫测的政策导致精英阶层出现移民潮</p><p>还有什么，欢迎大家补充。</p><p>农产品价格的上涨是很值得警惕的。想买房子但嫌房子贵的都市白领对农产品的价格很不敏感，但是金字塔最底层的最大多数群众是很敏感的。领导们也很敏感。这牵扯到相当大比例人口的吃饭问题，稳定压倒一切。【PS：治国如治家，当家里的人都吃不上饭时，这个家就散了，稳定压倒一切，真乃绝句】</p><p>农产品价格的抬头将会导致物价全面上涨，在不引起质变的前提下，房价作为商品也不例外。<strong>这个引起质变的前提是出现饥荒的极端情况，这样的几率在现在社会很少。</strong>尽管干旱和洪涝使农产品大幅度减产，但是农产品还可以进口，国家还有粮食储备，保证全国人民填饱肚子还是不存在问题的。</p><p>一线城市仍然沉默，国家队在积极运动。二三线城市的房价上涨的成交量的回升却给了市场一个明确的信号。这是资金运动的规律。国家队对一线城市的布局，迫使资金流向二三线城市。二三线城市相对（与一线城市相比）不高的价位给出了较大上升空间的预期。</p><p>全国富人买北京上海，全省富人买省会，房价的合理性已经不能用简单的本地平均收入来衡量。<strong>精英阶层的购买力才是关键。</strong></p><h2 id="明年物价进入持续上涨期是一个不容回避的问题"><a href="#明年物价进入持续上涨期是一个不容回避的问题" class="headerlink" title="明年物价进入持续上涨期是一个不容回避的问题"></a>明年物价进入持续上涨期是一个不容回避的问题</h2><p>在资金总量不变的前提下，巨量资金推动农产品价格上涨或者推动房价上涨是一个必须的选择。</p><p>今年政府用行政手段严厉打击蒜和绿豆价格的暴炒，基本上没有起到作用，资金有自己的运作规律，光靠拿张悟本出气也不能解决问题。</p><p>二三线城市的房价的上涨使与一线城市的差价缩小，为一线城市的发力提供了动能。</p><p>无论你喜欢还是不喜欢，都不是以人的意志为转移的。</p><p>许多人心怀房价肯定会跌回 2004 年的美好愿望，刻舟求剑似的思维错过了一次次购房的机会。在患得患失中，在牛刀的号角声中，在任志强的大炮声中，迷失了自我。</p><p>任何事物都是有其规律性的。关键是否有一双慧眼能够穿透重重的迷雾。</p><p>假设你是个投资客，你非要去石家庄和长沙买房子，结果发现不怎么升值，怨天怨地：</p><p>石家庄作为一个二线省会怎么会不涨？长沙的房价怎么那么低？</p><p>我们知道，北京的房子是全国有钱人买的，省会的房子是全省的有钱人买的。但是当省会城市距离一线大城市在 6 个小时高速以内，省里的有钱人的资金就会流向一线大城市，而不是省会。河北的富人一定会选择在北京投资房产，湖南的富人一定会选择广州深圳投资房产。</p><p>假设你是一个投资客，你去昆明旅行，发现昆明的房价甚至高过重庆，很不理解。你很疑惑昆明这么小的西部边陲城市投资价值在哪里？</p><p><strong>昆明是云南省内唯一的大城市，</strong>且相邻的二线以上城市离云南省都比较远。云南地州资源丰富，虽然穷人占的比例大，富人的数量却也不少。昆明南有滇池，北有长虫山，作为一个 700 万人口的城市，土地资源非常稀缺。所以贵，一定有贵的原因。便宜一定有便宜的道理。</p><p>问：楼主针对南昌的房价做个分析吗？从刚公布的 100 个城市房子均价看，南昌 5k 每平左右，是高了还是低了？</p><p>答：<strong>对于不了解的城市不敢妄下断言。没到现场调查就没有发言权啊。</strong>房价会不会涨还要看地方政府的规划。比如广州拥有大量的城中村，其周边有较多的大城市，广州的房价就比北京和上海低。如果广州的城中村一旦大规模拆迁，房价将会大幅上涨。比如南宁东盟贸易自由港的概念使南宁的房价涨幅惊人。南昌的地理位置，政府规划，发展前景，江西富裕人口的多少，都是决定房价的因素。</p><h2 id="我们是第二个日本吗"><a href="#我们是第二个日本吗" class="headerlink" title="我们是第二个日本吗"></a>我们是第二个日本吗</h2><p>供求关系？供求关系，现在是谁在决定？</p><p>国家！</p><p>国家的经济结构决定的。</p><p>制造业的资金都进入房地产了。能不涨吗？普通人有几个可以够炒房资格的？</p><p>— — — — — — — —</p><p>问：日本当初也是供求关系！供求关系的根本也不应脱离国家的经济实力！！还暴涨？怎么涨？再涨都够去美国买房了！！你这不扯淡么</p><p><strong>中国和日本最大的不同在于日本的货币是开放的，</strong>中国的不是，是不能自由兑换的。</p><p>暴涨是相对于钱而言的，不是相对于实际购买力而言的。</p><p>80 年代工资 200 多块钱一个月的时候，是不能想象 90 年代末北京城区 5000 每平米的房价的。那时候万元户已经是富人的代表了。</p><p>90 年代末工资 1000 块钱的时候是不能想象现在 30000 一平米的房价的。90年代的 100 万绝对是富裕群体。可现在连个中产都算不上。</p><p>货币的持续贬值你没有考虑。</p><p>— — — — — — — —</p><p>问：说真的！！楼主背后还有这么多信众。。。。真傻啊！中国的房地产，根本就是政府控制的！什么贵有贵的道理！国家投资那里，那里地价就高！国家决心打压地产！明天就能见效！！关键就看他愿不愿意打！</p><p>— — — — — — — —</p><p>秦始皇也是想怎么样就怎么样，结果国家没了。</p><p>李世民懂得按规律治理国家，所有才有贞观盛世。</p><p>— — — — — — — —</p><p>问：再反驳楼主一句！！在中国的土地，可不稀缺！只是没开发罢了！！中国与世界不同！ok？13 亿人！！用十三亿的居住权作为市场竞争的资本。那太可怕了！真的！！！如果可能，中国绝对可以产出世界第一贵的地价！为什么？这么多人需要房子。能不涨吗？呵呵！多少有点扯淡！！别再提供求关系了！供求根本是平衡的！！</p><p>中国有 13 亿人口，960 万平方公里土地，土地一点不稀缺。</p><p>但假设你在北京西城上班，让你去塔特拉马干买房子，你愿意去吗？</p><p>全国有点钱的都要在一线城市和省会城市买房子，所以才会稀缺。</p><p>大兴安岭有大量的土地，哪个有钱愿意跑去置业呢？</p><p>中国经济发展不平衡，牺牲全国大多数城市和乡村，来保证北上广深及大部分省会城市的繁荣才是造成土地稀缺的愿意。</p><p>土地有的是，房子有的是，但好位置的土地和房子并不多。</p><p>一方面大量的小县城和乡镇、村庄人口锐减，因为缺乏谋生手段不得不背景离乡外出打工，另一方面超大型城市越来越拥挤，土地资源越来越稀缺。【PS：还是那句话，土地位置与稀缺，绝定价值】</p><p>这就是中国集中发展极少数标杆城市所造成的呀，也是因为如此，才造成了中国金子塔式的收入结构，贫富差距越来越悬殊。</p><h2 id="民为何，官为何"><a href="#民为何，官为何" class="headerlink" title="民为何，官为何"></a>民为何，官为何</h2><p>很多人很疑惑，贪官越来越多，根本不把老百姓的利益放在心里，这些贪官即使被曝光了，还能继续当官。这是为什么呢？</p><p>首先了解一下老百姓，也就是民到底是什么？</p><p>民就是牛羊，古代的时候，官员管理百姓叫做牧。官员管理百姓就是替君主放牧，只要保证牛羊不逃跑，不骚乱，那么就是合格的官员。</p><p>秦始皇暴政，百姓揭竿而起，可是陈胜起事后基本视民众如草芥，项羽屠杀平民比始皇更残暴。</p><p>萧何是一个很贤德的人，对百姓很好，赢得了很高的名声。刘邦在广武山和项羽对峙，得知了萧何在关中深受百姓爱戴，就疑心萧何要造反。一个君主爱民如子是为了百姓的支持，江山永固，一个臣子对老百姓好是不是要造反呢？于是派人去调查萧何。</p><p>萧何是个聪明人，感觉到刘邦已经不信任他了。于是赶紧改变工作作风，开始霸占百姓的田产，上大街欺负漂亮的妇女同志，并且派自己的子女上前线给刘邦做人质。</p><p>刘邦看到了萧何的行为非常高兴，知道萧何不会造反就放心了。百姓不是牛羊是什么？</p><p>在红色高棉统治下的柬埔寨人，民连牛羊都不如呀。</p><p>波尔布特同志坚持共产主义的按需分配，取消了货币。于是市场经济完全没有了。群众完全变成了按阶级分配了。</p><p>阶级只分为两种，波尔布特老板及其打手是绝对的统治阶级，其他人为被统治阶级，也可以称为奴隶阶级。统治阶级对奴隶阶级不爽可以直接拿 ak47 突突。</p><p>柬全国 700 万人口被波老板突突死了 100 万，当然不光是突突，还有活埋。</p><p>以至于越南派了 10 万军队侵略柬埔寨，受到了柬埔寨人民的夹道欢迎，称为解放人类的战争。</p><p>公道自在人心。【PS：人心其实并不准确，应该说公道自在民心，自古如此，民众基数太大，只有他们的力量才是无限的】</p><p>我们的今天本来就是历史的延续，前人经验和智慧的总结，不是一句话就可以抹杀的。</p><p>因为秦以后漫长帝国时代的大一统，才会把中央集权延续到现在。</p><p>而西方封建时代延续到地理大发现，诸侯割据王国、公国、侯国林立为现代的西方提供了民主制度的可能。</p><p>在制度上完全的不可比性，使向国际接轨成为了笑话。</p><p>我们看到的结果就是，物价上涨与西方接轨，甚至堂而皇之的超过西方，体制外的工资则与非洲结果，也算是国际化了。</p><p>— — — — — — — —</p><p>问：大家听过那个西三旗的有名的限价房旗胜家园吧！外表看起来那么光鲜，地段也不是特别偏，紧邻城铁，当然是被人疯抢都抢不到的两限房呀~！还不是质量问题一大堆。政府安排的政策房也是要开发商建的，哪个开发商没肉吃还能保证把房子盖好？？所谓检测都 TMD 是虚的。</p><p>— — — — — — — —</p><p>这是肯定的，开发商都追求利润最大化。</p><p>政府建设两限房限制开发商利润，开发商必然偷工减料，政府都知道怎么回事，必须睁一只眼闭一只眼，否则这个政策就执行不下去了</p><p>对于渴望拥有一套产权住房的都市小白领对希望房价狂降已经到了歇斯底里的程度，他们赞成农产品价格放开，让资金炒作农产品，而离开房地产市场。</p><p>理由很简单，一套房子一涨就是几十万甚至上百万，而大米小麦，一斤就算涨到 10 块，也根本不能影响到自己的生活质量。</p><p>如果我国农产品价格是开放的，资金流向大米、小麦、猪肉，并且允许囤积，房地产一定会下跌的，这是毫无疑问的。</p><p>但是，我们看到的绝不是 10 块钱一斤的大米、小麦，而是 500 块钱、1000 块钱一斤的大米、小麦。</p><p>我国将会出现大面积的饥荒，几千万甚至上亿的底层人士饿死街头，社会将出现大的动荡。【PS：无论哪个时代，粮食永远是第一位，民以食为天，国以民为本】</p><p>而产权房屋价格的上涨牺牲的主体只是体制外部分都市白领的利益，换来的不过是网络上没完没了的牢骚和咒骂。</p><p>巨量资金必须有地方去，如今面临的房地产和农产品之间的选择，你认为政府会怎么做？</p><p>体制内中层、高层可以分到多套福利房，低层至少能够分到一套保障房，即使最不重要部门的底层员工，搞到由单位补贴的公租房是没有问题的。</p><p>体制外的高层、中层，以他们的资金实力买多套房子都是不成问题的。</p><p>农民，分配有宅基地。国家要稳定，首先就是要农民稳定，因此我国只有农民能够分到土地自己盖房子。</p><p>军人，会享受到比公务员更好的福利，让军人享受更高标准的福利待遇，国家有深刻的认识。</p><p>那么只有体制外的都市中下层群众才是高房价的受害者，可是这个群体的地位真的很微不足道。</p><p>这些既无稳定工作（低层都市白领失业的概率还是蛮大的）又无自己的房产的都市小白领是金子塔底层被压榨的对象，甚至远远不如交通便利地区的农民。</p><p>没有这个群体的存在，金字塔上层的权贵是无法享受舒适的生活的。</p><p><strong>社会需要底层群体用巨大的付出和极少的收获为金字塔上层群体服务。</strong></p><p>当然，在巨大的付出后，有少数人会从低层脱颖而出，爬到金子塔的中层、甚至上层。</p><p>这些少数人带给了底层群体奋斗的希望。</p><p>拥有一套属于自己产权的房子，就只有一条路：从金字塔的底层往上爬。这条路很艰辛，并且会越来越艰辛，但总有希望。</p><p>— — — — — — — —</p><p>问：楼主有一点没说透彻，那就是白领的工资普遍较高，他们有能力买房子，但是受到几千年以来的小农经济思想的约束，他们普遍认为买房子不划算，占便宜心里普遍严重，别看他们外表光鲜，其实还都是一帮农民</p><p>— — — — — — — —</p><p>我说的是买不起房的低收入小白领。</p><p>高薪白领不买房的不多吧，都是网上吹的吧。</p><p>高薪白领一般还是有自住房的，只是有人不愿意投资房产。每个人想法不同而已。</p><p>— — — — — — — —</p><p>问：请问楼主所说的低薪白领一个月赚多少钱算底薪？就拿我说吧，我 06 年买的房子，当时月薪 3000 元，这在当时算不算低薪？但是我买房了，还是一个人买的，当然老爸赞助了点。每个月还完月供兜里就剩几十元，硬扛下来了。目前年薪 12 万，我老婆年薪 6 万？这算不算高薪？如果我当时没买房子，以我们 2 个人的收入当下也买的起，只不过生活负担重一些。所以请楼主明示，什么是低薪？</p><p>— — — — — — — —</p><p>兄弟，你所描述的是另外一个问题。先说说你所说的这个问题，再谈谈什么叫低薪。</p><p>先说 06 年你月薪 3000 买房子的问题。</p><p>我们打一个比方：</p><p>假设 80 年代，咱们两个月薪都是 100 块。你喜欢清朝的瓷盘子，咬咬牙，一年用好不容易攒下的 100 块钱买了清朝瓷盘子。我喜欢缝纫机，用一年好不容易攒的钱买了一个缝纫机。</p><p>市场有价值发现功能。显然，80 年代清代瓷盘子的价值没有得到发现。进入 90 年代，随着社会的发展，社会财富的增加，钞票也大幅度增加。清代瓷盘子的市场价值发现出来了，瓷盘子价格开始大幅上涨，你的瓷盘子由 100 块涨到 1000 块。而我买的缝纫机已经淘汰了。</p><p>瓷盘子具备投资品的一切属性，能够吸收社会的富裕资金，而缝纫机没有这个功能。我很眼红，我虽然买的起这个瓷盘子（因为 90 年代我的工资由 100 涨 到了 800），但是我觉得价格太高了，没有买。而你的瓷盘子在 90 年代为你挣了 900 元钱。</p><p>时光又到 21 世纪，社会资金越来越多，钞票越印越多，可瓷盘子在市场上越来越少（都被收藏了），于是瓷盘子涨到了 1 千万一个，我即使想买瓷盘子再也买不起了，而不是嫌价格高的问题。而你已经成为了千万富翁。那个瓷盘子也并没有因为 1 千万的价格实在太高而暴跌，相反价格仍以每年 20% 的速度增长。</p><p>06 年你在房价价值发现的初期买了房子，就像 90 年代你用 1000 块买清代瓷盘子。如果你的工资不变，或者变化不足够大，现在你将买不起房子，就像你在 21 世纪不可能买的起瓷盘子。</p><h2 id="收、入高低"><a href="#收、入高低" class="headerlink" title="收、入高低"></a>收、入高低</h2><p>再说说收入高低，不同城市，不同消费水平，对收入高低有着不同的理解。</p><p>我们举北京为例。</p><p>反映真实居住成本的是房屋租金，而不是房价。</p><p>在北京生活，一家三口的通常情况。</p><p>一个位置能够满足上班条件的两居室租金大约 3000 元，小孩花费没有 3000 块是下不来的，再加上夫妻俩 2000 元的基本生活花费，也就是说 8000 月收入的 家庭，刚好能达到收支平衡。</p><p>如果是体制外的都市白领，这个收入是很可怜的，因为还要考虑到失业问题，</p><p>并且应付万一发生的意外支出。所以每月能有 2000 元的结余是必须的，那么 10000 元是在北京生活的基本水平。</p><p>而购买商品房所支付的金钱是要远高于租金成本的，因为你买的不是房屋居住权，而是房屋的产权，一定会出现溢价。</p><p>如果你现在的家庭收入能够再买得起一套房子，那么你的收入水平应该至少是小康，甚至达到中产。</p><p>— — — — — — — —</p><p>问：楼主啊，你有一个概念错误：清代的瓷盘子是收藏品是古董，其价值是由拥有瓷盘子的收藏家决定的，而房子是商品（我指的是商品房，不是公租房之类的保障房），其价值远没有古董增值速度快，所以说收藏品和商品是有区别的。</p><p>— — — — — — — —</p><p>呵呵，商品房当然和清代磁盘是不同的，升值空间不同，投资对象也不同，但价值发现的道理是一样的。投资品的基本属性：稀缺性是共有的，当然稀缺的程度不同。</p><p>我所讲的是投资品的价值发现，而不是商品房&#x3D;清代瓷盘。</p><p>— — — — — — — —</p><p>问：此外，您还没有正面回答我什么是低薪，我今年 30 多岁，如果我刚毕业肯定是拿底薪的，往最坏了想，我毕业几年到今年混的不好，今年只赚 3000 元一个月，我就买不起房么？如果你觉得是，那么你错了，我仍然可以买的起，我会到比较偏远的地段去买房子，比如密云，延庆等买套小户型二手房，那里的房价我仍然可以支付月供，当然我还是要像老爸要点钱付首付的。可是如果我不这么想，觉得去哪里不划算，在四环里买房子多好啊！那么我可能就买不起了，因为在四环里买房已经超出了我的能力，那么请问我买不起四环里的房子是房价的问题呢还是我的问题呢？是不是说我买不起四环里的房子就是我买不起房？</p><p>— — — — — — — —</p><p>如果我们买首套房，不是为了投资。我们买房总有个基本的要求：</p><p>有一个自己的家，并且上班相对方便。</p><p>如果你在长城饭店上班，你跑去密云买个房子。首先你上班就成问题。</p><p>如果我月薪 3000 块，我甚至不能在密云买房子（因为也上万了），但我可以在山西的某个县城买套房子。问题是我买这套房子干什么？</p><p>— — — — — — — —</p><p>问：我的中心思想是：北京的白领普遍买的起房子，但是有一部分不买，其原因是想花最少的钱去获得最好的地段，最好的楼层，最好的朝向的房子，这是划算不划算的问题，不是买得起买不起的问题，当然有的人会说：买房了，得病了怎么办？失业了怎么办？一大堆怎么办！那么请问：既然你知道早晚要见马克思，为什么现在还活着啊？一刀了断了算了，呵呵</p><p>— — — — — — — —</p><p>你说的这类人其实是因为贪婪和恐惧，幸运不会垂青即贪婪又恐惧的人。用天涯的语言来说：就是传说中的傻空。</p><p>— — — — — — — —</p><p>问：楼主，一对有工作经验的年轻的北京白领夫妻月收入只有 8000 元？这 是怎么统计的？您的统计结果不准啊，我的结论是 10000-12000 元&#x2F;月是北京标准的白领夫妻的月收入，那么这笔钱能不能买房子？能，能不能付首付？可能不能，首付款怎么来的？一部分是父母赞助的。作为父母就要把自己的孩子扶上马，再送一程，这和啃老没关系。</p><p>— — — — — — — —</p><p>呵呵，这个也不好这么说，不同行业间的薪水差距实在太大了。</p><p>比如一个有 6、7 年职业学校的教师或者一个有 5、6 年电脑分销经验的产品经理（都是大学毕业），他们辛辛苦苦干一年多点的也就 7、8 万块。他们都不晓得招商银行随便一个客户经理轻轻松松年薪几十万。</p><p>同是大学毕业，同是 5、6 年工作经验，北京几十万年薪收入的人不少，但一个月只挣 3、4000 块的数量更庞大。</p><p>— — — — — — — —</p><p>问：房价是由土地决定的，而土地是咱们这个国家的根本，当年不就因为要改变土地的属性，才有了我们的党。凡房屋也都是只有土地的使用权，土地属于国家，说收回的话不管你有无房证更不会和住房者商量（如拆迁），这个性质绝不变，想下，对有房者如此，会为了没有房子的而制定均衡均分的土地政策下降房价吗？现在贫富分化越来越严重，真买的起房的考虑的重点不会是贷款，买不起的，房价跌去三分之一也还是买不起，不要看政府如何了，如果能少贷款或不贷款买处房的话就买吧，人早晚得有个安身之所，不要贪大求全，战争或地震来了房子不值钱，但万一战争或地震不来呢？</p><p>— — — — — — — —</p><p>没错，就是这个意思，如果战争来临，你手中的钱也变成废纸。</p></div><div class="tab-pane" id="tab_57-2"><div class="tag-plugin colorful note" ><div class="title">📝&nbsp;人人都有居住权。房子是用来住的，不是用来炒的。</div><div class="body"><p>如果大家都这么想就好了，就不会有炒房客这个职业了。</p></div></div><div class="tag-plugin colorful note" ><div class="title">📝&nbsp;房价不是由统计局的平均收入决定的。而是精英的平均收入决定的。</div><div class="body"><p>21 年的新闻，腾讯应届生房补每月涨至 4000 元，南山区房东笑了：该涨房租了！</p></div></div><div class="tag-plugin colorful note" ><div class="title">📝&nbsp;我们的统计原则基本就是：村骗乡，乡骗县，一骗骗到国务院。</div><div class="body"><p>从疫情期间的统计就能窥见一二。</p></div></div><div class="tag-plugin colorful note" ><div class="title">📝&nbsp;真正可怕的是官员一方面谋取私利一方面把亲属和存款送到国外，这其实是一种国家背叛。</div><div class="body"><p>今生无悔入华夏，家住加利福尼亚。</p></div></div><div class="tag-plugin colorful note" ><div class="title">📝&nbsp;如果真的收房产税，采用不公平法则的可能性最大。</div><div class="body"><p>真收房产税了，苦恼的一个是房东，一个就是租户了，房东被收税，自然成本就要摊到租户身上了。</p></div></div><div class="tag-plugin colorful note" ><div class="title">📝&nbsp;我们感受最深的就是涨工资的问题，一旦政府涨工资，那就一定是体制内涨工资，跟体制外完全没有关系。</div><div class="body"><p>2024 年全国退休人员基本养老金提高 3% 喔，我还有 40 年才能退休呢。</p></div></div><div class="tag-plugin colorful note" ><div class="title">📝&nbsp;降低百姓租房困难的唯一国际通行办法就是减税。</div><div class="body"><p>不扣税哪来的退休金呢。</p></div></div><div class="tag-plugin colorful note" ><div class="title">📝&nbsp;但凡出现公务员增加，必定是因为福利太好了。</div><div class="body"><p>KK 大神没想到的是，现在大环境不好，考公人多了，大家更趋向于稳定了。</p></div></div><div class="tag-plugin colorful note" ><div class="title">📝&nbsp;社会需要底层群体用巨大的付出和极少的收获为金字塔上层群体服务。</div><div class="body"><p>这个很一针见血，虽然不想承认，但这就是事实，大部分人都是牛马的一生。</p></div></div></div></div></div>]]></content>
    
    
    <summary type="html">天涯神贴 KK 大神三部曲的第一部</summary>
    
    
    
    <category term="读书笔记" scheme="https://blog.felicx.eu.org/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="天涯神贴" scheme="https://blog.felicx.eu.org/tags/%E5%A4%A9%E6%B6%AF%E7%A5%9E%E8%B4%B4/"/>
    
  </entry>
  
  <entry>
    <title>CANape 之快速上手</title>
    <link href="https://blog.felicx.eu.org/1037199537.html"/>
    <id>https://blog.felicx.eu.org/1037199537.html</id>
    <published>2024-07-11T14:44:32.000Z</published>
    <updated>2024-07-13T02:29:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CANape 是一款用于 ECU 测量、标定、诊断以及 ADAS 传感器数据采集的工具型软件。搞车载总是离不开 CANape，这里也做个记录，方便自己后面遗忘了，导致用起来费时费事。</p><h2 id="使用准备"><a href="#使用准备" class="headerlink" title="使用准备"></a>使用准备</h2><p>CANape 使用的前提条件是需要 License。只有连接设备与电脑，通过电脑识别查看 License，激活相关 license，这样 CANape 才能正常使用。</p><h3 id="License-获取"><a href="#License-获取" class="headerlink" title="License 获取"></a>License 获取</h3><p>License 有几种，一种是硬件设备自带 License，一种是 Vector 会提供 Activation Key，通过 Vector License Client 就可以激活。这里不过多赘述（都要花钱的）。</p><h3 id="驱动安装"><a href="#驱动安装" class="headerlink" title="驱动安装"></a>驱动安装</h3><p>CANape 使用的前提是需要硬件设备 VN1630A 或 1640A 等。针对这些设备，需要安装相对应的驱动才能正常使用。</p><p><img src="/assets/post/20240714_3nOikFLF.webp" alt="img"></p><p>运行驱动安装包，选择已有硬件的驱动进行安装，如下所示：</p><p><img src="/assets/post/20240714_cgGY3qwu.webp" alt="img"></p><p>如果没有安装驱动或者安装不正确，则硬件盒的状态灯亮红色，如下所示；安装成功，则硬件盒的状态灯亮绿色。</p><p><img src="/assets/post/20240714_0MwBK2Dl.webp" alt="img"></p><p>状态灯正常了，但是所使用的通道指示灯仍然为红色，如何变成绿色？ 跳到下面看『硬件通道配置』。</p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h3><p>首先打开软件，点击 Devices -&gt; New Device，给工程命名，选择存放路径、A2L 和 elf 文件；<br>然后点击 Devices -&gt; New from database -&gt; database，选择 A2l 文件，硬件设备和通道，关联 A2L 和 elf 文件。</p><p><img src="/assets/post/20240714_cFUxjbJD.webp" alt="img"></p><h3 id="测量配置"><a href="#测量配置" class="headerlink" title="测量配置"></a>测量配置</h3><p>点击 Start -&gt; Measurement configuration，配置所需观测或变量的信号，比如观测量的观测周期等信息；</p><p><img src="/assets/post/20240714_WmzNNKe1.webp" alt="img"><br>然后在图形页面添加观测量和标定量，选择相应的显示形式，比如数值格式或图形格式等。</p><p><img src="/assets/post/20240714_OBZcDYhA.webp" alt="img"></p><h2 id="硬件通道配置"><a href="#硬件通道配置" class="headerlink" title="硬件通道配置"></a>硬件通道配置</h2><p>使用到的通道指示灯亮红色，原因是 CANape 硬件未配置或配置不正确。硬件通道配置有三个关键点：</p><h3 id="第一点"><a href="#第一点" class="headerlink" title="第一点"></a>第一点</h3><p>在 Hardware Config 中，选择正确的软硬件通道映射关系，根据硬件设备的实际使用情况来设置，使用 Channel1 则按下图所示配置：</p><p><img src="/assets/post/20240714_ArgEe9xj.webp" alt="img"></p><h3 id="第二点"><a href="#第二点" class="headerlink" title="第二点"></a>第二点</h3><p>在 Device configuration -&gt; Transport Layer 中：</p><ul><li>首先是 CAN 总线参数设置，需要根据实际的 XCP 基于的通讯协议来设置，如果是 CAN 通讯，要确定是 CAN 还是 CAN FD，其波特率是多少。</li><li>然后是通讯的 ID，也需要根据实际情况来，注意这里的 Master是指上位机，相当于CANape 端，Slave 是指所连接的 ECU，因此从 ECU 角度来说，CAN ID Master 就是 ECU 的接收 ID，而 CAN ID Slave 就是 ECU 的发送 ID。</li><li>最后就是长度 DLC，Max DLC required 是否勾选，若需要勾选但不勾选，亲验会影响通道指示灯的状态。<br><img src="/assets/post/20240714_B2Mjv6p6.webp" alt="img"></li></ul><h3 id="第三点"><a href="#第三点" class="headerlink" title="第三点"></a>第三点</h3><p>在最初新建 New Device 时，当在前面选定了基于 CAN 的 XCP 后，到下图所示的这一页要注意 CAN 类型的选择，默认是 CAN，但如果是 CAN FD，那么需要选择 New network；</p><p><img src="/assets/post/20240714_sbG173VD.webp" alt="img"><br>然后选择正确的硬件通道，在 CAN Bus Parameter 处，点击 Change…；</p><p><img src="/assets/post/20240714_BQaGDMcJ.webp" alt="img"><br>选择 ISO CAN FD，设置正确的波特率和采样点即可。</p><p><img src="/assets/post/20240714_BJQj88K5.webp" alt="img"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上三个点中，个人感受第三个点最容易被忽视，而这点配置不对就会导致无法建立正确的通讯，通道指示灯一直为红色。这点配置结果其实在 Device configuration 中 的 Device 是没有 CAN FD 的选项的。</p><p><img src="/assets/post/20240714_59PApALq.webp" alt="img"></p><p>此时若要正确配置，需要重新对上述的第三点进行配置。一方面在 Device configuration 中的 Device 有了 CAN FD 的选项，且可以更新波特率和采样点信息。另一方面硬件盒子的通道指示灯就从红转绿，通讯能够建立。</p><p><img src="/assets/post/20240714_vHkDJiQS.webp" alt="img"></p><p>更具体地可以实际测试通讯是否建立。在 Device Configuration -&gt; Protocol 中点击 Test connection，一切硬件通道配置成功，则会显示 Communication established。</p><p><img src="/assets/post/20240714_ZLNZJuva.webp" alt="img"></p>]]></content>
    
    
    <summary type="html">快速上手 CANape，主要是工程建立和配置</summary>
    
    
    
    <category term="自动驾驶" scheme="https://blog.felicx.eu.org/categories/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6/"/>
    
    
    <category term="can" scheme="https://blog.felicx.eu.org/tags/can/"/>
    
    <category term="canape" scheme="https://blog.felicx.eu.org/tags/canape/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Stellar 主题装修笔记</title>
    <link href="https://blog.felicx.eu.org/4199909915.html"/>
    <id>https://blog.felicx.eu.org/4199909915.html</id>
    <published>2024-06-26T13:48:29.000Z</published>
    <updated>2024-07-18T15:28:29.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Stellar 主题全面的配置文档可参考源码作者：<a href="https://xaoxuu.com/wiki/stellar/#start">Xaoxuu</a></p></blockquote><h2 id="一键配置"><a href="#一键配置" class="headerlink" title="一键配置"></a>一键配置</h2><p>Stellar 配置文件在 themes\stellar_config.yml 下面，一般不要直接修改，我们可以在博客根目录下建一个 _config.stellar.yml，在这个文件中的配置信息优先级高于主题文件夹中的配置文件。</p><p>然后直接把 themes\stellar_config.yml 里面的复制粘贴进来，再对 _config.stellar.yml 修改即可。</p><h2 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h2><div class="tag-plugin tabs" align="center"id="tab_44"><div class="nav-tabs"><div class="tab active"><a href="#tab_44-1">效果展示</a></div><div class="tab"><a href="#tab_44-2">开始部署</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_44-1"><div class="tag-plugin image"><div class="image-bg"><img src="/assets/post/20240717_dgYsMvMN.webp"/></div></div></div><div class="tab-pane" id="tab_44-2"><ul><li>_config.yml 文件中，最后一行加入以下指令：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;https://cdn.staticfile.org/lxgw-wenkai-screen-webfont/1.6.0/lxgwwenkaiscreen.css&quot;&gt;</span></span><br></pre></td></tr></table></figure></li><li>在 _config.stellar.yml 中找到 style.font-family，修改以下内容：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">style:</span></span><br><span class="line">    <span class="attr">font-family:</span></span><br><span class="line">        <span class="attr">logo:</span> <span class="string">&#x27;&quot;LXGW WenKai Screen&quot;, system-ui, ...&#x27;</span></span><br><span class="line">        <span class="attr">body:</span> <span class="string">&#x27;&quot;LXGW WenKai Screen&quot;, system-ui, ...&#x27;</span></span><br></pre></td></tr></table></figure></li></ul></div></div></div><h2 id="添加运行时间-访问量"><a href="#添加运行时间-访问量" class="headerlink" title="添加运行时间&#x2F;访问量"></a>添加运行时间&#x2F;访问量</h2><div class="tag-plugin tabs" align="center"id="tab_45"><div class="nav-tabs"><div class="tab active"><a href="#tab_45-1">效果展示</a></div><div class="tab"><a href="#tab_45-2">开始部署</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_45-1"><div class="tag-plugin image"><div class="image-bg"><img src="/assets/post/20240717_Pf7zbp7f.webp"/></div></div></div><div class="tab-pane" id="tab_45-2"><p>_config.stellar.yml 文件下，找到 footer，在 content: 之后添加以下代码：</p><div style="max-height: 300px; max-width: 100%; overflow: auto;"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">content</span>: | # 支持 <span class="title class_">Markdown</span> 格式</span><br><span class="line">  &lt;center&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  © 2024</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: bold;  auto;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/FelicxFoster&quot;</span>&gt;</span>Felicx<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  使用 <span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: bold;  auto;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/FelicxFoster/hexo-theme-stellar&quot;</span>&gt;</span>Stellar<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  创建</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!--不蒜子计数器--&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span>=<span class="string">&quot;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!--添加一个访问量--&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>总访问 <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: bold;&quot;</span>&gt;</span>113701<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 次 | 本页访问 <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_page_pv&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: bold;&quot;</span>&gt;</span>326<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 次<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;runtime_span&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> runtime_span = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;runtime_span&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">function</span> <span class="title function_">show_runtime</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 调用定时器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="built_in">setTimeout</span>(show_runtime, <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> seconds = <span class="number">1000</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> minutes = seconds * <span class="number">60</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> hours = minutes * <span class="number">60</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> days = hours * <span class="number">24</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> years = days * <span class="number">365</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> todayYear = today.<span class="title function_">getFullYear</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> todayMonth = today.<span class="title function_">getMonth</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> todayDate = today.<span class="title function_">getDate</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> todayHour = today.<span class="title function_">getHours</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> todayMinute = today.<span class="title function_">getMinutes</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> todaySecond = today.<span class="title function_">getSeconds</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> t1 = <span class="title class_">Date</span>.<span class="title function_">UTC</span>(<span class="number">2018</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// UTC时间，月份从0开始</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> t2 = <span class="title class_">Date</span>.<span class="title function_">UTC</span>(todayYear, todayMonth, todayDate, todayHour, todayMinute, todaySecond);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> diff = t2 - t1;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> diffYears = <span class="title class_">Math</span>.<span class="title function_">floor</span>(diff / years);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> diffDays = <span class="title class_">Math</span>.<span class="title function_">floor</span>((diff / days) - diffYears * <span class="number">365</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> diffHours = <span class="title class_">Math</span>.<span class="title function_">floor</span>((diff - (diffYears * <span class="number">365</span> + diffDays) * days) / hours);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> diffMinutes = <span class="title class_">Math</span>.<span class="title function_">floor</span>((diff - (diffYears * <span class="number">365</span> + diffDays) * days - diffHours * hours) / minutes);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> diffSeconds = <span class="title class_">Math</span>.<span class="title function_">floor</span>((diff - (diffYears * <span class="number">365</span> + diffDays) * days - diffHours * hours - diffMinutes * minutes) / seconds);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 更新显示时间的span元素内容</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        runtime_span.<span class="property">innerHTML</span> = <span class="string">&quot;🦉营业：&quot;</span> + diffYears + <span class="string">&quot; 年 &quot;</span> + diffDays + <span class="string">&quot; 天 &quot;</span> + diffHours + <span class="string">&quot; 小时 &quot;</span> + diffMinutes + <span class="string">&quot; 分钟 &quot;</span> + diffSeconds + <span class="string">&quot; 秒🦉&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">show_runtime</span>(); <span class="comment">// 初次调用函数以启动定时器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;/center&gt;</span><br></pre></td></tr></table></figure></div></div></div></div><h2 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h2><div class="tag-plugin tabs" align="center"id="tab_46"><div class="nav-tabs"><div class="tab active"><a href="#tab_46-1">效果展示</a></div><div class="tab"><a href="#tab_46-2">开始部署</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_46-1"><div class="tag-plugin image"><div class="image-bg"><img src="/assets/post/20240717_d0T7b9jk.webp"/></div></div></div><div class="tab-pane" id="tab_46-2"><p>目前 Staller 主题集成多种评论功能插件，包括 beaudar、utterances、giscus、twikoo、waline、artalk。今日来探讨 waline。</p><ul><li>配置 waline，参考我的另一篇文章：<a href="http://localhost:4000/3164120416.html">Hexo 博客美化</a></li><li>在博客配置文件 _config.stellar.yml 中启用 waline 评论<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######## Comments ########</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="attr">service:</span> <span class="string">waline</span> <span class="comment"># beaudar, utterances, giscus, twikoo, waline, artalk</span></span><br><span class="line">  <span class="attr">comment_title:</span> <span class="string">快来参与讨论吧~</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Waline</span></span><br><span class="line">  <span class="comment"># https://waline.js.org/</span></span><br><span class="line">  <span class="attr">waline:</span></span><br><span class="line">    <span class="attr">js:</span> <span class="string">https://gcore.jsdelivr.net/npm/@waline/client@3.1.3/dist/waline.js</span></span><br><span class="line">    <span class="attr">css:</span> <span class="string">https://gcore.jsdelivr.net/npm/@waline/client@3.1.3/dist/waline.css</span></span><br><span class="line">    <span class="attr">meta_css:</span> <span class="string">https://gcore.jsdelivr.net/npm/@waline/client@3.1.3/dist/waline-meta.css</span></span><br><span class="line">    <span class="comment"># Waline server address url, you should set this to your own link</span></span><br><span class="line">    <span class="attr">serverURL:</span> <span class="string">https://waline.js.org/</span> <span class="comment"># 这里改成自己的链接</span></span><br><span class="line">    <span class="attr">locale:</span></span><br><span class="line">      <span class="attr">placeholder:</span></span><br><span class="line">        <span class="string">😎嗨，朋友，留下脚印再走呗。</span></span><br><span class="line">    <span class="attr">reaction:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul></div></div></div><h2 id="使用-fontawesome-动态图标"><a href="#使用-fontawesome-动态图标" class="headerlink" title="使用 fontawesome 动态图标"></a>使用 fontawesome 动态图标</h2><div class="tag-plugin tabs" align="center"id="tab_47"><div class="nav-tabs"><div class="tab active"><a href="#tab_47-1">效果展示</a></div><div class="tab"><a href="#tab_47-2">开始部署</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_47-1"><div class="tag-plugin image"><div class="image-bg"><img src="/assets/post/20240717_48Cu4aEY.gif"/></div></div></div><div class="tab-pane" id="tab_47-2"><p>因为 Stellar 不再内置 fontawesome 图标库，所以我们需要手动添加。_config.yml 文件中，最后一行加入以下指令：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css&quot;&gt;</span></span><br></pre></td></tr></table></figure><p>就可以愉快的使用 fontawesome 动态图标了。比如配置 footer 栏的图标，_config.stellar.yml 文件下，找到 footer</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">social:</span></span><br><span class="line">    <span class="attr">github:</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">&#x27;&lt;i class=&quot;fa-solid fa-github fa-brands fa-bounce&quot;&gt;&lt;/i&gt;&#x27;</span></span><br><span class="line">      <span class="attr">title:</span> <span class="string">&#x27;Github&#x27;</span></span><br></pre></td></tr></table></figure></div></div></div><h2 id="给超长代码块增加滚动条"><a href="#给超长代码块增加滚动条" class="headerlink" title="给超长代码块增加滚动条"></a>给超长代码块增加滚动条</h2><div class="tag-plugin tabs" align="center"id="tab_48"><div class="nav-tabs"><div class="tab active"><a href="#tab_48-1">效果展示</a></div><div class="tab"><a href="#tab_48-2">开始部署</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_48-1"><div class="tag-plugin image"><div class="image-bg"><img src="/assets/post/20240718_V8t7MRaI.webp"/></div></div></div><div class="tab-pane" id="tab_48-2"><p>首先判断代码块是否过长，如果是，则设置最大高度并开启滚动。<br>在 themes\stellar\source\js\ 中新建 custom.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给超长代码块增加滚动条</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">adjustCodeBlockHeight</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 选择所有的.md-text元素</span></span><br><span class="line">    <span class="keyword">var</span> codeBlocks = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.md-text&#x27;</span>);</span><br><span class="line">    <span class="comment">// 遍历每个.md-text元素</span></span><br><span class="line">    codeBlocks.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">block</span>) &#123;</span><br><span class="line">      <span class="comment">// 检查是否包含.highlight类的子元素，且父元素高度超过500px</span></span><br><span class="line">      <span class="keyword">var</span> highlightBlocks = block.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.highlight&#x27;</span>);</span><br><span class="line">      highlightBlocks.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">highlightBlock</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (highlightBlock.<span class="property">clientHeight</span> &gt; <span class="number">800</span>) &#123;</span><br><span class="line">          highlightBlock.<span class="property">style</span>.<span class="property">maxHeight</span> = <span class="string">&#x27;300px&#x27;</span>;</span><br><span class="line">          highlightBlock.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">&#x27;auto&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">adjustCodeBlockHeight</span>()</span><br></pre></td></tr></table></figure><p>在 _config.yml 文件中，最后一行加入以下指令：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="comment"># 自定义js</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">type=&quot;text/javascript&quot;</span> <span class="string">src=&quot;/js/custom.js?1&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/custom.js?1&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，Stellar 主题有 tabs 分栏容器，如果在容器中写入长代码，这段 js 是不生效的。<br>因为这时候生成的 HTML 结构可能与原始代码块不同，导致 JavaScript 选择器无法正确找到目标元素。<br>解决方法也很简单，可以直接在 Markdown 文件中使用内联样式来设置代码块的最大高度和滚动条。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">&quot;max-height: 300px; max-width: 100%; overflow: auto;&quot;</span>&gt;</span><br><span class="line">  <span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string">  // 这里是你的代码</span></span><br><span class="line"><span class="string">  function example() &#123;</span></span><br><span class="line"><span class="string">    console.log(&quot;Hello, world!&quot;);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure></div></div></div><h2 id="文章面包屑显示字数-阅读时长-标签"><a href="#文章面包屑显示字数-阅读时长-标签" class="headerlink" title="文章面包屑显示字数|阅读时长|标签"></a>文章面包屑显示字数|阅读时长|标签</h2><div class="tag-plugin tabs" align="center"id="tab_49"><div class="nav-tabs"><div class="tab active"><a href="#tab_49-1">效果展示</a></div><div class="tab"><a href="#tab_49-2">开始部署</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_49-1"><div class="tag-plugin image"><div class="image-bg"><img src="/assets/post/20240718_Mji4xV4J.webp"/></div></div></div><div class="tab-pane" id="tab_49-2"><ul><li>在 themes\stellar\layout_partial\main\article_banner.ejs 中的 <code>// 3.left.bottom</code> 处，新增代码：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.left.bottom</span></span><br><span class="line">el += <span class="title function_">partial</span>(<span class="string">&#x27;dateinfo&#x27;</span>)</span><br><span class="line"><span class="comment">//新增：字数显示|阅读时长显示</span></span><br><span class="line">el += <span class="string">&#x27;&lt;div class=&quot;flex-row&quot; id=&quot;page-words&quot;&gt;&lt;span style=&quot;padding: 4px;&quot;&gt;本文：&#x27;</span> + <span class="title function_">wordcount</span>(page.<span class="property">content</span>) + <span class="string">&#x27;字&lt;/span&gt;&lt;span class=&quot;sep updated&quot; style=&quot;padding: 4px;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;text updated&quot; style=&quot;padding: 4px;&quot;&gt;阅读时长：&#x27;</span> + <span class="title function_">min2read</span>(page.<span class="property">content</span>) + <span class="string">&#x27;分&lt;/span&gt;&lt;/div&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">//新增：标签显示</span></span><br><span class="line"><span class="keyword">if</span> (page.<span class="property">layout</span> == <span class="string">&quot;post&quot;</span> &amp;&amp; page.<span class="property">tags</span> &amp;&amp; page.<span class="property">tags</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  el += <span class="string">&#x27;&lt;div class=&quot;flex-row&quot; id=&quot;tag&quot;&gt;&#x27;</span>; <span class="comment">// 将标签容器的创建移动到条件内部</span></span><br><span class="line">  el += <span class="string">&#x27; &lt;span&gt;&amp;nbsp标签：&lt;/span&gt;&#x27;</span>;</span><br><span class="line">  el += <span class="title function_">list_categories</span>(page.<span class="property">tags</span>, &#123;</span><br><span class="line">    <span class="attr">class</span>: <span class="string">&quot;cap breadcrumb&quot;</span>,</span><br><span class="line">    <span class="attr">show_count</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">separator</span>: <span class="string">&#x27;&amp;nbsp; &#x27;</span>,</span><br><span class="line">    <span class="attr">style</span>: <span class="string">&quot;none&quot;</span></span><br><span class="line">  &#125;);</span><br><span class="line">  el += <span class="string">&#x27;&amp;nbsp&lt;/div&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 themes\stellar\source\css_custom.styl 文件最后添加：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 文章内字数统计&amp;阅读时长 */</span></span><br><span class="line">.<span class="property">bread</span>-nav div#page-words span.<span class="property">sep</span>:before &#123;</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">bread</span>-nav div#page-words span.<span class="property">updated</span> &#123;</span><br><span class="line">  <span class="attr">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">bread</span>-<span class="attr">nav</span>:hover div#page-words span.<span class="property">updated</span> &#123;</span><br><span class="line">  <span class="attr">visibility</span>: visible;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></div></div></div><h2 id="页面底部字数统计"><a href="#页面底部字数统计" class="headerlink" title="页面底部字数统计"></a>页面底部字数统计</h2><div class="tag-plugin tabs" align="center"id="tab_50"><div class="nav-tabs"><div class="tab active"><a href="#tab_50-1">效果展示</a></div><div class="tab"><a href="#tab_50-2">开始部署</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_50-1"><div class="tag-plugin image"><div class="image-bg"><img src="/assets/post/20240717_Pf7zbp7f.webp"/></div></div></div><div class="tab-pane" id="tab_50-2"><ul><li>安装 hexo-wordcount 插件：npm i hexo-wordcount –save</li><li>themes&#x2F;stellar&#x2F;layout&#x2F;_partial&#x2F;main&#x2F;footer.ejs 文件中，找到 <code>//footer</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// footer</span></span><br><span class="line">el += <span class="string">&#x27;&lt;div class=&quot;text&quot;&gt;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (content) &#123;</span><br><span class="line">  el += <span class="title function_">markdown</span>(content)</span><br><span class="line">&#125;</span><br><span class="line">el += <span class="string">&#x27;&lt;/div&gt;&lt;/footer&gt;&#x27;</span></span><br><span class="line"><span class="keyword">return</span> el</span><br></pre></td></tr></table></figure>在 <code>el += &#39;&lt;/div&gt;&lt;/footer&gt;&#39;</code> 前面加上：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">el += <span class="string">&#x27;&lt;span class=&quot;totalcount&quot;&gt;共发表 &#x27;</span> + site.<span class="property">posts</span>.<span class="property">length</span> + <span class="string">&#x27; 篇Blog · &lt;/span&gt;&lt;span class=&quot;post-count&quot;&gt;总计 &#x27;</span> + <span class="title function_">totalcount</span>(site) + <span class="string">&#x27; 字&lt;/span&gt;&#x27;</span></span><br></pre></td></tr></table></figure></li><li>在 themes\stellar\source\css_custom.styl 文件最后添加：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 页面底部字数统计 */</span></span><br><span class="line">.<span class="property">post</span>-count &#123;</span><br><span class="line">    scrollbar-<span class="attr">width</span>: none;</span><br><span class="line">    <span class="attr">color</span>: <span class="title function_">var</span>(--text-p2);</span><br><span class="line">  &#125;</span><br><span class="line">.<span class="property">totalcount</span> &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="title function_">var</span>(--text-p2);</span><br><span class="line">  &#125;</span><br><span class="line">.<span class="property">page</span>-footer &#123;</span><br><span class="line">    text-<span class="attr">align</span>: center;</span><br><span class="line">    <span class="attr">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">100</span>%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></div></div></div><h2 id="侧边栏欢迎语"><a href="#侧边栏欢迎语" class="headerlink" title="侧边栏欢迎语"></a>侧边栏欢迎语</h2><div class="tag-plugin tabs" align="center"id="tab_51"><div class="nav-tabs"><div class="tab active"><a href="#tab_51-1">效果展示</a></div><div class="tab"><a href="#tab_51-2">开始部署</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_51-1"><div class="tag-plugin image"><div class="image-bg"><img src="/assets/post/20240718_TRl8phP1.webp"/></div></div></div><div class="tab-pane" id="tab_51-2"><ul><li>在 themes\stellar_data\widgets.yml 文件中新增一项侧边栏配置，写下你的网站欢迎语。也可以引用开放接口，如【今日诗词】。<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 欢迎语</span></span><br><span class="line"><span class="attr">welcome:</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">markdown</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">🎉欢迎</span></span><br><span class="line">  <span class="attr">content:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    本站托管于Vercel, 加载缓慢请耐心等待，欢迎大家畅所欲言。</span></span><br><span class="line"><span class="string">    &lt;hr style=&quot;border: 1px solid black; background-color: black;&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;span id=&quot;jinrishici-sentence&quot;&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;script src=&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li><li>修改主题配置 _config.stellar.yml，设置欢迎语出现的具体位置<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 站点主结构树</span></span><br><span class="line"><span class="attr">site_tree:</span></span><br><span class="line">  <span class="comment"># -- 列表类页面 -- #</span></span><br><span class="line">  <span class="comment"># 主页配置</span></span><br><span class="line">  <span class="attr">home:</span></span><br><span class="line">    <span class="attr">leftbar:</span> <span class="string">recent</span></span><br><span class="line">    <span class="attr">rightbar:</span> <span class="string">welcome</span></span><br></pre></td></tr></table></figure></li></ul></div></div></div><h2 id="新增-memos-说说功能"><a href="#新增-memos-说说功能" class="headerlink" title="新增 memos 说说功能"></a>新增 memos 说说功能</h2><div class="tag-plugin tabs" align="center"id="tab_52"><div class="nav-tabs"><div class="tab active"><a href="#tab_52-1">效果展示</a></div><div class="tab"><a href="#tab_52-2">开始部署</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_52-1"><div class="tag-plugin image"><div class="image-bg"><img src="/assets/post/20240718_Q2I3bzeH.webp"/></div></div></div><div class="tab-pane" id="tab_52-2"><p>想要实现 memos 功能，首先需要注册一个账号。注册账号可以使用别人已经搭建好的 memos，也可以自行搭建 memos（需要有服务器，我就不折腾了）。这里直接采用的<a href="https://dusays.com/561/">杜老师</a>的 memos。</p><ul><li>查看<a href="https://dusays.com/561/">教程</a>，注册一个自己的账号</li><li>注册好后，在教程下面评论让杜老师帮忙查看自己的 ID</li><li>在博客 source 文件夹下，新建 bb 文件夹，在文件夹里新建 index.md<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline api:https://s.dusays.com/api/v1/memo?creatorId=&#123;你的ID&#125;&amp;limit=10 type:memos  avatar:/assets/icon/20240713_rtEVzmVj.webp %&#125;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure></li><li>可以建个图标跳转哔哔页面，找到 _config.stellar.yml 中的 footer，新增一条记录<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">social:</span></span><br><span class="line">    <span class="attr">bb:</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">&#x27;&lt;i class=&quot;fa-solid fa-globe-asia fa-bounce&quot;&gt;&lt;/i&gt;&#x27;</span></span><br><span class="line">      <span class="attr">title:</span> <span class="string">&#x27;哔哔广场&#x27;</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">/bb</span></span><br></pre></td></tr></table></figure></li><li>如果需要在博客侧边栏 sidebar 中展示 memos，首先在 themes\stellar_data\widgets.yml 中新增一条记录<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 哔哔</span></span><br><span class="line"><span class="attr">memos-du:</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">timeline</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">🥂哔哔广场</span></span><br><span class="line">  <span class="attr">api:</span> <span class="string">https://s.dusays.com/api/v1/memo?creatorId=&#123;你的ID&#125;</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">memos</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="string">user,footer</span></span><br></pre></td></tr></table></figure></li><li>然后在 _config.stellar.yml 设置让其生效<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">site_tree:</span></span><br><span class="line">  <span class="comment"># -- 列表类页面 -- #</span></span><br><span class="line">  <span class="comment"># 主页配置</span></span><br><span class="line">  <span class="attr">home:</span></span><br><span class="line">    <span class="attr">leftbar:</span> <span class="string">recent</span></span><br><span class="line">    <span class="attr">rightbar:</span> <span class="string">memos-du</span></span><br></pre></td></tr></table></figure></li></ul></div></div></div><h2 id="展示最新评论"><a href="#展示最新评论" class="headerlink" title="展示最新评论"></a>展示最新评论</h2><div class="tag-plugin tabs" align="center"id="tab_53"><div class="nav-tabs"><div class="tab active"><a href="#tab_53-1">效果展示</a></div><div class="tab"><a href="#tab_53-2">开始部署</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_53-1"><div class="tag-plugin image"><div class="image-bg"><img src="/assets/post/20240718_4dSIYFxu.webp"/></div></div></div><div class="tab-pane" id="tab_53-2"><p>我评论使用的是 waline，所以下面是搭配 waline 食用的，如果有其他评论插件的，参考<a href="https://weekdaycare.cn/posts/twikoo-new/">星日语大佬的文章</a>。</p><ul><li>在 themes\stellar\source\js\services\ 目录下新建 waline_new_comment.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> default_avatar = <span class="string">&#x27;default_avatar.jpg&#x27;</span>; <span class="comment">// 替换成你的默认头像地址</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> els = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;ds-waline&#x27;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; els.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> el = els[i];</span><br><span class="line">    <span class="keyword">const</span> limit = <span class="built_in">parseInt</span>(el.<span class="title function_">getAttribute</span>(<span class="string">&#x27;limit&#x27;</span>)) || <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> apiBase = el.<span class="title function_">getAttribute</span>(<span class="string">&#x27;api&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (apiBase == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> api = apiBase + <span class="string">&#x27;/comment?type=recent&amp;count=&#x27;</span> + limit;</span><br><span class="line"></span><br><span class="line">    utils.<span class="title function_">request</span>(el, api, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      data.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> cell = <span class="string">&#x27;&lt;div class=&quot;timenode&quot; index=&quot;&#x27;</span> + index + <span class="string">&#x27;&quot;&gt;&#x27;</span>;</span><br><span class="line">        cell += <span class="string">&#x27;&lt;div class=&quot;header&quot;&gt;&#x27;</span>;</span><br><span class="line">        cell += <span class="string">&#x27;&lt;div class=&quot;user-info&quot;&gt;&#x27;</span>;</span><br><span class="line">        cell += <span class="string">&#x27;&lt;img src=&quot;&#x27;</span> + (item.<span class="property">avatar</span> || default_avatar) + <span class="string">&#x27;&quot; onerror=&quot;this.onerror=null;this.src=\&#x27;&#x27;</span> + default_avatar + <span class="string">&#x27;\&#x27;;&quot;&gt;&#x27;</span>;</span><br><span class="line">        cell += <span class="string">&#x27;&lt;span&gt;&#x27;</span> + item.<span class="property">nick</span> + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span><br><span class="line">        cell += <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        cell += <span class="string">&#x27;&lt;span&gt;&#x27;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>(item.<span class="property">time</span>).<span class="title function_">toLocaleString</span>() + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span><br><span class="line">        cell += <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        cell += <span class="string">&#x27;&lt;a class=&quot;body&quot; href=&quot;&#x27;</span> + item.<span class="property">url</span> + <span class="string">&#x27;#&#x27;</span> + item.<span class="property">objectId</span> + <span class="string">&#x27;&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;&#x27;</span>;</span><br><span class="line">        cell += item.<span class="property">comment</span>.<span class="title function_">replace</span>(<span class="regexp">/&lt;a\b[^&gt;]*&gt;(.*?)&lt;\/a&gt;/g</span>, <span class="string">&#x27;$1&#x27;</span>);</span><br><span class="line">        cell += <span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">        cell += <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        $(el).<span class="title function_">append</span>(cell);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>在 _config.stellar.yml 中找到 data_services，新增一行记录<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 内置服务，按需加载（页面内用到了就会加载，没有用到就不会加载）</span></span><br><span class="line"><span class="attr">data_services:</span></span><br><span class="line">  <span class="attr">waline:</span></span><br><span class="line">    <span class="attr">js:</span> <span class="string">/js/services/waline_new_comment.js</span></span><br></pre></td></tr></table></figure></li><li>在 themes\stellar_data\widgets.yml 中创建小组件<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最新评论</span></span><br><span class="line"><span class="attr">new_comment:</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">timeline</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">最新评论</span></span><br><span class="line">  <span class="attr">api:</span> <span class="string">https://example.yourdomain.com</span> <span class="comment"># 此处为 Waline server，末尾不要加 /</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">waline</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">16</span> <span class="comment"># 限制获取数量，默认为 10</span></span><br></pre></td></tr></table></figure></li><li>编辑 _config.stellar.yml，让最新评论展示在右侧<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 站点主结构树</span></span><br><span class="line"><span class="attr">site_tree:</span></span><br><span class="line">  <span class="comment"># -- 列表类页面 -- #</span></span><br><span class="line">  <span class="comment"># 主页配置</span></span><br><span class="line">  <span class="attr">home:</span></span><br><span class="line">    <span class="attr">rightbar:</span> <span class="string">new-comment</span></span><br></pre></td></tr></table></figure></li></ul></div></div></div><h2 id="部署友链"><a href="#部署友链" class="headerlink" title="部署友链"></a>部署友链</h2><div class="tag-plugin tabs" align="center"id="tab_54"><div class="nav-tabs"><div class="tab active"><a href="#tab_54-1">效果展示</a></div><div class="tab"><a href="#tab_54-2">开始部署</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_54-1"><div class="tag-plugin image"><div class="image-bg"><img src="/assets/post/20240718_FCHZ8VxT.webp"/></div></div></div><div class="tab-pane" id="tab_54-2"><p>Stellar 支持两种友链，一种是静态友链，一种是动态友链。<br>实现静态友链很简单，新建 source_data\links\ios_developer.yml，将友链数据写进去即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">title:</span> <span class="string">某某某</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://</span></span><br><span class="line">  <span class="attr">cover:</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">  <span class="attr">description:</span></span><br></pre></td></tr></table></figure><p>在 source\friends\index.md 中写入</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">%</span> <span class="string">friends</span> <span class="string">ios_developer</span> <span class="string">%</span>&#125;</span><br></pre></td></tr></table></figure><p>动态友链比较麻烦一点，参考<a href="https://sumorio.com/wiki/Hexo/302Dynamic-friend-chain.html">苏末了大佬的教程</a>。</p><ul><li>Fork <a href="https://github.com/xaoxuu/issues-json-generator">xaoxuu&#x2F;issues-json-generator</a>  仓库，名称设为 friends，任务栏点击 settings 下滑到 issue 点击勾选 √ ，此时任务栏出现 Issue，点击任务栏 Aciton，点击 i understand；</li><li>点击任务栏 settings，左侧选择 Action 下的 General，下滑到 Workflow Permissions，勾选读写权限 Read and write permissions，然后 save 保存；</li><li>点击任务栏 Issue，点击 Label，删除现有标签，新增并保留以下四个标签：<code>active</code>、<code>suspend</code>、<code>404</code>、<code>checklist</code>；</li><li>点击任务栏 Code 点击进入 config.yml 文件，点击修改仓库名和地址；<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要抓取的 issues 配置</span></span><br><span class="line"><span class="attr">issues:</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">xaoxuu/friends</span> <span class="comment"># 仓库持有者/仓库名（改成自己的）</span></span><br><span class="line">  <span class="attr">label:</span> <span class="string">active</span> <span class="comment"># 筛选具有 active 标签的 issue ，取消此项则会提取所有 open 状态的 issue</span></span><br><span class="line">  <span class="attr">sort:</span> <span class="comment"># updated-desc # 排序，按最近更新，取消此项则按创建时间排序</span></span><br></pre></td></tr></table></figure></li><li>点击 issue → New issue → Get Started，填入你的基本信息，label 设置为 <code>active</code>  → submit new issue 提交；</li><li>添加后，等待一会，点击任务栏 Code 进入 output 分支，查看 v2 目录下的 data.json 文件，出现刚才新建的 issue 内容则设置成功；</li><li>要想使用，需要在 source\friends\index.md 中写入<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">%</span> <span class="string">friends</span> <span class="string">api:https://api.vlts.cc/output_data/v2/你的github用户名/你的github仓库名</span> <span class="string">%</span>&#125;</span><br><span class="line"><span class="comment"># 示例:&#123;% friends api:https://raw.githubusercontent.com/FelicxFoster/friends/output/v2/data.json %&#125;</span></span><br></pre></td></tr></table></figure></li></ul></div></div></div><h2 id="友链朋友圈"><a href="#友链朋友圈" class="headerlink" title="友链朋友圈"></a>友链朋友圈</h2><div class="tag-plugin tabs" align="center"id="tab_55"><div class="nav-tabs"><div class="tab active"><a href="#tab_55-1">效果展示</a></div><div class="tab"><a href="#tab_55-2">开始部署</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_55-1"><div class="tag-plugin image"><div class="image-bg"><img src="/assets/post/20240718_ebeOOMKZ.webp"/></div></div></div><div class="tab-pane" id="tab_55-2"><p>友链朋友圈就是展示友链朋友发布的文章，参考<a href="https://xaoxuu.com/wiki/stellar/third-party/fcircle.html">xaoxuu大佬的教程</a>。</p><ul><li>Fork <a href="https://github.com/xaoxuu/friends-rss-generator">xaoxuu&#x2F;friends-rss-generator</a>  仓库，大佬的教程说是可以 Fork 原作者 <a href="https://github.com/Rock-Candy-Tea/hexo-circle-of-friends">Rock-Candy-Tea&#x2F;hexo-circle-of-friends</a> 的仓库，但是我用原作者的一直部署不了；</li><li>设置自己的友链页面地址和主题类型，修改 hexo_circle_of_friends&#x2F;fc_settings.yaml 文件<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> &#123;<span class="attr">link:</span> <span class="string">&quot;https://blog.felicx.eu.org/friends/&quot;</span>, <span class="attr">theme:</span> <span class="string">&quot;stellar&quot;</span>&#125;  <span class="comment"># 友链页地址1，修改为你的友链页地址</span></span><br></pre></td></tr></table></figure></li><li>打开 Issues 友链抓取功能，修改 hexo_circle_of_friends&#x2F;fc_settings.yaml<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">GITHUB_FRIENDS_LINKS:</span> &#123;</span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>, <span class="comment"># true 开启github issue兼容</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">&quot;volantis&quot;</span>,  <span class="comment"># volantis/stellar用户请在这里填写volantis</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">&quot;FelicxFoster&quot;</span>,  <span class="comment"># 填写你的github用户名</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">&quot;friends&quot;</span>,  <span class="comment"># 填写你的github仓库名</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">&quot;open&quot;</span>,  <span class="comment"># 填写抓取的issue状态(open/closed)</span></span><br><span class="line">    <span class="attr">label:</span> <span class="string">&quot;active&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>点击 Actions -&gt; I understand my workflows, go ahead and enable them -&gt; update-friends-posts -&gt; Enable workflow -&gt; 点击 Run workflow -&gt; Run workflow 进行第一次运行；</li><li>运行时可能会遇到报错 <code>ERROR: No matching distribution found for uvicorn==0.14.0</code>，就是安装依赖项的问题，<a href="https://github.com/Rock-Candy-Tea/hexo-circle-of-friends/issues/145">issue</a> 里也有人提问过，修改下 .github&#x2F;workflows&#x2F;main.yml<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">requirements</span></span><br><span class="line">  <span class="attr">working-directory:</span> <span class="string">./hexo_circle_of_friends</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    pip install --upgrade &#x27;pip&lt;24.1&#x27;</span></span><br><span class="line"><span class="string">    pip install -r requirements.txt</span></span><br></pre></td></tr></table></figure></li><li>等待运行完毕后，仓库会新建 output 分支，同时在分支下面生成 data.json；</li><li>在 source\friends\rss\index.md 写入下面代码，其中 api 部分替换为自己仓库地址及其对应的 data.json 文件真实路径；<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">FriendCircle</span></span><br><span class="line"><span class="attr">robots:</span> <span class="string">noindex,nofollow</span></span><br><span class="line"><span class="attr">menu_id:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">nav_tabs:</span> <span class="literal">true</span> <span class="comment"># 这就意味着页面会显示首页文章导航栏</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line">&#123;<span class="string">%</span> <span class="string">timeline</span> <span class="string">type:fcircle</span> <span class="string">api:https://raw.githubusercontent.com/FelicxFoster/friends-rss-generator/output/data.json</span> <span class="string">%</span>&#125;</span><br><span class="line">&#123;<span class="string">%</span> <span class="string">endtimeline</span> <span class="string">%</span>&#125;</span><br></pre></td></tr></table></figure></li><li>在  _config.stellar.yml 中修改，即可实现在首页增加一个「FriendCircle」栏目的效果<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="string">站点主结构树</span></span><br><span class="line"><span class="attr">site_tree:</span></span><br><span class="line">  <span class="comment"># 博客列表页配置</span></span><br><span class="line">  <span class="attr">index_blog:</span></span><br><span class="line">    <span class="attr">nav_tabs:</span>  <span class="comment"># 近期发布 分类 标签 专栏 归档 and ...</span></span><br><span class="line">      <span class="attr">&#x27;FriendCircle&#x27;:</span> <span class="string">/friends/rss/</span></span><br></pre></td></tr></table></figure></li></ul></div></div></div><h2 id="jsDelivr-加速-GitHub-文件访问"><a href="#jsDelivr-加速-GitHub-文件访问" class="headerlink" title="jsDelivr 加速 GitHub 文件访问"></a>jsDelivr 加速 GitHub 文件访问</h2><p>上面部署友链和朋友圈文章，使用的都是github仓库的json文件，国内环境大家都懂，指定是无法访问，这里介绍一种蠢方法，使用 jsDelivr 来加速这些 Github 文件的访问。</p><ul><li>在要加速的 Github 仓库里，点击 Releases -&gt; Create a new release -&gt; Choose a tag -&gt; 随便起个名比如 0.01 -&gt; 点击 Publish release；</li><li>在使用时 tag 标签直接写 latest 就行；</li><li>使用如下规则访问 CDN 资源；<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">https://cdn.jsdelivr.net/gh/&lt;username&gt;/&lt;repo</span> <span class="string">name&gt;@&lt;tag&gt;/&lt;resource</span> <span class="string">name&gt;</span></span><br><span class="line"><span class="comment"># 比如 https://cdn.jsdelivr.net/gh/FelicxFoster/friends@latest/v2/data.json</span></span><br></pre></td></tr></table></figure></li><li>然后替换掉上面的 api，现在就可以在国内愉快地访问友链和朋友圈了；</li><li>这种方法需要每次手动在 Github 上创建最新的 Releases（还没摸索出怎么使用 Github Action 自动生成）；</li><li>需要注意的是，jsDelivr 是有缓存的，更新一般要 24h，所以最好一周再新建一次 Releases；</li><li>另外，如果发现页面没有生效，大部分是自己的浏览器缓存没清除导致的；</li></ul><p>当然还有第二种方法，使用这个<a href="https://www.jsdelivr.com/github">工具</a>，实现 Github 链接转 Jsdelivr，直接插入转化后的链接，也能轻松实现国内访问。</p><h2 id="添加-Google-Bing-收录"><a href="#添加-Google-Bing-收录" class="headerlink" title="添加 Google&#x2F;Bing 收录"></a>添加 Google&#x2F;Bing 收录</h2><ul><li>安装 hexo-generator-sitemap 插件来为网站生成网站地图（Sitemap）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure></li><li>打开博客的配置文件 _config.yml，添加如下<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sitemap Generator</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li>打开 <a href="https://search.google.com/search-console/">Google Search Console</a>, 点击立即使用并登录谷歌账号；</li><li>选择网址前缀并输入站点网址，如 <a href="https://blog.felicx.eu.org/">https://blog.felicx.eu.org</a> ，点击继续；</li><li>验证方法选择 HTML 标记，然后复制 Google 提供的元标记<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;google-site-verification&quot;</span> <span class="attr">content</span>=<span class="string">&quot;xxxxx&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li>因为 Stellar 主题没有像 Next 主题一样，配置文件中没有 google_site_verification 设置项，所以直接修改 themes\stellar\layout_partial\head.ejs，找到 <meta name> 字段，在下面添加上面复制的元标记<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;google-site-verification&quot;</span> <span class="attr">content</span>=<span class="string">&quot;xxxxx&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li>将修改后的代码重新部署完毕后，点击 Google 中的验证即可；</li><li>同样 Bing 收录也是类似的，登录 <a href="https://www.bing.com/webmasters/about">Bing Webmaster Tools</a>，登录添加站点，选择 HTML 标记，重复上述操作即可；</li></ul><h2 id="添加捐赠图标"><a href="#添加捐赠图标" class="headerlink" title="添加捐赠图标"></a>添加捐赠图标</h2><div class="tag-plugin tabs" align="center"id="tab_56"><div class="nav-tabs"><div class="tab active"><a href="#tab_56-1">效果展示</a></div><div class="tab"><a href="#tab_56-2">开始部署</a></div></div><div class="tab-content"><div class="tab-pane active" id="tab_56-1"><div class="tag-plugin image"><div class="image-bg"><img src="/assets/post/20240718_jCu5mVAw.webp"/></div></div></div><div class="tab-pane" id="tab_56-2"><p>身为博主，没有大家的激励怎么会有动力更新下去，所以一个 <code>Buy Me A Coffee</code> 图标是很有必要的。<br>参考 Stellar 主题，在每篇文章下面都会有 License 和 Share，那我们可以直接在原来代码的基础上添加一个 Donate。</p><ul><li>在 themes\stellar\layout_partial\main\article\article_footer.ejs 中添加<div style="max-height: 300px; max-width: 100%; overflow: auto;"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (theme.<span class="property">article</span>.<span class="property">donate</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">donateImage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (theme.<span class="property">article</span>.<span class="property">donate</span>.<span class="property">wechat</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;div class=&quot;donate-image&quot; id=&quot;donate-wechat&quot; style=&quot;display:none; position:absolute; z-index:1000; transform: translateY(-100%); left: 50%; transform: translateX(-50%) translateY(-100%);&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;img src=&quot;<span class="subst">$&#123;theme.article.donate.wechat&#125;</span>&quot; alt=&quot;Donate with WeChat&quot; style=&quot;width: 150px; height: auto;&quot; /&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">      `</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  el += <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;section id=&quot;donate&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;header&quot;&gt;&lt;span&gt;<span class="subst">$&#123;__(<span class="string">&#x27;meta.donate&#x27;</span>)&#125;</span>&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;body&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;<span class="subst">$&#123;__(<span class="string">&#x27;请作者喝杯咖啡吧&#x27;</span>)&#125;</span></span></span><br><span class="line"><span class="string">        &lt;span class=&quot;donate-icon&quot; onclick=&quot;showQRCode()&quot; style=&quot;display: inline-block;&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;i class=&quot;fa-solid fa-gift fa-flip&quot; style=&quot;font-size: 20px;&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="string">        &lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;/p&gt;</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;donateImage()&#125;</span></span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/section&gt;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line"></span><br><span class="line">  el += <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;script&gt;</span></span><br><span class="line"><span class="string">    const showQRCode = () =&gt; &#123;</span></span><br><span class="line"><span class="string">      const qrCode = document.getElementById(&#x27;donate-wechat&#x27;);</span></span><br><span class="line"><span class="string">      qrCode.style.display = &#x27;block&#x27;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      document.addEventListener(&#x27;click&#x27;, hideQRCode);</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    const hideQRCode = (event) =&gt; &#123;</span></span><br><span class="line"><span class="string">      const qrCode = document.getElementById(&#x27;donate-wechat&#x27;);</span></span><br><span class="line"><span class="string">      const donateIcon = document.querySelector(&#x27;.donate-icon&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      if (!qrCode.contains(event.target) &amp;&amp; !donateIcon.contains(event.target)) &#123;</span></span><br><span class="line"><span class="string">        qrCode.style.display = &#x27;none&#x27;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        document.removeEventListener(&#x27;click&#x27;, hideQRCode);</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">  &lt;/script&gt;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>在 _config.stellar.yml 添加<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######## Article ########</span></span><br><span class="line"><span class="attr">article:</span></span><br><span class="line">  <span class="attr">donate:</span></span><br><span class="line">    <span class="attr">wechat:</span> <span class="string">&#x27;二维码图片&#x27;</span></span><br></pre></td></tr></table></figure>这样当你点击捐赠图标时，二维码会显示出来，再次点击页面的其他地方就会隐藏二维码</li></ul></div></div></div>]]></content>
    
    
    <summary type="html">Hexo 博客使用 Stellar 主题进行美化，持续更新中...</summary>
    
    
    
    <category term="折腾系列" scheme="https://blog.felicx.eu.org/categories/%E6%8A%98%E8%85%BE%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="hexo" scheme="https://blog.felicx.eu.org/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Github Action 自动化部署 Hexo 博客</title>
    <link href="https://blog.felicx.eu.org/165643616.html"/>
    <id>https://blog.felicx.eu.org/165643616.html</id>
    <published>2024-06-22T12:39:10.000Z</published>
    <updated>2024-06-23T03:20:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>每次部署 Hexo 都需要运行 hexo clean &amp; hexo g &amp; hexo d 指令三件套完成推送到远程仓库，随着文章越来越多，编译的时间也会越来越长。</p><p>Github Actions 可以很方便实现 CI&#x2F;CD 工作流，类似 Travis 的用法，来帮我们完成一些工作，比如实现自动化测试、打包、部署等操作。当我们运行 Jobs 时，它会创建一个容器 (runner)，容器支持：Ubuntu、Windows 和 MacOS 等系统，在容器中我们可以安装软件，利用安装的软件帮我们处理一些数据，然后把处理好的数据推送到某个地方。</p><p>通过 Github Actions，我们只需要在每次完成博客的编写或修改以后，将改动直接 push 到远程仓库，之后的编译部署的工作统统交给 CI 来完成即可。</p><h1 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h1><p>为什么还要创建新的仓库呢，我们之前根据 <a href="https://blog.felicx.eu.org/426584999.html">Hexo 博客搭建</a>部署的 Hexo 博客，<a href="https://github.com/FelicxFoster/FelicxFoster.github.io">your.github.io</a> 这个仓库是用来存放静态博客页面，只有前端页面的文件，所以我们需要创建一个私有仓库存放 Hexo 项目源码，下面用<code>HexoBlog</code>称呼。</p><p><img src="/assets/post/20240714_4EA7T6pm.webp" alt="img"></p><h1 id="上传仓库代码"><a href="#上传仓库代码" class="headerlink" title="上传仓库代码"></a>上传仓库代码</h1><p>创建完私有仓库后，在本地博客文件中复制几个文件到另外一个文件夹，其中包括<code>.github</code>，<code>scaffolds</code>，<code>source</code>，<code>themes</code>，<code>.gitignore</code>，<code>_config.yml</code>，<code>package.json</code>，<code>package-lock.json</code><br><img src="/assets/post/20240714_WpedTG4k.webp" alt="img"><br>还有一个很重要的一步：在<code>.gitignore</code>中添加<code>themes/keep/.git</code>，不然没法提交代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line"></span><br><span class="line">git remote add origin git@github.com:用户名/自动化仓库名.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h1 id="生成部署密钥"><a href="#生成部署密钥" class="headerlink" title="生成部署密钥"></a>生成部署密钥</h1><p>任意目录下，<code>ssh-keygen -f github-deploy-key</code>，然后一路按回车直到生成成功。当前目录下会有<code>github-deploy-key</code>和<code>github-deploy-key.pub</code>两个文件。</p><p>复制<code>github-deploy-key</code>文件内容，在 Github 的<code>HexoBlog</code>仓库点击<code>Settings -&gt; Secrets and variables -&gt; Actions -&gt; New repository secret</code>页面上添加。</p><ul><li>在<code>Name</code>输入框填写<code>HEXO_DEPLOY_PRI</code>；</li><li>在<code>Value</code>输入框填写<code>github-deploy-key</code>文件内容；</li></ul><p>复制<code>github-deploy-key.pub</code>文件内容，在 Github 的<code>your.github.io</code>仓库点击<code>Settings -&gt; Deploy keys -&gt; Add deploy key</code>页面上添加。</p><ul><li>在<code>Title</code>输入框填写<code>HEXO_DEPLOY_PUB</code>；</li><li>在<code>Key</code>输入框填写<code>github-deploy-key.pub</code>文件内容；</li><li>勾选<code>Allow write access</code>选项；</li></ul><h1 id="编写-Github-Actions"><a href="#编写-Github-Actions" class="headerlink" title="编写 Github Actions"></a>编写 Github Actions</h1><p>在本地<code>HexoBlog</code>根目录下创建<code>.github/workflows/deploy.yml</code>文件，目录结构如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">blog (repository)</span><br><span class="line">└── .github</span><br><span class="line">    └── workflows</span><br><span class="line">        └── deploy.yml</span><br></pre></td></tr></table></figure><p>在<code>deploy.yml</code>文件中粘贴以下内容。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">CI</span>  <span class="comment"># 自动部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="attr">THEME_REPO:</span> <span class="string">XPoet/hexo-theme-keep</span>   <span class="comment"># Hexo所使用的主题的仓库</span></span><br><span class="line">  <span class="attr">THEME_BRANCH:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">DEPLOY_REPO:</span> <span class="string">FelicxFoster/FelicxFoster.github.io</span>    <span class="comment"># Hexo编译后要部署的仓库</span></span><br><span class="line">  <span class="attr">DEPLOY_BRANCH:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">on</span> <span class="string">node</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span> <span class="string">and</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">os:</span> [<span class="string">ubuntu-latest</span>]</span><br><span class="line">        <span class="attr">node_version:</span> [<span class="number">16.</span><span class="string">x</span>]</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">theme</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">themes/keep</span>     <span class="comment"># 主题路径</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">deploy</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">.deploy_git</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configuration</span> <span class="string">environment</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">HEXO_DEPLOY_PRI:</span> <span class="string">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          git config --global user.name $GIT_USER</span></span><br><span class="line"><span class="string">          git config --global user.email $GIT_EMAIL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><h1 id="查看部署"><a href="#查看部署" class="headerlink" title="查看部署"></a>查看部署</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>重新提交后，即可在 Github 的<code>HexoBlog</code>仓库查看Actions部署结果。<br><img src="/assets/post/20240714_XVhMLDq1.webp" alt="img"></p>]]></content>
    
    
    <summary type="html">使用 Github Action 自动化部署 Hexo 博客，实现随时随地写文章发文章</summary>
    
    
    
    <category term="折腾系列" scheme="https://blog.felicx.eu.org/categories/%E6%8A%98%E8%85%BE%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="hexo" scheme="https://blog.felicx.eu.org/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>2024年一波三折的Q2</title>
    <link href="https://blog.felicx.eu.org/1057849259.html"/>
    <id>https://blog.felicx.eu.org/1057849259.html</id>
    <published>2024-06-16T12:53:12.000Z</published>
    <updated>2024-06-16T12:53:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>距离上一次写博客已经过去了4个月。不是我不想写，实在是有心无力。Q2这段时间经历了太多事情，整个人都不在状态，这里也做个总结，顺便聊一下一些人生感悟。</p><p>3月份主要是在准备面试和面试的过程中，最近行情不太好，投了几家都没面邀，后面就只面了一家，搞自动驾驶的，一共三面，面试过程倒挺轻松的，问的问题也比较符合我现在做的，就是到了谈薪阶段，给不了想要的薪资，最后也是不了了之。</p><p>4月份一直在忙工作上的活，也没时间搞博客。</p><p>5月劳动节放假期间去配了副眼镜，结果度数配高了，戴了几天眼睛都很不舒服，赶紧请了半天假去医院检查了下眼睛，确认眼睛有点发炎，然后度数确实是过高了，只好戴回旧眼镜，想着后面有时间再去重新配一副。<br>然而，痛苦的事情来了。检查完眼睛的下午去参加了公司的团建，席中喝了些白酒，回来后右后槽牙开始隐隐作痛，本身这颗牙之前做过根管治疗。到了半夜，疼的受不了了，抓紧吃了颗布洛芬，模模糊糊睡了过去。到了早上，去牙科诊所看了下，先给我开了点止疼药，说是后面可能需要拔掉。吃了几天的止疼药后，牙齿没有自发疼了，但是有咬合疼。约了个中山大学附属口腔，想着主任能不能有办法只做根管，不用拔牙。但是事与愿违，医生建议还是拔掉，因为做了根管可能保不了半年又会复发，没必要浪费钱。整个人有点恍惚，又约了穗华口腔，想着能不能拯救一下。到了医院，拍了片医生还是建议拔掉，粗略跟医生算了下二次根管的费用和后续种植牙的费用，毅然选择了拔牙。整个过程很快，拔牙后的一周都在喝粥修养。</p><p>到了6月，最痛苦的来了。1号晚上饭还没吃完，突然肚子上腹部疼，到了晚上12点，痛感很明显，自发性绞痛，赶紧吃了粒洛索洛芬钠片，还是没法好受，而且开始怕寒，期间肚子很胀，又拉又吐。<br>到了凌晨3点，痛感更加明显了，钻心痛，汗水直流，实在顶不住了，开始裹着外套出门，本想着去附近医院挂个急诊，结果没开门，赶紧打车去南方医科大学附属医院挂急诊。到了那里，整个人都不好受了，医生也看不出啥，诊断是急性肠胃炎，然后打针挂水，挂到了早上，肚子还是很疼，但是医生看不出来，只好先回来了。<br>到了下午，右下腹开始按压疼，走路都很疼，顶不住了，去附近医院，又是B超又是拍CT，确诊为急性阑尾炎，心里想着先保守治疗吧，所以开始吊针，晚上回来后还是没有效果，晚上还被疼醒了。<br>第二天起来后，肚脐周围都开始按压疼，早上忍着痛去公司上班，实在顶不住了，又去医院挂了一次水，完全没有效果，立马挂了中山大学附属第三医院的胃肠外科，到了医院后，给医生看了确诊急性阑尾炎，立马给我挂了个急诊，让我办理住院。<br>早上六点开始做手术，麻醉很快，九点钟我醒来的时候已经做完手术了，然后整个人迷迷糊糊的被推回了病床，就是一整天都在挂水，下午我就开始下床走动，肚子被开了三个孔，有时候伤口有点疼，还带了个引流管，走路很麻烦。一共住了4天半院，最后一天早上拔了引流管后，下午就出院了。回来后整个人还是很虚，只能喝粥。</p><p>到了今天好了一点，趁还有精力写了下博客，记录下Q2这一波三折的人生经历。从眼睛到牙齿再到阑尾，Q2真是够精彩的。经历了这么多事情，也有了一些自己的感悟。</p><p>✅ 身体是自己的，只有搞好身体，才有赚钱的本钱。<br>✅ 好的心态很重要，心态好对病情恢复很有帮助。<br>✅ 身边有人陪还是挺重要的，一个人孤身看病住院其实挺难熬的。<br>✅ 医保是个好东西，能省很多钱，还有保险也要买。</p>]]></content>
    
    
    <summary type="html">记录一下Q2这段时间来的人生波折</summary>
    
    
    
    <category term="随笔" scheme="https://blog.felicx.eu.org/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="年度总结" scheme="https://blog.felicx.eu.org/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>CAN 之 DBC 文件解析（详细版）</title>
    <link href="https://blog.felicx.eu.org/4096777957.html"/>
    <id>https://blog.felicx.eu.org/4096777957.html</id>
    <published>2024-02-05T13:28:26.000Z</published>
    <updated>2024-02-05T13:28:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前写了一篇简单版的 <a href="https://blog.felicx.eu.org/768939725.html">DBC 文件解析</a>，下面详细介绍下 DBC 文件里的各个字段。</p><h2 id="总体概览"><a href="#总体概览" class="headerlink" title="总体概览"></a>总体概览</h2><p>DBC文件是以 Tag（标签）来标识每一个元素。</p><p><img src="/assets/post/20240714_NvlQgvzr.webp" alt="img"></p><p>如上图所示，一般 dbc 文件中包含了如下的 8 种信息：</p><ul><li>版本与新符号</li><li>波特率定义</li><li>网络节点的定义</li><li>报文帧的定义</li><li>信号的定义</li><li>注解部分</li><li>特征部分</li><li>数值表部分</li></ul><h2 id="详细解释"><a href="#详细解释" class="headerlink" title="详细解释"></a>详细解释</h2><h3 id="版本的定义"><a href="#版本的定义" class="headerlink" title="版本的定义"></a>版本的定义</h3><p><code>VERSION</code> 信息可为空，也可以由用户自定义；<br><code>NS_</code> 表示 New Symbol，在外面创建 dbc 文件时已经自动生成，所以无需过多留意，默认即可；</p><h3 id="波特率的定义"><a href="#波特率的定义" class="headerlink" title="波特率的定义"></a>波特率的定义</h3><p>格式为 <code>BS_: [baudrate:BTR1,BTR2]</code></p><p>其中 <code>BS_</code> 为关键字，用于定义 CAN 网络的波特率；<code>[]</code> 内容表示为可选部分，可以省略；<br>但关键字 <code>BS_:</code> 必须存在，省略则会出错。《DBC File Format Document》规范中明确提醒，必须保留 <code>BS_:</code> 标签。</p><h3 id="网络节点的定义"><a href="#网络节点的定义" class="headerlink" title="网络节点的定义"></a>网络节点的定义</h3><p>格式为 <code>BU_: Nodename1 Nodename2 Nodename3 ……</code></p><p><code>BU_</code> 为关键字，表示网络节点；<code>Nodename1、Nodename2</code> 为网络节点名字，由用户自己定义。注意需要保证节点命名的唯一性。</p><h3 id="报文帧的定义"><a href="#报文帧的定义" class="headerlink" title="报文帧的定义"></a>报文帧的定义</h3><p>格式为 <code>BO_ MessageId MessageName: MessageSize Transmitter</code></p><ul><li><code>BO_</code> 为关键字，表示报文；</li><li><code>MessageId</code> 为报文 ID，是以 10 进制数表示的；</li><li><code>MessageName</code> 为报文的名字，命名规则和 C 语言变量相同；</li><li><code>MessageSize</code> 为报文数据域字节数，即数据长度，为无符号整型数据，CAN 2.0 为最大 8 字节，CAN FD  最大 64 字节；</li><li><code>Transmitter</code> 为该报文的网络节点；如果该报文没有指定发送节点，则该值需设置为 “Vector__XXX”。</li></ul><p>用 <code>BO_ 996 HUD_1_B: 8 HUD</code> 来举例，这个报文是由 HUD 这个节点发出的，数据域长度为 8 字节，ID 为 996（0x3E4），名字命名为 HUD_1_B。</p><h3 id="信号的定义"><a href="#信号的定义" class="headerlink" title="信号的定义"></a>信号的定义</h3><p>格式为 <code>SG_ SignalName (SigTypeDefinition) : StartBit|SignalSize@ByteOrder ValueType (Factor,Offset) [Min|Max] Unit Receiver</code></p><ul><li><code>SG_</code> 为关键字，表示信号；</li><li><code>SignalName</code> 为该信号的名字；</li><li><code>SigTypeDefinition</code> 是多路选择信号的定义，可选项，有 3 种格式；<ul><li>空，表示普通信号；</li><li>M，表示多路选择器信号；</li><li>m50，表示被多路选择器选择的信号，50 表示当 M 定义的信号的值等于 50 的时候，该报文使用此通路；</li></ul></li><li><code>StartBit|SignalSize</code> 表示该信号起始位、信号长度；</li><li><code>ByteOrder</code> 表示信号的字节顺序：0 代表 Motorola 格式，1 代表 Inter 格式；</li><li><code>ValueType</code> 表示该信号的数值类型：+ 表示无符号数，- 表示有符号数；</li><li><code>Factor,Offset</code> 分别表示因子和偏移量，这两个值用于信号的原始值与物理值之间的转换；<ul><li>物理值 &#x3D; 原始值 * 因子 + 偏移量；</li></ul></li><li><code>Min|Max</code> 表示该信号的最小值和最大值，即指定了该信号值的范围；这两个值为 double 类型；</li><li><code>Unit</code> 表示该信号的物理单位，为字符串类型；</li><li><code>Receiver</code> 表示该信号的接收节点，若该信号没有指定的接收节点，则必须设置为 “Vector__XXX”。</li></ul><p>如示下面的例中：<br>第一个信号 <code>SG_ S_Check : 45|10@0+ (0.00625,0) [0|160] &quot;M&quot; EL3160_60,ESC</code><br>表示定义了一个命名为 S_Check 的普通信号，其起始位是第 45 位，信号长度 10 bit；<br>信号是 Motorola 格式，数值类型为无符号类型数；因子为 0.00625，偏移量为 0；信号取值范围为 0 到 160；<br>信号物理单位为字符串 “M”，该信号接收节点为 EL3160_60 和 ESC 这两个节点。</p><p>第二个信号 <code>SG_ Send_Mux M : 7|8@0+ (1,0) [0|0] &quot;&quot; EL3160_60,ESC</code><br>表示定义了一个命名为 Send_Mux 的多路选择器信号，其起始位是第 7 位，信号长度 8 bit；<br>信号是 Motorola 格式，数值类型为无符号类型数；因子为1，偏移量为 0；信号取值范围为 0 到 0；<br>信号物理单位为字符串 “”；该信号接收节点为 EL3160_60 和 ESC 这两个节点。该信号做选择通道使用。</p><p>第三个信号 <code>SG_ S_Level_A_Voltage m50 : 15|16@0+ (0.00625,0) [0|160] &quot;V&quot; EL3160_60,ESC</code><br>表示定义了一个命名为 S_Level_A_Voltage 的被选择信号，其起始位是第 15 位，信号长度 16 bit；<br>信号是 Motorola 格式，数值类型为无符号类型数；因子为 0.00625，偏移量为 0；信号取值范围为 0 到 160；<br>信号物理单位为字符串 “V”；该信号接收节点为 EL3160_60 和 ESC 这两个节点。<br><img src="/assets/post/20240714_3RDcG9dl.webp" alt="img"><br><img src="/assets/post/20240714_iRqFI2kf.webp" alt="img"><br>Send_Mux 作为选择通路使用，这个例子中，当 Send_Mux 等于 50、51、52、54 时，代表后面的选择的通路。</p><h3 id="注解部分"><a href="#注解部分" class="headerlink" title="注解部分"></a>注解部分</h3><p>格式为 <code>CM_ Object MessageId/NodeName &quot;Comment&quot;</code></p><ul><li><code>CM_</code> 为关键字，表示注解信息；</li><li><code>Object</code> 表示进行注解的对象类型，可以是节点 BU_、报文 BO_、消息 SG_；</li><li><code>MessageId/NodeName</code> 表示进行注解的对象，若前面的对象类型是信号或者报文，则这里的值应为报文的 ID（10 进制数表示）；若前面的对象类型为节点，则这里的值应为节点的名字；</li><li><code>Comment</code> 表示进行注解的文本信息；</li></ul><p>如示例中的 <code>CM_ SG_ 996 HUD_HeightLv &quot;Control hud height level&quot;</code>;<br>表示对 ID 为 996（0x3E4）这条报文下的名为 “HUD_HeightLv” 的信号进行注解说明，说明的内容为 “Control hud height level”。</p><p>注意注释以 “” 包围，注释内部不允许再出现双引号。</p><h3 id="特征定义部分"><a href="#特征定义部分" class="headerlink" title="特征定义部分"></a>特征定义部分</h3><p>和特征相关的 Tag 一共有三条：</p><ul><li><p>BA_DEF_  特征名称类型定义。格式为 <code>BA_DEF_ Object AttributeName ValueType Min Max</code>;<br>   - BA_DEF 标签</p></li><li><p>Object 特征类型，可以是 BU_（节点特征定义）、BO_（报文特征定义）、SG_（信号特征定义）、空格（项目特征定义）；</p></li><li><p>AttributeName 特征名称（C 语言变量格式）</p></li><li><p>ValueType 特征值类型（只能是十进制、十六进制、浮点数、枚举、字符 5 种类型）</p></li><li><p>Min Max 数值类型这里出现范围，枚举类型这里是枚举值，字符类型，这里是空。</p></li><li><p>BA_DEF_DEF_ 特征默认值定义。格式为 <code>BA_DEF_DEF_ AttributeName DefaultValue</code>;</p><ul><li>BA_DEF_DEF_ 标签</li><li>AttributeName 特征名称（C 语言变量格式）</li><li>DefaultValue 该特征的默认设置值</li></ul></li><li><p>BA_ 特征项目设置值定义，格式为 <code>BA_ AttributeName projectValue</code>;</p><ul><li>BA_ 标签</li><li>AttributeName 特征名称（C 语言变量格式）</li><li>projectValue 该特征的设置值</li></ul></li></ul><p>举例：<br><code>BA_DEF_ BO_ &quot;GenMsgCycleTime&quot; INT 0 65535; BA_DEF_DEF_ &quot;GenMsgCycleTime&quot; 2200; BA_ &quot;GenMsgCycleTime&quot; BO_ 400 100;</code></p><p>表示对定义了一个针对消息类型的特征，特征名为 “GenMsgCycleTime”，特征值是整型数据，取值范围在 0 到 65535 之间；<br>默认值为 2200；<br>项目设置值 “CAN ID &#x3D;&#x3D; 400” 的消息，其特征值设置为 100；</p><h3 id="数值表部分"><a href="#数值表部分" class="headerlink" title="数值表部分"></a>数值表部分</h3><p>格式为 <code>VAL_ MessageId SignalName N &quot;DefineN&quot; …… 0 &quot;Define0&quot;</code></p><ul><li>VAL_ 为关键字，表示数值表定义</li><li>MessageId 表示该信号所属的报文 ID（10 进制数表示）</li><li>SignalName 表示信号名</li><li>N “DefineN” …… 0 “Define0” 表示定义的数值表内容，即该信号的有效值分别用什么符号表示</li></ul><p>如示例中的 <code>VAL_ 996 HUD_OffSt 1 &quot;Active&quot; 0 &quot;Not Active&quot;</code>;</p><p>表示对 ID 为 996（0x3E4）的这条报文下的，一个命名为 “HUD_OffSt” 的信号，进行其数值表的定义；<br>用 “Active” 取代 1；用 “Not Active” 取代 0。只有自然数类型的信号才可以使用数值表表示。</p>]]></content>
    
    
    <summary type="html">DBC 文件数据详细解析</summary>
    
    
    
    <category term="自动驾驶" scheme="https://blog.felicx.eu.org/categories/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6/"/>
    
    
    <category term="can" scheme="https://blog.felicx.eu.org/tags/can/"/>
    
  </entry>
  
  <entry>
    <title>CAN 之 DBC 文件解析（简单版）</title>
    <link href="https://blog.felicx.eu.org/768939725.html"/>
    <id>https://blog.felicx.eu.org/768939725.html</id>
    <published>2024-02-03T08:25:44.000Z</published>
    <updated>2024-02-03T08:25:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-DBC-文件"><a href="#什么是-DBC-文件" class="headerlink" title="什么是 DBC 文件"></a>什么是 DBC 文件</h2><p>DBC 是Database Can的缩写，其代表的是CAN的数据库文件。简单地说，通过 CAN 总线通信的数据类型可以用 DBC 文件来读取和理解。一般通过 Vector CANdb++ 进行编辑和查看。</p><h2 id="DBC-文件内容"><a href="#DBC-文件内容" class="headerlink" title="DBC 文件内容"></a>DBC 文件内容</h2><p>当我们打开一份 DBC 文件时，左侧树形目录对应</p><ul><li>Networks：从网络的视角来观察总线上存在的节点、报文和信号</li><li>ECUs：每个 ECU 的 Network Node 和 Environment Variables<ul><li>Environment Variables：在使用 CANoe 仿真节点时会用到</li><li>Network nodes：从单个节点的视角来观察与节点相关的总线报文及信号<ul><li>Tx Messages：节点发送报文</li><li>Rx Messages：节点接收报文</li><li>Mapped Tx Signals：节点发送信号</li><li>Mapped Rx Signals：节点接收信号</li></ul></li></ul></li><li>Messages：CAN 总线上传输信息的最小单位</li><li>Signals：Message 里最小的元素单位</li></ul><p>值得一提的是，Messages 与 Signals 下包含的报文信号比 Network nodes 下的收发报文信号要多，并且有可能会包含实际没用到的报文信号，因为所有创建的报文信号都会在 Messages 与 Signals 下显示，但只有映射到节点的报文信号才会在 Network nodes 下显示。</p><p><img src="/assets/post/20240714_Aph3kI4h.webp" alt="img"></p><p>因此我们主要看 Network nodes 下里的网络节点，网络节点分为多个类，如下图，分为 SDE、sensor2、sensor3 三个类节点。</p><p><img src="/assets/post/20240714_ABe7x2R6.webp" alt="img"></p><p>当点开节点时，会看到类节点下的 TX 与 RX 下的多个 messages。</p><ul><li>ID：CAN message id，一般以16进制显示</li><li>Name： CAN message name</li><li>ID-Format：CAN 报文的类型（CAN Standard&#x2F;CAN FD Standard）</li><li>DLC：数据长度代码，CAN 报文中数据的长度</li></ul><p><img src="/assets/post/20240714_hqaiAxtT.webp" alt="img"></p><p>每个 message 又包含了多个 signals。</p><ul><li>Name：信号的名称</li><li>Multiplexing：多路复用</li><li>Startbit：信号的起始位</li><li>Byte Order：信号的位计数，分为 Motorols（大端字节序）和 Intel（小端字节序）</li><li>Value Type：数据类型</li><li>Factor：信号的转换系数</li><li>Offset：信号的转换偏移</li><li>Minimum &amp; Maximum：最小和最大的信号值</li><li>Unit：信号中存在的物理数据的单位</li><li>Comment：信号说明</li></ul><p><img src="/assets/post/20240714_9qoMQVh7.webp" alt="img"></p><p>其中 factor 因数 与 offse 偏移量 定义了 physical 物理值（如vehicle speed，engine speed,water temperature）与 raw 原始值（总线上传输的值）的线性转换规则。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">physical_value = raw_value * <span class="built_in">factor</span> + offset</span><br><span class="line">raw_value = ( pysical_value - offset ) / <span class="built_in">factor</span></span><br></pre></td></tr></table></figure><h3 id="DBC-文件解析"><a href="#DBC-文件解析" class="headerlink" title="DBC 文件解析"></a>DBC 文件解析</h3><p>这里使用 Python。首先安装 cantools 这个库文件，可以直接解析 dbc 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install cantools</span><br></pre></td></tr></table></figure><p>使用时，直接 import cantools 即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cantools</span><br><span class="line">dbc_file = <span class="string">&quot;******&quot;</span></span><br><span class="line">dbc_info = cantools.db.load_file(dbc_file)    <span class="comment">#创建一个dbc数据库对象</span></span><br></pre></td></tr></table></figure><p>直接使用时，下述附代码，可直接复制使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cantools</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DbcInfo</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用于读取dbc文件，返回dbc信息</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_file</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        init</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.dbc_file = input_file</span><br><span class="line">        self.dbc_info = cantools.db.load_file(self.dbc_file)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_message</span>(<span class="params">self, frame_id</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return message，特别强调，frame_id输入10进制即可，同时必须是int型数据，不能是字符串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.dbc_info.get_message_by_frame_id(frame_id)   <span class="comment">#直接返回message的所有信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_message_name</span>(<span class="params">self, frame_id</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return message name</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.dbc_info.get_message_by_frame_id(frame_id).name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_message_name_by_message_id</span>(<span class="params">self, frame_name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return message id by message name</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.dbc_info.get_message_by_name(frame_name).frame_id</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_signals_list</span>(<span class="params">self, frame_id</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return signals list</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.dbc_info.get_message_by_frame_id(frame_id).signal_tree    <span class="comment">#这里返回的是message中signal的list，包含一个message中所有的signal</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_signal</span>(<span class="params">self, frame_id, signal_name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return signal, 输入message id和signal name</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.dbc_info.get_message_by_frame_id(frame_id).get_signal_by_name(signal_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_signal_config_maximum</span>(<span class="params">self, frame_id, signal_name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return signal maximum</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.dbc_info.get_message_by_frame_id(frame_id).get_signal_by_name(signal_name).maximum</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_signal_config_minimum</span>(<span class="params">self, frame_id, signal_name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return signal minimum</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.dbc_info.get_message_by_frame_id(frame_id).get_signal_by_name(signal_name).minimum</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_signal_config_scale</span>(<span class="params">self, frame_id, signal_name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return signal scale，这里指的是signal定义中其取值范围的间隔，</span></span><br><span class="line"><span class="string">        比如从1到10，每个2取一个值，scale就是2</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.dbc_info.get_message_by_frame_id(frame_id).get_signal_by_name(signal_name).scale</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_signal_config_comment</span>(<span class="params">self, frame_id, signal_name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return signal comment，signal说明</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.dbc_info.get_message_by_frame_id(frame_id).get_signal_by_name(signal_name).comment</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">signal_config_value_description_to_num</span>(<span class="params">self, frame_id, signal_name, value_str</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return signal value description</span></span><br><span class="line"><span class="string">        这里需要特别说明下，有些signal取值不是正常的数值，而是文字描述，</span></span><br><span class="line"><span class="string">        这个在定义中是个表，比如1：open, 2:close, 4:ignore，</span></span><br><span class="line"><span class="string">        本函数的意思是当你取到这个字符串，比如close时，能够返回这个字符串在对应中的数字2，</span></span><br><span class="line"><span class="string">        这在解析和保存以及后续发送中是很有用的。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.dbc_info.get_message_by_frame_id(frame_id).get_signal_by_name(signal_name).\</span><br><span class="line">            choice_string_to_number(value_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    dbc_info = DbcInfo(<span class="string">&#x27;D:test.dbc&#x27;</span>)</span><br><span class="line">    <span class="comment">#test，根据自己需求使用上述函数即可</span></span><br><span class="line">    <span class="comment">#frame_id输入10进制即可，同时必须是int型数据，不能是字符串</span></span><br><span class="line">    <span class="built_in">print</span>(dbc_info.get_message_name(<span class="number">520</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果想进行 can 报文修改，需要注意的是，直接给的数据不一定符合要求，需要保证修改数值在 signal 的最大最小范围内，同时保证该值符合定义中的取值间隔，可采用下述函数进行 check，保证输入数值符合要求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_value_meet_norms</span>(<span class="params">self, frame_id, signal_name, value</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    check value meet norms and return closest value based on scale factor</span></span><br><span class="line"><span class="string">    检查输入是否符合规范，同时输出符合规范的最接近输入value值的value</span></span><br><span class="line"><span class="string">    如果你要用脚本修改can报文，但是修改的值如果不符合要求，给入会报错，</span></span><br><span class="line"><span class="string">    该函数保证修改值符合规范且接近用户期望值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    max_value = self.get_signal_config_maximum(frame_id, signal_name)</span><br><span class="line">    min_value = self.get_signal_config_minimum(frame_id, signal_name)</span><br><span class="line">    scale_value = self.get_signal_config_scale(frame_id, signal_name)</span><br><span class="line">    <span class="keyword">if</span> value &gt; max_value:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(scale_value, <span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(max_value)</span><br><span class="line">        <span class="keyword">return</span> max_value</span><br><span class="line">    <span class="keyword">elif</span> value &lt; min_value:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(scale_value, <span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(max_value)</span><br><span class="line">        <span class="keyword">return</span> min_value</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        num = <span class="built_in">round</span>(value / scale_value)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(scale_value, <span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(num * scale_value)</span><br><span class="line">        <span class="keyword">return</span> num * scale_value</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnpython.com/pypi/cantools">cantools 官方包</a></li></ul>]]></content>
    
    
    <summary type="html">DBC 文件数据格式介绍及解析</summary>
    
    
    
    <category term="自动驾驶" scheme="https://blog.felicx.eu.org/categories/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6/"/>
    
    
    <category term="python" scheme="https://blog.felicx.eu.org/tags/python/"/>
    
    <category term="can" scheme="https://blog.felicx.eu.org/tags/can/"/>
    
  </entry>
  
  <entry>
    <title>CAN 之 BLF 文件解析</title>
    <link href="https://blog.felicx.eu.org/1584988185.html"/>
    <id>https://blog.felicx.eu.org/1584988185.html</id>
    <published>2024-01-29T14:04:28.000Z</published>
    <updated>2024-01-29T14:04:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>blf 数据是 CAN 数据录制的一种格式，以二进制格式存储数据，需要用 CANoe 等工具进行解析才能查看数据，下面介绍使用 Python 解析 blf 数据。</p><h2 id="工具包安装"><a href="#工具包安装" class="headerlink" title="工具包安装"></a>工具包安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install cantools python-can</span><br></pre></td></tr></table></figure><h2 id="解析blf文件"><a href="#解析blf文件" class="headerlink" title="解析blf文件"></a>解析blf文件</h2><p>一般情况下，解析 blf 需要 dbc 文件，当然其实不用 dbc 也可以，只不过解析比较麻烦，推荐还是配合 dbc 解析，这个也是我们最常用的办法。所以要用 dbc，需要先加载 dbc 文件，这里需要cantools。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cantools</span><br><span class="line"><span class="keyword">import</span> can</span><br><span class="line">dbc_file = <span class="string">r&quot;xxx.dbc&quot;</span></span><br><span class="line">dbc = cantools.db.load_file(dbc_file)</span><br></pre></td></tr></table></figure><p>加载完 dbc 文件，就可以解析 blf 文件了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="string">r&quot;xxx.blf&quot;</span></span><br><span class="line">log_data = can.BLFReader(f)</span><br><span class="line"><span class="keyword">for</span> msg <span class="keyword">in</span> log_data:</span><br><span class="line">  <span class="built_in">print</span>(msg)</span><br></pre></td></tr></table></figure><p>打印结果是这样的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Timestamp: 1673917200.026000    ID: 0301    S Rx    DL:  8    1d b0 41 54 07 02 00 00    Channel: 0</span><br><span class="line">Timestamp: 1673917200.026000    ID: 070b    S Rx    DL:  8    00 c8 0c b6 24 b8 24 b8    Channel: 0</span><br><span class="line">Timestamp: 1673917200.028000    ID: 0322    S Rx    DL:  8    00 00 00 00 00 00 03 00    Channel: 0</span><br><span class="line">Timestamp: 1673917200.126000    ID: 030d    S Rx    DL:  8    00 14 00 00 00 00 00 00    Channel: 0</span><br></pre></td></tr></table></figure><p>上面 msg 输出的格式为“时间戳、can_id、属性（比如是否是 canfd 帧、是否是错误帧、是 rx 还是 tx 帧等等）、长度（也就是 dlc）、以 16 进制格式输出的 raw data、can channel”。</p><p>由于 msg 本身就是一个 can.message 类，因此我们也可以手动取到它的各种<a href="https://python-can.readthedocs.io/en/stable/message.html">属性</a><br><img src="/assets/post/20240714_MGoUgdCS.webp" alt="img"></p><p>可以发现，时间戳解析出来了，其它的数据都是 16 进制，没法直接看。当然我们如果熟悉 blf 格式，可以自己把数据还原出来，但是既然已经用第三方库，我们当然就不用自己解析了，而且仔细观察一下即可发现，之前的加载 dbc 并没有用上，所以这时一个重要的函数登场了，那就是<code>dbc.decode_message(id, data)</code>，具体代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">decoded = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> msg <span class="keyword">in</span> logdata:</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    dec = dbc.decode_message(msg.arbitration_id, msg.data)</span><br><span class="line">    <span class="keyword">if</span> dec:</span><br><span class="line">      <span class="keyword">for</span> key, data <span class="keyword">in</span> dec.items():</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> decoded:</span><br><span class="line">          decoded[key] = []</span><br><span class="line">          decoded[key].append([msg.timestamp, data])</span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>因为我要把 blf 数据解析出来转成 mf4 了，所以构建了一个 decoded 字典，每个 key 里记一个信号，熟悉 mf4 的应该知道，mf4 里每个信号主要包含两部分，一个是时间戳，一个是数据，有了这两个，我们就可以创建 mf4 文件了，最后放上创建 mf4 的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> asammdf <span class="keyword">import</span> MDF,Signal</span><br><span class="line">sigs = []</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> decoded.items():</span><br><span class="line">  timestamps = [i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> v]</span><br><span class="line">  data = [i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> v]</span><br><span class="line">  s = Signal(data, timestamps, name=k)</span><br><span class="line">  sigs.append(s)</span><br><span class="line"></span><br><span class="line">mdf = MDF()</span><br><span class="line">mdf.append(sigs)</span><br><span class="line">mdf.save(<span class="string">&quot;xx.mf4&quot;</span>, overwrite=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这样就实现了 blf 文件的解析与转换，当然，转换的格式很自由，只要熟悉相应的格式，比如 csv，hdf5，xlsx，json，pickle 都可以，因为我们已经拿到原始数据了，保存成什么格式就很简单了。</p>]]></content>
    
    
    <summary type="html">Python 中用 cantools 和 can 工具包解析 blf 文件</summary>
    
    
    
    <category term="自动驾驶" scheme="https://blog.felicx.eu.org/categories/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6/"/>
    
    
    <category term="python" scheme="https://blog.felicx.eu.org/tags/python/"/>
    
    <category term="can" scheme="https://blog.felicx.eu.org/tags/can/"/>
    
  </entry>
  
  <entry>
    <title>CAN 之报文录制格式</title>
    <link href="https://blog.felicx.eu.org/2276434991.html"/>
    <id>https://blog.felicx.eu.org/2276434991.html</id>
    <published>2024-01-28T14:16:50.000Z</published>
    <updated>2024-01-28T15:07:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>搞自驾，免不了要跟 CAN 数据打交道，那常见的 CAN 报文录制格式有哪些呢？</p><h2 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h2><p>CSV（Comma-Separated Values）以纯文本形式存储表格数据（数字和文本）。</p><p>多用于测试数据，全文本文件，可以用 notepad++，Excel 等软件直接打开。</p><h2 id="ASC-BLF"><a href="#ASC-BLF" class="headerlink" title="ASC&#x2F;BLF"></a>ASC&#x2F;BLF</h2><p>ASC（ASCII）格式为可读的文本文件，该格式文件可以与外部程序进行数据交互，可读性强。<br>支持所有总线信息&#x2F;协议、系统变量、环境变量、内部事件、标记和注释的报文。</p><p>BLF（Binary Logging Format）格式是基于报文的读写格式，是一种二进制日志格式。以二进制格式存储数据，在文件大小和读&#x2F;写性能方面非常高效。<br>支持所有总线信息&#x2F;协议、系统变量、环境变量、内部事件、标记和注释的报文。</p><p>这两种文件主要用于 CANoe&#x2F;CANalyzer 等相关 Vector 软件，用于记录测试数据（ASC 可以用文本直接打开，BLF 需要用 CANoe 进行解析）。</p><h2 id="MDF-MF4-dat"><a href="#MDF-MF4-dat" class="headerlink" title="MDF&#x2F;MF4&#x2F;dat"></a>MDF&#x2F;MF4&#x2F;dat</h2><p>MF4（Measurement Data Format version4）格式用于汽车行业以二进制文件格式存储测量数据。CAN、LIN 和 FlexRay 总线信息以 ASAM 标准存储，其他总线系统和协议以Vector-specific 标准存储。<br>支持所有总线信息&#x2F;协议和环境变量。</p><p>MDF（Measurement Data Format）格式分为基于报文的和基于信号的，基于报文的格式只记录报文信息，基于信号的格式只记录信号信息。<br>支持环境变量、统计信息、CAN 信号、LIN 信号、FlexRay 信号、GPS 信号、J1939 信号和 J1587&#x2F;J1708 信号，但是不支持MOST 信号。</p><p>这几种文件主要用于标定工具（如 CANape&#x2F;INCA 等）测试数据的记录。这些数据可以包含不同类型的数据，故在标定领域应用较多。</p><h2 id="A2L-HEX-S19"><a href="#A2L-HEX-S19" class="headerlink" title="A2L&amp;HEX&#x2F;S19"></a>A2L&amp;HEX&#x2F;S19</h2><p>A2L 文件是基于 ASAP2 标准，采用 ASAP2 指定的一套类 XML 语言的描述性语言（采用开标签和关标签来描述信息）书写，描述 ECU 的通信等相关的参数，以及标定，观测变量的地址以及物理值计算公式等等的文本格式文件。HEX&#x2F;S19 文件则是对应的地址的参数和数据文件。</p><p>这几种数据也多用于标定领域，从事标定工作的小伙伴肯定不陌生。</p><p>打个不太恰当的比方，如果把车载 ECU 比作一个人，那么 A2L 就是他的骨架，HEX&#x2F;S19 文件就是他的血肉，两者缺一不可。<br>另外需要注意的是每一版软件的 A2L 和 HEX 里的地址是一一对应的，如果错用了HEX 文件就有可能出现数据紊乱的情况，需要特别注意。</p>]]></content>
    
    
    <summary type="html">本文介绍了汽车软件开发测试中常见的 can 报文录制格式</summary>
    
    
    
    <category term="自动驾驶" scheme="https://blog.felicx.eu.org/categories/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6/"/>
    
    
    <category term="can" scheme="https://blog.felicx.eu.org/tags/can/"/>
    
  </entry>
  
  <entry>
    <title>Docusaurus 搭建个人知识库</title>
    <link href="https://blog.felicx.eu.org/2483129101.html"/>
    <id>https://blog.felicx.eu.org/2483129101.html</id>
    <published>2024-01-13T15:24:25.000Z</published>
    <updated>2024-01-13T15:30:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>博客是用来展示自己的，想写啥就写啥，所以会比较杂。而 Wiki 更偏向于电子百科，可以作为个人知识库。市面上有很多优秀的 Wiki 系统，但我不想花钱买数据库服务，只能找不需要数据库的这一类系统。因此找到了 <code>Docusaurus</code> ，支持用 <code>jsx</code> 语法的 <code>markdown</code>，无缝结合 <code>React</code>。具体效果可以参考<a href="https://wiki.felicx.eu.org/">我的 Wiki</a></p><h2 id="Docusaurus-安装"><a href="#Docusaurus-安装" class="headerlink" title="Docusaurus 安装"></a>Docusaurus 安装</h2><p>主要参考了<a href="https://www.docusaurus.cn/docs/installation">官方文档</a></p><h3 id="系统需求"><a href="#系统需求" class="headerlink" title="系统需求"></a>系统需求</h3><p>Node.js &gt;&#x3D; 16.14 或 yarn &gt;&#x3D; 1.5</p><h3 id="创建站点"><a href="#创建站点" class="headerlink" title="创建站点"></a>创建站点</h3><p>安装 Docusaurus 的最简单方法是使用命令行工具，该工具会搭建 Docusaurus 网站骨架。</p><p>在新的空存储库中或现有存储库中的任何位置运行此命令，将创建一个包含支架文件的新目录，并自动下载安装需要的库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx create-docusaurus@latest my-website classic</span><br><span class="line"><span class="comment"># `my-website` 为你想要创建的目录，`classic` 为你想要用的模板</span></span><br><span class="line"><span class="comment"># 也可以选择 `facebook`、`bootstrap` 等模板</span></span><br></pre></td></tr></table></figure><h3 id="运行站点"><a href="#运行站点" class="headerlink" title="运行站点"></a>运行站点</h3><p>要在编辑文件时预览更改，可以运行一个本地服务器并启动你的网站，最新更改就能立即反映出来了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-website</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>默认情况下，浏览器将打开 <a href="http://localhost:3000/">http://localhost:3000</a> 网址。</p><p>恭喜你！您刚刚创建了第一个 Docusaurus 网站！浏览网站以查看可用内容吧。</p><h3 id="配置站点信息"><a href="#配置站点信息" class="headerlink" title="配置站点信息"></a>配置站点信息</h3><p>由于我只是想搭建个人知识库，因为已经搭建好了<a href="https://blog.felicx.eu.org/">个人博客</a>，所以修改了下 docusaurus.config.js 中的<code>presets</code>，删除了 blog 页面，只保留 Docs</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">presets</span>: [</span><br><span class="line">  [</span><br><span class="line">    <span class="string">&#x27;classic&#x27;</span>,</span><br><span class="line">    <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">import(&#x27;@docusaurus/preset-classic&#x27;).Options</span>&#125; */</span></span><br><span class="line">    (&#123;</span><br><span class="line">      <span class="attr">docs</span>: &#123;</span><br><span class="line">        <span class="attr">sidebarPath</span>: <span class="string">&#x27;./sidebars.js&#x27;</span>,</span><br><span class="line">        <span class="comment">// Please change this to your repo.</span></span><br><span class="line">        <span class="comment">// Remove this to remove the &quot;edit this page&quot; links.</span></span><br><span class="line">        <span class="attr">editUrl</span>:</span><br><span class="line">          <span class="string">&#x27;https://github.com/FelicxFoster/WikiPage/tree/master&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">theme</span>: &#123;</span><br><span class="line">        <span class="attr">customCss</span>: <span class="string">&#x27;./src/css/custom.css&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>找到 docusaurus.config.js 中的 <code>navbar</code>，注释掉 blog 那一行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">navbar</span>: &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;YOLOのWiki&#x27;</span>,</span><br><span class="line">  <span class="attr">logo</span>: &#123;</span><br><span class="line">    <span class="attr">alt</span>: <span class="string">&#x27;YOLOのWiki Logo&#x27;</span>,</span><br><span class="line">    <span class="attr">src</span>: <span class="string">&#x27;img/logo.svg&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">items</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;docSidebar&#x27;</span>,</span><br><span class="line">      <span class="attr">sidebarId</span>: <span class="string">&#x27;tutorialSidebar&#x27;</span>,</span><br><span class="line">      <span class="attr">position</span>: <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&#x27;Note&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// &#123;to: &#x27;/blog&#x27;, label: &#x27;Blog&#x27;, position: &#x27;left&#x27;&#125;,</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">href</span>: <span class="string">&#x27;https://github.com/FelicxFoster/&#x27;</span>,</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&#x27;GitHub&#x27;</span>,</span><br><span class="line">      <span class="attr">position</span>: <span class="string">&#x27;right&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="Docusaurus-部署"><a href="#Docusaurus-部署" class="headerlink" title="Docusaurus 部署"></a>Docusaurus 部署</h2><p>Vercel 有个好处，可以自动编译并部署，所以只需要把代码提交到 Github 仓库，并在 Vercel 里 import 该仓库就可以了。</p><p>由于每次部署 Vercel 编译需要时间太久，所以尽量在本地调试好再推送到 Vercel。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run build       <span class="comment"># 编译生成 build 文件</span></span><br><span class="line">npm run serve       <span class="comment"># 可视化编译的效果</span></span><br></pre></td></tr></table></figure><h2 id="Docusaurus-美化"><a href="#Docusaurus-美化" class="headerlink" title="Docusaurus 美化"></a>Docusaurus 美化</h2><h3 id="搜索插件"><a href="#搜索插件" class="headerlink" title="搜索插件"></a>搜索插件</h3><p>Docusaurus 默认是没有搜索功能的，这里使用 <a href="https://github.com/easyops-cn/docusaurus-search-local">docusaurus-search-local</a> 这款本地搜索插件来实现。</p><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @easyops-cn/docusaurus-search-local</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在 docusaurus.config.js 中的 config 内容中新增，与 themeConfig 同级</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">themes</span>: [</span><br><span class="line">  [</span><br><span class="line">    <span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&quot;@easyops-cn/docusaurus-search-local&quot;</span>),</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">hashed</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">language</span>: [<span class="string">&quot;en&quot;</span>, <span class="string">&quot;zh&quot;</span>],</span><br><span class="line">      <span class="attr">highlightSearchTermsOnTargetPage</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">explicitSearchResultPath</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>配置完后，可能会报错，显示 <code>Module not found: Error: Can&#39;t resolve &#39;@theme/SearchPage&#39;</code>，不用担心，根据 <a href="https://github.com/easyops-cn/docusaurus-search-local/issues/252">issue</a>，只需要重新 <code>npm start</code> 即可。</p><h3 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h3><p>Docusaurus 默认使用 prismjs 进行代码块的语法高亮，但是需要自己安装这个库，下面参考<a href="https://docusaurus.io/zh-CN/docs/markdown-features/code-blocks#supported-languages">Docusaurus 代码块</a>。</p><h4 id="库安装"><a href="#库安装" class="headerlink" title="库安装"></a>库安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i prismjs</span><br></pre></td></tr></table></figure><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>安装完后，使用 3 个反引号包裹文本块，就可以实现代码块高亮了，比如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`js console.log(&#x27;每个仓库都应该有个吉祥物。&#x27;); `</span><span class="string">``</span></span><br></pre></td></tr></table></figure><p>但是 prismjs 默认只有部分语言可以高亮，像 bash、poweshell 这些，需要在 docusaurus.config.js 中的 prism 内容中新增 additionalLanguages，如下所示，具体要添加的内容，可以在 <a href="https://prismjs.com/#supported-languages">Supported languages</a> 中查找。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">prism</span>: &#123;</span><br><span class="line">  <span class="attr">theme</span>: prismThemes.<span class="property">github</span>,</span><br><span class="line">  <span class="attr">darkTheme</span>: prismThemes.<span class="property">dracula</span>,</span><br><span class="line">  <span class="attr">additionalLanguages</span>: [<span class="string">&#x27;Bash&#x27;</span>],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>注意添加了 additionalLanguages，需要重新启动 Docusaurus 才能生效。</p><h3 id="emoji-使用"><a href="#emoji-使用" class="headerlink" title="emoji 使用"></a>emoji 使用</h3><p>想要在文档中添加 emoji，如📝，需要安装 remark-emoji 库。</p><h4 id="库安装-1"><a href="#库安装-1" class="headerlink" title="库安装"></a>库安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i remark-emoji</span><br></pre></td></tr></table></figure><h3 id="更改字体"><a href="#更改字体" class="headerlink" title="更改字体"></a>更改字体</h3><p>Docusaurus 默认字体有点不好看，本站使用<a href="https://github.com/lxgw/LxgwWenKai">霞鹜文楷</a>来替换。</p><h4 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h4><p>在 <a href="https://github.com/lxgw/LxgwWenKai/releases">releases</a> 下载想要的 ttf 字体（我选的是 LXGWWenKai-Bold.ttf ），放在 Docusaurus 项目的 static&#x2F;font 目录下。</p><p>修改 src&#x2F;css&#x2F;custom.css 添加字体 ，在最前面添加如下内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;LXGWWenKai Regular&#x27;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;/font/LXGWWenKai-Regular.ttf&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置 ifm-font-family-base:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">--ifm-font-family-base</span>: <span class="string">&quot;LXGWWenKai Regular&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存即可生效。</p><h4 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h4><p>上面这种方法每次都要在网页端加载 ttf 字体，会导致网页加载很慢。其实我们可以使用 CDN，网页加载时只需获取所使用的文字所在的分包，大幅降低所需加载的大小，从而提升网页加载速度。</p><p>参考 <a href="https://github.com/chawyehsu/lxgw-wenkai-webfont">lxgw-wenkai-webfont</a> 的使用文档，先安装字体</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save lxgw-wenkai-webfont</span><br></pre></td></tr></table></figure><p>然后将 CDN 地址添加到 docusaurus.config.js 的 stylesheets 属性（与 themes 配置同一级）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stylesheets</span>: [</span><br><span class="line">  <span class="comment">// String format.</span></span><br><span class="line">  <span class="string">&#x27;https://docusaurus.io/style.css&#x27;</span>,</span><br><span class="line">  <span class="comment">// Object format.</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">href</span>: <span class="string">&#x27;https://cdn.bootcdn.net/ajax/libs/lxgw-wenkai-webfont/1.7.0/style.min.css&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>最后像上面一样修改 src&#x2F;css&#x2F;custom.css 的 :root 属性（注意和上面的有点区别）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">--ifm-font-family-base</span>: <span class="string">&quot;LXGW WenKai&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用 Docusaurus 搭建个人 Wiki 并使用 Vercel 部署</summary>
    
    
    
    <category term="折腾系列" scheme="https://blog.felicx.eu.org/categories/%E6%8A%98%E8%85%BE%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="docusaurus" scheme="https://blog.felicx.eu.org/tags/docusaurus/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 博客美化</title>
    <link href="https://blog.felicx.eu.org/3164120416.html"/>
    <id>https://blog.felicx.eu.org/3164120416.html</id>
    <published>2024-01-13T14:02:07.000Z</published>
    <updated>2024-01-13T15:02:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo 默认的博客主题有点单调，挑来挑去选择了 <a href="https://github.com/XPoet/hexo-theme-keep">keep</a> 主题，下面是我的一些踩坑操作。</p><h2 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h2><p>我的博客使用的是 <a href="https://waline.js.org/">Waline</a> 这款简洁、安全的评论系统。要在博客中使用 Waline，分为三步</p><ul><li>通过 LeanCloud 配置 Waline 评论系统的数据库</li><li>通过 Vercel 部署 Waline 评论系统的服务端</li><li>在主题配置文件中配置 Waline 服务端地址</li></ul><h3 id="LeanCloud-设置"><a href="#LeanCloud-设置" class="headerlink" title="LeanCloud 设置"></a>LeanCloud 设置</h3><ol><li><p><a href="https://console.leancloud.app/login">登录</a> 或 <a href="https://console.leancloud.app/register">注册</a> <code>LeanCloud 国际版</code> 并进入 <a href="https://console.leancloud.app/apps">控制台</a></p></li><li><p>点击左上角 <a href="https://console.leancloud.app/apps">创建应用</a> 并起一个你喜欢的名字 (请选择免费的开发版):<br><img src="/assets/post/20240714_bDiWRPQX.webp" alt="创建应用"></p></li><li><p>进入应用，选择左下角的 <code>设置</code> &gt; <code>应用 Key</code>。你可以看到你的 <code>APP ID</code>，<code>APP Key</code> 和 <code>Master Key</code>。请记录它们，以便后续使用。<br><img src="/assets/post/20240714_jnsC0e9Q.webp" alt="ID 和 Key"></p></li></ol><h3 id="Vercel-部署"><a href="#Vercel-部署" class="headerlink" title="Vercel 部署"></a>Vercel 部署</h3><ol><li><p>点击<a href="https://vercel.com/new/clone?repository-url=https://github.com/walinejs/waline/tree/main/example"><img src="https://vercel.com/button" alt="Vercel"></a>按钮，跳转至 Vercel 进行 Server 端部署。</p></li><li><p>输入一个你喜欢的 Vercel 项目名称并点击 <code>Create</code> 继续:</p></li></ol><p><img src="/assets/post/20240714_11fpDTpH.webp" alt="创建项目"></p><ol start="3"><li>此时 Vercel 会基于 Waline 模板帮助你新建并初始化仓库，仓库名为你之前输入的项目名。</li></ol><p><img src="/assets/post/20240714_GtN64Dxm.webp" alt="deploy"></p><p>一两分钟后，满屏的烟花会庆祝你部署成功。此时点击 <code>Go to Dashboard</code> 可以跳转到应用的控制台。</p><p><img src="/assets/post/20240714_j9sx8y9Y.webp" alt="deploy"></p><ol start="4"><li>点击顶部的 <code>Settings</code> - <code>Environment Variables</code> 进入环境变量配置页，并配置填入三个环境变量 <code>LEAN_ID</code>, <code>LEAN_KEY</code> 和 <code>LEAN_MASTER_KEY</code> 。它们的值分别对应上一步在 LeanCloud 中获得的 <code>APP ID</code>, <code>APP KEY</code>, <code>Master Key</code>。</li></ol><p><img src="/assets/post/20240714_F2CJ69ME.webp" alt="设置环境变量"></p><ol start="5"><li>环境变量配置完成之后点击顶部的 <code>Deployments</code> 点击顶部最新的一次部署右侧的 <code>Redeploy</code> 按钮进行重新部署。该步骤是为了让刚才设置的环境变量生效。</li></ol><p><img src="/assets/post/20240714_tlnlr4m8.webp" alt="redeploy"></p><ol start="6"><li>此时会跳转到 <code>Overview</code> 界面开始部署，等待片刻后 <code>STATUS</code> 会变成 <code>Ready</code>。此时请点击 <code>Visit</code> ，即可跳转到部署好的网站地址，此地址即为你的服务端地址。</li></ol><p><img src="/assets/post/20240714_WeL6ULF0.webp" alt="redeploy success"></p><h3 id="绑定域名-可选"><a href="#绑定域名-可选" class="headerlink" title="绑定域名 (可选)"></a>绑定域名 (可选)</h3><ol><li><p>点击顶部的 <code>Settings</code> - <code>Domains</code> 进入域名配置页</p></li><li><p>输入需要绑定的域名并点击 <code>Add</code></p></li></ol><p><img src="/assets/post/20240714_26Y4fPs1.webp" alt="Add domain"></p><ol start="3"><li>在域名服务器商处添加新的 <code>CNAME</code> 解析记录</li></ol><table><thead><tr><th>Type</th><th>Name</th><th>Value</th></tr></thead><tbody><tr><td>CNAME</td><td>example</td><td>cname.vercel-dns.com</td></tr></tbody></table><ol start="4"><li>等待生效，你可以通过自己的域名来访问了🎉</li></ol><ul><li>评论系统：example.yourdomain.com</li><li>评论管理：example.yourdomain.com&#x2F;ui</li></ul><p><img src="/assets/post/20240714_YGEHCut4.webp" alt="success"></p><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>keep 主题已经支持 Waline 了，所以只修改主题中的 _config.yml 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">waline:</span><br><span class="line">  server_url: https://example.yourdomain.com  <span class="comment"># 这里填上面设置的域名</span></span><br></pre></td></tr></table></figure><h2 id="设置文章加密访问"><a href="#设置文章加密访问" class="headerlink" title="设置文章加密访问"></a>设置文章加密访问</h2><p>有时想写一些私密博客，这里推荐一款适用于 Hexo 的静态博客加密插件 <a href="https://github.com/D0n9X1n/hexo-blog-encrypt">hexo-blog-encrypt</a>。</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> your-hexo</span><br><span class="line">npm install hexo-blog-encrypt</span><br></pre></td></tr></table></figure><h3 id="文章配置"><a href="#文章配置" class="headerlink" title="文章配置"></a>文章配置</h3><p>在想要加密的文章里添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">password: xxx</span><br><span class="line"><span class="comment"># 下面两个可选</span></span><br><span class="line">message: <span class="string">&#x27;Hey, password is required here.&#x27;</span></span><br><span class="line">wrong_pass_message: <span class="string">&#x27;Oh, this is an invalid password. Check and try again, please.&#x27;</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Hexo 博客使用 Keep 主题进行美化</summary>
    
    
    
    <category term="折腾系列" scheme="https://blog.felicx.eu.org/categories/%E6%8A%98%E8%85%BE%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="hexo" scheme="https://blog.felicx.eu.org/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 博客搭建</title>
    <link href="https://blog.felicx.eu.org/426584999.html"/>
    <id>https://blog.felicx.eu.org/426584999.html</id>
    <published>2024-01-07T02:07:50.000Z</published>
    <updated>2024-01-07T03:07:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前博客用的是 <a href="https://blog.felicx.eu.org/3594890502.html">Halo 2.0</a> 搭建，最近服务器到期了，在国内服务器需要备案，不想再续费了。对我而言，写博客重点是写，而不是一直折腾外观，所以没必要选择动态博客。搜索了很久，最终选择了 <em>Hexo+Github+Vercel</em> 的组合，既能满足我写博客的需求，又能省钱，两全其美。具体效果可以参考<a href="https://blog.felicx.eu.org/">我的博客</a>。</p><h2 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h2><p>因为 Hexo 是基于 Node.js 的，所以要使用 Hexo，那么第一步肯定是安装 Node.js。</p><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>进入<a href="https://nodejs.cn/download/">下载地址</a>下载</p><p>直接安装，完成后，在 cmd 上输入 <code>node -v</code> 和 <code>npm -v</code> 查看是否安装成功，这两条命令如果都输出了版本号，那么就表示安装成功了。</p><p>安装完之后，因为 Node.js 仓库会被墙掉，所以我们需要更换为国内镜像仓库，在终端中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="安装-Hexo-工具"><a href="#安装-Hexo-工具" class="headerlink" title="安装 Hexo 工具"></a>安装 Hexo 工具</h3><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>出现 Hexo 的相关信息则表示 Hexo 安装成功</p><h3 id="创建-Hexo-本地程序"><a href="#创建-Hexo-本地程序" class="headerlink" title="创建 Hexo 本地程序"></a>创建 Hexo 本地程序</h3><p>在电脑上创建一个目录 HexoBlog，cmd 命令进入该目录（不要用 Git Bash Here，不然你没法用 Ctrl+C 关闭）</p><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line"><span class="comment"># 下面是在执行上面的命令之后的结果</span></span><br><span class="line">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class="line">INFO  Install dependencies</span><br><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure><h3 id="启动-Hexo-本地服务"><a href="#启动-Hexo-本地服务" class="headerlink" title="启动 Hexo 本地服务"></a>启动 Hexo 本地服务</h3><p>安装完成 Hexo 程序直接执行 <code>hexo s</code> 或者 <code>hexo server</code> 命令就可以打开 Hexo 的本地服务。在命令行上会显示启动后的服务地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br><span class="line"><span class="comment"># 下面是在执行上面的命令之后的结果</span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>复制上文中的 <code>http://localhost:4000</code> 并在浏览器中打开，就可以看到你的网站在本地的部署</p><p><img src="/assets/post/20240714_3LjOIkhQ.webp" alt="Hexo界面"></p><h2 id="GitHub-同步"><a href="#GitHub-同步" class="headerlink" title="GitHub 同步"></a>GitHub 同步</h2><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>前往 <a href="https://github.com/">GitHub</a> 新建一个仓库，而且得确保你的仓库是 <code>public</code>，同时，仓库名最好是 <code>用户名.github.io</code>（其实自定义也是可以的，是为了防止后面 vercel 被封了还可以迁移到 GithubPage）。</p><p><img src="/assets/post/20240714_uPF5eDU3.webp" alt="Github仓库"></p><h3 id="设置-Git"><a href="#设置-Git" class="headerlink" title="设置 Git"></a>设置 Git</h3><p>打开 <code>Git Bash</code> ，运行下面的命令 :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;&#123;&#123;你的电子邮箱地址&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>连续 3 次回车，最终会在用户目录下生成个包含公钥私钥等数据的目录 ( 一般是 <code>C:/Users/&#123;&#123;你的用户名&#125;&#125;/.ssh/</code> ) 。</p><p><img src="/assets/post/20240714_OlH6rqor.webp" alt="ssh密钥配置"></p><p>打开这个目录，找到 <code>id_rsa.pub</code> 文件，用记事本打开并复制里面的内容</p><p>粘贴到GitHub仓库的 <code>Key</code> 中，<code>Title</code> 填你喜欢的，点击保存 ( <code>Add SSH Key</code> )</p><p><img src="/assets/post/20240714_Yirrtn8o.webp" alt="在GitHub中输入密钥"></p><p>运行下方命令 :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;&#123;&#123;你的 GitHub username&#125;&#125;&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;&#123;&#123;你的 GitHub 注册邮箱地址&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h3><p>打开 <code>Git Bash</code> ，运行下面的命令 :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com <span class="comment"># 此处邮箱地址不用改</span></span><br></pre></td></tr></table></figure><p>如果提示 <code>Are you sure you want to continue connecting (yes/no)?</code> 请输入 <code>yes</code> 并回车。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi &#123;&#123;你的 GitHub username&#125;&#125;! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>看到这个信息则说明配置成功。</p><h3 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h3><p>完成上面的步骤后，接下来就是推送网站到 Github Pages 了，然后我们就能被其他人访问了。</p><p>只需要在我们刚才的 HexoBlog 目录中的站点配置文件 <code>_config.yml</code> ，找到最后一行，修改它</p><p><img src="/assets/post/20240714_uISl38s4.webp" alt="deploy修改"></p><p>在你新建的仓库这里，可以找到repo，复制它</p><p><img src="https://yzfzzz.oss-cn-shenzhen.aliyuncs.com/image/202204021430661.png" alt="repo链接"></p><p>cmd 进入 HexoBlog 目录中，依次执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>完成上述步骤之后，主要使用如下命令，就能将我们本地的内容推送到远程 GitHub 仓库了，然后在浏览器中访问：<code>https://用户名.github.io</code>。</p><h2 id="Vercel-部署"><a href="#Vercel-部署" class="headerlink" title="Vercel 部署"></a>Vercel 部署</h2><p>我们知道，GitHub 是国外网站，所以有时候访问会很慢，这时，我们可以尝试用 <a href="https://vercel.com/">vercel</a> 加速博客访问。</p><h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h3><p>进入<a href="https://vercel.com/login">登陆页面</a>，使用 GitHub 账号登陆即可（需要手机号码验证，直接填手机号收验证码即可，不会收集你的信息的）。</p><h3 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h3><p>选择 Create a New Project<br><img src="/assets/post/20240714_Ql1qcRMj.webp" alt="Create a New Project"></p><p>在关联的 github 账户中，找到刚才的博客仓库，选择 import<br><img src="/assets/post/20240714_uy60TXdD.webp" alt="import repository"></p><p>进入部署页面选择 deploy，注意 Framework Preset 要选择 Other 而不是 Hexo，其他的默认<br><img src="/assets/post/20240714_JW6F63K0.webp" alt="deploy"></p><p>生成之后点击 Continue to Dashboard<br><img src="/assets/post/20240714_8aZsm2xV.webp" alt="Dashboard"></p><p>访问 Vercel 给你的域名（类似于<code>https://xxx.vercel.app/</code>），就能加速访问你的网站了</p><h3 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h3><p>然而，你用上面 vercel 自动分配的域名是无法访问你的网站的，因为 vercel 在国内已经被墙了。所以你需要在 vercel 中绑定自己的域名。</p><p>选择 Settings 中的 Domains 添加域名<br><img src="/assets/post/20240714_G0GVJe01.webp" alt="绑定域名"></p><p>另外，需要在域名解析处（比如我是 Cloudfalre）填写相应的 CNAME 值。</p><table><thead><tr><th>Type</th><th>Name</th><th>Value</th></tr></thead><tbody><tr><td>CNAME</td><td>blog</td><td>cname.vercel-dns.com</td></tr></tbody></table><h2 id="博客使用"><a href="#博客使用" class="headerlink" title="博客使用"></a>博客使用</h2><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;name&quot;</span>       <span class="comment"># 新建文章</span></span><br><span class="line">hexo new page <span class="string">&quot;name&quot;</span>  <span class="comment"># 新建页面</span></span><br><span class="line">hexo g                <span class="comment"># 生成页面</span></span><br><span class="line">hexo d                <span class="comment"># 部署</span></span><br><span class="line">hexo g -d             <span class="comment"># 生成页面并部署</span></span><br><span class="line">hexo s                <span class="comment"># 本地预览</span></span><br><span class="line">hexo clean            <span class="comment"># 清除缓存和已生成的静态文件</span></span><br><span class="line">hexo <span class="built_in">help</span>             <span class="comment"># 帮助</span></span><br></pre></td></tr></table></figure><h3 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h3><p>你可以通过更换主题，并写上你的名字以便修改自己网站的信息并美化它</p><p>我用的是 <a href="https://github.com/XPoet/hexo-theme-keep">keep</a> 主题<br><img src="/assets/post/20240714_wYUCA6jH.webp" alt="keep"></p><p>他的<a href="https://keep-docs.xpoet.cn/">介绍文档</a>写得非常的详细，简直是保姆级教程，大家可以慢慢去探索。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/661328908">Hexo+Github+Netlify博客搭建教程</a></li></ul>]]></content>
    
    
    <summary type="html">服务器到期了，把博客从 Halo 迁移到了 Hexo 上并用 vercel 部署，主打白嫖</summary>
    
    
    
    <category term="折腾系列" scheme="https://blog.felicx.eu.org/categories/%E6%8A%98%E8%85%BE%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="hexo" scheme="https://blog.felicx.eu.org/tags/hexo/"/>
    
  </entry>
  
</feed>
